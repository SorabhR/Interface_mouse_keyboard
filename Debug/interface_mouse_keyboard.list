
interface_mouse_keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000840c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  08008594  08008594  00009594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008960  08008960  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  08008960  08008960  00009960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008968  08008968  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008968  08008968  00009968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800896c  0800896c  0000996c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008970  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          000009a8  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a24  20000a24  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013f73  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000370a  00000000  00000000  0001e01f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  00021730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a0b  00000000  00000000  00022490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d3c  00000000  00000000  00022e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014173  00000000  00000000  00046bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c972b  00000000  00000000  0005ad4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00124475  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038b0  00000000  00000000  001244b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00127d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800857c 	.word	0x0800857c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800857c 	.word	0x0800857c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <USBH_HID_EventCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char uart_buffer[100];
char trial[] = "hey bro\n";

void USBH_HID_EventCallback(USBH_HandleTypeDef *phost){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	if(USBH_HID_GetDeviceType(phost) == HID_MOUSE){
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f005 fbe2 	bl	8005c8a <USBH_HID_GetDeviceType>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d115      	bne.n	80004f8 <USBH_HID_EventCallback+0x40>

		HID_MOUSE_Info_TypeDef *Mouse_info;
		Mouse_info = USBH_HID_GetMouseInfo(phost);
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f005 fe31 	bl	8006134 <USBH_HID_GetMouseInfo>
 80004d2:	6178      	str	r0, [r7, #20]

		//Just to check if its a proper mouse event i have blinked an led
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004da:	4824      	ldr	r0, [pc, #144]	@ (800056c <USBH_HID_EventCallback+0xb4>)
 80004dc:	f000 fdce 	bl	800107c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80004e0:	2064      	movs	r0, #100	@ 0x64
 80004e2:	f000 faf9 	bl	8000ad8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004ec:	481f      	ldr	r0, [pc, #124]	@ (800056c <USBH_HID_EventCallback+0xb4>)
 80004ee:	f000 fdc5 	bl	800107c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80004f2:	2064      	movs	r0, #100	@ 0x64
 80004f4:	f000 faf0 	bl	8000ad8 <HAL_Delay>
//		int len = sprintf(uart_buffer,"X=%d, Y=%d, b1=%d, b2=%d, b3=%d\n" \
//				,Mouse_info->x,Mouse_info->y,Mouse_info->buttons[0],Mouse_info->buttons[1],Mouse_info->buttons[2]);
//		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, len, 1000);
	}

	if(USBH_HID_GetDeviceType(phost) == HID_KEYBOARD){
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f005 fbc6 	bl	8005c8a <USBH_HID_GetDeviceType>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b02      	cmp	r3, #2
 8000502:	d12f      	bne.n	8000564 <USBH_HID_EventCallback+0xac>

		//Just to check if its a proper keybd event i have blinked an led
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800050a:	4818      	ldr	r0, [pc, #96]	@ (800056c <USBH_HID_EventCallback+0xb4>)
 800050c:	f000 fdb6 	bl	800107c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000510:	2064      	movs	r0, #100	@ 0x64
 8000512:	f000 fae1 	bl	8000ad8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800051c:	4813      	ldr	r0, [pc, #76]	@ (800056c <USBH_HID_EventCallback+0xb4>)
 800051e:	f000 fdad 	bl	800107c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000522:	2064      	movs	r0, #100	@ 0x64
 8000524:	f000 fad8 	bl	8000ad8 <HAL_Delay>

		HID_KEYBD_Info_TypeDef *keybd_info;
		keybd_info = USBH_HID_GetKeybdInfo(phost);
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f005 fce5 	bl	8005ef8 <USBH_HID_GetKeybdInfo>
 800052e:	6138      	str	r0, [r7, #16]
		char key = USBH_HID_GetASCIICode(keybd_info);
 8000530:	6938      	ldr	r0, [r7, #16]
 8000532:	f005 fd89 	bl	8006048 <USBH_HID_GetASCIICode>
 8000536:	4603      	mov	r3, r0
 8000538:	73fb      	strb	r3, [r7, #15]

		//to test specific key
		if(key == 'a'){
 800053a:	7bfb      	ldrb	r3, [r7, #15]
 800053c:	2b61      	cmp	r3, #97	@ 0x61
 800053e:	d111      	bne.n	8000564 <USBH_HID_EventCallback+0xac>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000546:	4809      	ldr	r0, [pc, #36]	@ (800056c <USBH_HID_EventCallback+0xb4>)
 8000548:	f000 fd98 	bl	800107c <HAL_GPIO_WritePin>
			HAL_Delay(100);
 800054c:	2064      	movs	r0, #100	@ 0x64
 800054e:	f000 fac3 	bl	8000ad8 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000558:	4804      	ldr	r0, [pc, #16]	@ (800056c <USBH_HID_EventCallback+0xb4>)
 800055a:	f000 fd8f 	bl	800107c <HAL_GPIO_WritePin>
			HAL_Delay(100);
 800055e:	2064      	movs	r0, #100	@ 0x64
 8000560:	f000 faba 	bl	8000ad8 <HAL_Delay>

		//will need usb to ttl for this
//		int len = sprintf(uart_buffer,"key presses=%c\n",key);
//		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, len, 1000);
	}
}
 8000564:	bf00      	nop
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40020c00 	.word	0x40020c00

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fa3e 	bl	80009f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f810 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f8a2 	bl	80006c4 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8000580:	f007 fba6 	bl	8007cd0 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000584:	f000 f874 	bl	8000670 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //This has been done to ensure vbus is activated all the time
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2101      	movs	r1, #1
 800058c:	4802      	ldr	r0, [pc, #8]	@ (8000598 <main+0x28>)
 800058e:	f000 fd75 	bl	800107c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000592:	f007 fbc3 	bl	8007d1c <MX_USB_HOST_Process>
 8000596:	e7fc      	b.n	8000592 <main+0x22>
 8000598:	40020800 	.word	0x40020800

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	@ 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2230      	movs	r2, #48	@ 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f007 ff58 	bl	8008460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	4b28      	ldr	r3, [pc, #160]	@ (8000668 <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	4a27      	ldr	r2, [pc, #156]	@ (8000668 <SystemClock_Config+0xcc>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d0:	4b25      	ldr	r3, [pc, #148]	@ (8000668 <SystemClock_Config+0xcc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b22      	ldr	r3, [pc, #136]	@ (800066c <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a21      	ldr	r2, [pc, #132]	@ (800066c <SystemClock_Config+0xd0>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b1f      	ldr	r3, [pc, #124]	@ (800066c <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000600:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800060a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800060c:	2308      	movs	r3, #8
 800060e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000610:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000614:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800061a:	2307      	movs	r3, #7
 800061c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	4618      	mov	r0, r3
 8000624:	f002 fe78 	bl	8003318 <HAL_RCC_OscConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800062e:	f000 f8bf 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	2302      	movs	r3, #2
 8000638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000642:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000644:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000648:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2105      	movs	r1, #5
 8000650:	4618      	mov	r0, r3
 8000652:	f003 f8d9 	bl	8003808 <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800065c:	f000 f8a8 	bl	80007b0 <Error_Handler>
  }
}
 8000660:	bf00      	nop
 8000662:	3750      	adds	r7, #80	@ 0x50
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000674:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <MX_USART2_UART_Init+0x4c>)
 8000676:	4a12      	ldr	r2, [pc, #72]	@ (80006c0 <MX_USART2_UART_Init+0x50>)
 8000678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800067a:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <MX_USART2_UART_Init+0x4c>)
 800067c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <MX_USART2_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <MX_USART2_UART_Init+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068e:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <MX_USART2_UART_Init+0x4c>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <MX_USART2_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <MX_USART2_UART_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	@ (80006bc <MX_USART2_UART_Init+0x4c>)
 80006a8:	f003 face 	bl	8003c48 <HAL_UART_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006b2:	f000 f87d 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000098 	.word	0x20000098
 80006c0:	40004400 	.word	0x40004400

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	@ 0x28
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	4b31      	ldr	r3, [pc, #196]	@ (80007a4 <MX_GPIO_Init+0xe0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a30      	ldr	r2, [pc, #192]	@ (80007a4 <MX_GPIO_Init+0xe0>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b2e      	ldr	r3, [pc, #184]	@ (80007a4 <MX_GPIO_Init+0xe0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <MX_GPIO_Init+0xe0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a29      	ldr	r2, [pc, #164]	@ (80007a4 <MX_GPIO_Init+0xe0>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <MX_GPIO_Init+0xe0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <MX_GPIO_Init+0xe0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a22      	ldr	r2, [pc, #136]	@ (80007a4 <MX_GPIO_Init+0xe0>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <MX_GPIO_Init+0xe0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <MX_GPIO_Init+0xe0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a1b      	ldr	r2, [pc, #108]	@ (80007a4 <MX_GPIO_Init+0xe0>)
 8000738:	f043 0308 	orr.w	r3, r3, #8
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <MX_GPIO_Init+0xe0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0308 	and.w	r3, r3, #8
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2101      	movs	r1, #1
 800074e:	4816      	ldr	r0, [pc, #88]	@ (80007a8 <MX_GPIO_Init+0xe4>)
 8000750:	f000 fc94 	bl	800107c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800075a:	4814      	ldr	r0, [pc, #80]	@ (80007ac <MX_GPIO_Init+0xe8>)
 800075c:	f000 fc8e 	bl	800107c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000760:	2301      	movs	r3, #1
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	480c      	ldr	r0, [pc, #48]	@ (80007a8 <MX_GPIO_Init+0xe4>)
 8000778:	f000 fae4 	bl	8000d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800077c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_GPIO_Init+0xe8>)
 8000796:	f000 fad5 	bl	8000d44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079a:	bf00      	nop
 800079c:	3728      	adds	r7, #40	@ 0x28
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020800 	.word	0x40020800
 80007ac:	40020c00 	.word	0x40020c00

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <Error_Handler+0x8>

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <HAL_MspInit+0x4c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000808 <HAL_MspInit+0x4c>)
 80007cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000808 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e6:	4a08      	ldr	r2, [pc, #32]	@ (8000808 <HAL_MspInit+0x4c>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <HAL_MspInit+0x4c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007fa:	2007      	movs	r0, #7
 80007fc:	f000 fa60 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800

0800080c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	@ 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a19      	ldr	r2, [pc, #100]	@ (8000890 <HAL_UART_MspInit+0x84>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d12b      	bne.n	8000886 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <HAL_UART_MspInit+0x88>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000836:	4a17      	ldr	r2, [pc, #92]	@ (8000894 <HAL_UART_MspInit+0x88>)
 8000838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800083c:	6413      	str	r3, [r2, #64]	@ 0x40
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <HAL_UART_MspInit+0x88>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <HAL_UART_MspInit+0x88>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a10      	ldr	r2, [pc, #64]	@ (8000894 <HAL_UART_MspInit+0x88>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <HAL_UART_MspInit+0x88>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000866:	230c      	movs	r3, #12
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000876:	2307      	movs	r3, #7
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	@ (8000898 <HAL_UART_MspInit+0x8c>)
 8000882:	f000 fa5f 	bl	8000d44 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	@ 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40004400 	.word	0x40004400
 8000894:	40023800 	.word	0x40023800
 8000898:	40020000 	.word	0x40020000

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <NMI_Handler+0x4>

080008a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <MemManage_Handler+0x4>

080008b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f2:	f000 f8d1 	bl	8000a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000900:	4802      	ldr	r0, [pc, #8]	@ (800090c <OTG_FS_IRQHandler+0x10>)
 8000902:	f000 feb5 	bl	8001670 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200004fc 	.word	0x200004fc

08000910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000918:	4a14      	ldr	r2, [pc, #80]	@ (800096c <_sbrk+0x5c>)
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <_sbrk+0x60>)
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000924:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <_sbrk+0x64>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d102      	bne.n	8000932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800092c:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <_sbrk+0x64>)
 800092e:	4a12      	ldr	r2, [pc, #72]	@ (8000978 <_sbrk+0x68>)
 8000930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <_sbrk+0x64>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	429a      	cmp	r2, r3
 800093e:	d207      	bcs.n	8000950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000940:	f007 fda6 	bl	8008490 <__errno>
 8000944:	4603      	mov	r3, r0
 8000946:	220c      	movs	r2, #12
 8000948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	e009      	b.n	8000964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000950:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <_sbrk+0x64>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000956:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <_sbrk+0x64>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	4a05      	ldr	r2, [pc, #20]	@ (8000974 <_sbrk+0x64>)
 8000960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000962:	68fb      	ldr	r3, [r7, #12]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20020000 	.word	0x20020000
 8000970:	00000400 	.word	0x00000400
 8000974:	200000e0 	.word	0x200000e0
 8000978:	20000a28 	.word	0x20000a28

0800097c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <SystemInit+0x20>)
 8000982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000986:	4a05      	ldr	r2, [pc, #20]	@ (800099c <SystemInit+0x20>)
 8000988:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800098c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009a4:	f7ff ffea 	bl	800097c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009a8:	480c      	ldr	r0, [pc, #48]	@ (80009dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009aa:	490d      	ldr	r1, [pc, #52]	@ (80009e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009ac:	4a0d      	ldr	r2, [pc, #52]	@ (80009e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b0:	e002      	b.n	80009b8 <LoopCopyDataInit>

080009b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b6:	3304      	adds	r3, #4

080009b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009bc:	d3f9      	bcc.n	80009b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009be:	4a0a      	ldr	r2, [pc, #40]	@ (80009e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009c0:	4c0a      	ldr	r4, [pc, #40]	@ (80009ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c4:	e001      	b.n	80009ca <LoopFillZerobss>

080009c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c8:	3204      	adds	r2, #4

080009ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009cc:	d3fb      	bcc.n	80009c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ce:	f007 fd65 	bl	800849c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009d2:	f7ff fdcd 	bl	8000570 <main>
  bx  lr    
 80009d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80009e4:	08008970 	.word	0x08008970
  ldr r2, =_sbss
 80009e8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80009ec:	20000a24 	.word	0x20000a24

080009f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <ADC_IRQHandler>
	...

080009f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <HAL_Init+0x40>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a34 <HAL_Init+0x40>)
 80009fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a04:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <HAL_Init+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0a      	ldr	r2, [pc, #40]	@ (8000a34 <HAL_Init+0x40>)
 8000a0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a10:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a07      	ldr	r2, [pc, #28]	@ (8000a34 <HAL_Init+0x40>)
 8000a16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f000 f94f 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 f808 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a28:	f7ff fec8 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023c00 	.word	0x40023c00

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a40:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <HAL_InitTick+0x54>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <HAL_InitTick+0x58>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f967 	bl	8000d2a <HAL_SYSTICK_Config>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e00e      	b.n	8000a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b0f      	cmp	r3, #15
 8000a6a:	d80a      	bhi.n	8000a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	f000 f92f 	bl	8000cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a78:	4a06      	ldr	r2, [pc, #24]	@ (8000a94 <HAL_InitTick+0x5c>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e000      	b.n	8000a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000008 	.word	0x20000008
 8000a94:	20000004 	.word	0x20000004

08000a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_IncTick+0x20>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <HAL_IncTick+0x24>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a04      	ldr	r2, [pc, #16]	@ (8000abc <HAL_IncTick+0x24>)
 8000aaa:	6013      	str	r3, [r2, #0]
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	200000e4 	.word	0x200000e4

08000ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	@ (8000ad4 <HAL_GetTick+0x14>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	200000e4 	.word	0x200000e4

08000ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae0:	f7ff ffee 	bl	8000ac0 <HAL_GetTick>
 8000ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af0:	d005      	beq.n	8000afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <HAL_Delay+0x44>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4413      	add	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000afe:	bf00      	nop
 8000b00:	f7ff ffde 	bl	8000ac0 <HAL_GetTick>
 8000b04:	4602      	mov	r2, r0
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d8f7      	bhi.n	8000b00 <HAL_Delay+0x28>
  {
  }
}
 8000b10:	bf00      	nop
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000008 	.word	0x20000008

08000b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b30:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b52:	4a04      	ldr	r2, [pc, #16]	@ (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	60d3      	str	r3, [r2, #12]
}
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b6c:	4b04      	ldr	r3, [pc, #16]	@ (8000b80 <__NVIC_GetPriorityGrouping+0x18>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	f003 0307 	and.w	r3, r3, #7
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	db0b      	blt.n	8000bae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f003 021f 	and.w	r2, r3, #31
 8000b9c:	4907      	ldr	r1, [pc, #28]	@ (8000bbc <__NVIC_EnableIRQ+0x38>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	095b      	lsrs	r3, r3, #5
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8000baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e100 	.word	0xe000e100

08000bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	db0a      	blt.n	8000bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	490c      	ldr	r1, [pc, #48]	@ (8000c0c <__NVIC_SetPriority+0x4c>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	0112      	lsls	r2, r2, #4
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	440b      	add	r3, r1
 8000be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be8:	e00a      	b.n	8000c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4908      	ldr	r1, [pc, #32]	@ (8000c10 <__NVIC_SetPriority+0x50>)
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f003 030f 	and.w	r3, r3, #15
 8000bf6:	3b04      	subs	r3, #4
 8000bf8:	0112      	lsls	r2, r2, #4
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	761a      	strb	r2, [r3, #24]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000e100 	.word	0xe000e100
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	@ 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	f1c3 0307 	rsb	r3, r3, #7
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	bf28      	it	cs
 8000c32:	2304      	movcs	r3, #4
 8000c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	2b06      	cmp	r3, #6
 8000c3c:	d902      	bls.n	8000c44 <NVIC_EncodePriority+0x30>
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3b03      	subs	r3, #3
 8000c42:	e000      	b.n	8000c46 <NVIC_EncodePriority+0x32>
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43da      	mvns	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	401a      	ands	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa01 f303 	lsl.w	r3, r1, r3
 8000c66:	43d9      	mvns	r1, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	4313      	orrs	r3, r2
         );
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3724      	adds	r7, #36	@ 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c8c:	d301      	bcc.n	8000c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00f      	b.n	8000cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <SysTick_Config+0x40>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f7ff ff8e 	bl	8000bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <SysTick_Config+0x40>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000caa:	4b04      	ldr	r3, [pc, #16]	@ (8000cbc <SysTick_Config+0x40>)
 8000cac:	2207      	movs	r2, #7
 8000cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ff29 	bl	8000b20 <__NVIC_SetPriorityGrouping>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce8:	f7ff ff3e 	bl	8000b68 <__NVIC_GetPriorityGrouping>
 8000cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	6978      	ldr	r0, [r7, #20]
 8000cf4:	f7ff ff8e 	bl	8000c14 <NVIC_EncodePriority>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff5d 	bl	8000bc0 <__NVIC_SetPriority>
}
 8000d06:	bf00      	nop
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff31 	bl	8000b84 <__NVIC_EnableIRQ>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ffa2 	bl	8000c7c <SysTick_Config>
 8000d38:	4603      	mov	r3, r0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	@ 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
 8000d5e:	e16b      	b.n	8001038 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d60:	2201      	movs	r2, #1
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	f040 815a 	bne.w	8001032 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d005      	beq.n	8000d96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d130      	bne.n	8000df8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	2203      	movs	r2, #3
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4013      	ands	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	68da      	ldr	r2, [r3, #12]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dcc:	2201      	movs	r2, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	091b      	lsrs	r3, r3, #4
 8000de2:	f003 0201 	and.w	r2, r3, #1
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d017      	beq.n	8000e34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d123      	bne.n	8000e88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	08da      	lsrs	r2, r3, #3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3208      	adds	r2, #8
 8000e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	f003 0307 	and.w	r3, r3, #7
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	220f      	movs	r2, #15
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	691a      	ldr	r2, [r3, #16]
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	08da      	lsrs	r2, r3, #3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3208      	adds	r2, #8
 8000e82:	69b9      	ldr	r1, [r7, #24]
 8000e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	2203      	movs	r2, #3
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0203 	and.w	r2, r3, #3
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f000 80b4 	beq.w	8001032 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b60      	ldr	r3, [pc, #384]	@ (8001050 <HAL_GPIO_Init+0x30c>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed2:	4a5f      	ldr	r2, [pc, #380]	@ (8001050 <HAL_GPIO_Init+0x30c>)
 8000ed4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ed8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eda:	4b5d      	ldr	r3, [pc, #372]	@ (8001050 <HAL_GPIO_Init+0x30c>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ede:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ee6:	4a5b      	ldr	r2, [pc, #364]	@ (8001054 <HAL_GPIO_Init+0x310>)
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	3302      	adds	r3, #2
 8000eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	220f      	movs	r2, #15
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a52      	ldr	r2, [pc, #328]	@ (8001058 <HAL_GPIO_Init+0x314>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d02b      	beq.n	8000f6a <HAL_GPIO_Init+0x226>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a51      	ldr	r2, [pc, #324]	@ (800105c <HAL_GPIO_Init+0x318>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d025      	beq.n	8000f66 <HAL_GPIO_Init+0x222>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a50      	ldr	r2, [pc, #320]	@ (8001060 <HAL_GPIO_Init+0x31c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d01f      	beq.n	8000f62 <HAL_GPIO_Init+0x21e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4f      	ldr	r2, [pc, #316]	@ (8001064 <HAL_GPIO_Init+0x320>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d019      	beq.n	8000f5e <HAL_GPIO_Init+0x21a>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4e      	ldr	r2, [pc, #312]	@ (8001068 <HAL_GPIO_Init+0x324>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d013      	beq.n	8000f5a <HAL_GPIO_Init+0x216>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4d      	ldr	r2, [pc, #308]	@ (800106c <HAL_GPIO_Init+0x328>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d00d      	beq.n	8000f56 <HAL_GPIO_Init+0x212>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4c      	ldr	r2, [pc, #304]	@ (8001070 <HAL_GPIO_Init+0x32c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d007      	beq.n	8000f52 <HAL_GPIO_Init+0x20e>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4b      	ldr	r2, [pc, #300]	@ (8001074 <HAL_GPIO_Init+0x330>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d101      	bne.n	8000f4e <HAL_GPIO_Init+0x20a>
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	e00e      	b.n	8000f6c <HAL_GPIO_Init+0x228>
 8000f4e:	2308      	movs	r3, #8
 8000f50:	e00c      	b.n	8000f6c <HAL_GPIO_Init+0x228>
 8000f52:	2306      	movs	r3, #6
 8000f54:	e00a      	b.n	8000f6c <HAL_GPIO_Init+0x228>
 8000f56:	2305      	movs	r3, #5
 8000f58:	e008      	b.n	8000f6c <HAL_GPIO_Init+0x228>
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	e006      	b.n	8000f6c <HAL_GPIO_Init+0x228>
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e004      	b.n	8000f6c <HAL_GPIO_Init+0x228>
 8000f62:	2302      	movs	r3, #2
 8000f64:	e002      	b.n	8000f6c <HAL_GPIO_Init+0x228>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <HAL_GPIO_Init+0x228>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	f002 0203 	and.w	r2, r2, #3
 8000f72:	0092      	lsls	r2, r2, #2
 8000f74:	4093      	lsls	r3, r2
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f7c:	4935      	ldr	r1, [pc, #212]	@ (8001054 <HAL_GPIO_Init+0x310>)
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	3302      	adds	r3, #2
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001078 <HAL_GPIO_Init+0x334>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fae:	4a32      	ldr	r2, [pc, #200]	@ (8001078 <HAL_GPIO_Init+0x334>)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fb4:	4b30      	ldr	r3, [pc, #192]	@ (8001078 <HAL_GPIO_Init+0x334>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fd8:	4a27      	ldr	r2, [pc, #156]	@ (8001078 <HAL_GPIO_Init+0x334>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fde:	4b26      	ldr	r3, [pc, #152]	@ (8001078 <HAL_GPIO_Init+0x334>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001002:	4a1d      	ldr	r2, [pc, #116]	@ (8001078 <HAL_GPIO_Init+0x334>)
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001008:	4b1b      	ldr	r3, [pc, #108]	@ (8001078 <HAL_GPIO_Init+0x334>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800102c:	4a12      	ldr	r2, [pc, #72]	@ (8001078 <HAL_GPIO_Init+0x334>)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3301      	adds	r3, #1
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	2b0f      	cmp	r3, #15
 800103c:	f67f ae90 	bls.w	8000d60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3724      	adds	r7, #36	@ 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	40013800 	.word	0x40013800
 8001058:	40020000 	.word	0x40020000
 800105c:	40020400 	.word	0x40020400
 8001060:	40020800 	.word	0x40020800
 8001064:	40020c00 	.word	0x40020c00
 8001068:	40021000 	.word	0x40021000
 800106c:	40021400 	.word	0x40021400
 8001070:	40021800 	.word	0x40021800
 8001074:	40021c00 	.word	0x40021c00
 8001078:	40013c00 	.word	0x40013c00

0800107c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	807b      	strh	r3, [r7, #2]
 8001088:	4613      	mov	r3, r2
 800108a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800108c:	787b      	ldrb	r3, [r7, #1]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001092:	887a      	ldrh	r2, [r7, #2]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001098:	e003      	b.n	80010a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	041a      	lsls	r2, r3, #16
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	619a      	str	r2, [r3, #24]
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af02      	add	r7, sp, #8
 80010b4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e059      	b.n	8001174 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d106      	bne.n	80010e0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f006 fe56 	bl	8007d8c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2203      	movs	r2, #3
 80010e4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010ee:	d102      	bne.n	80010f6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 f8dd 	bl	80042ba <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	7c1a      	ldrb	r2, [r3, #16]
 8001108:	f88d 2000 	strb.w	r2, [sp]
 800110c:	3304      	adds	r3, #4
 800110e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001110:	f003 f85e 	bl	80041d0 <USB_CoreInit>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d005      	beq.n	8001126 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2202      	movs	r2, #2
 800111e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e026      	b.n	8001174 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2101      	movs	r1, #1
 800112c:	4618      	mov	r0, r3
 800112e:	f003 f8d5 	bl	80042dc <USB_SetCurrentMode>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2202      	movs	r2, #2
 800113c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e017      	b.n	8001174 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6818      	ldr	r0, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7c1a      	ldrb	r2, [r3, #16]
 800114c:	f88d 2000 	strb.w	r2, [sp]
 8001150:	3304      	adds	r3, #4
 8001152:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001154:	f003 fa78 	bl	8004648 <USB_HostInit>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d005      	beq.n	800116a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2202      	movs	r2, #2
 8001162:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e004      	b.n	8001174 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b08b      	sub	sp, #44	@ 0x2c
 8001180:	af04      	add	r7, sp, #16
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	4608      	mov	r0, r1
 8001186:	4611      	mov	r1, r2
 8001188:	461a      	mov	r2, r3
 800118a:	4603      	mov	r3, r0
 800118c:	70fb      	strb	r3, [r7, #3]
 800118e:	460b      	mov	r3, r1
 8001190:	70bb      	strb	r3, [r7, #2]
 8001192:	4613      	mov	r3, r2
 8001194:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001196:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001198:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d101      	bne.n	80011a8 <HAL_HCD_HC_Init+0x2c>
 80011a4:	2302      	movs	r3, #2
 80011a6:	e09d      	b.n	80012e4 <HAL_HCD_HC_Init+0x168>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80011b0:	78fa      	ldrb	r2, [r7, #3]
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	011b      	lsls	r3, r3, #4
 80011b8:	1a9b      	subs	r3, r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	3319      	adds	r3, #25
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80011c4:	78fa      	ldrb	r2, [r7, #3]
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	4613      	mov	r3, r2
 80011ca:	011b      	lsls	r3, r3, #4
 80011cc:	1a9b      	subs	r3, r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	440b      	add	r3, r1
 80011d2:	3314      	adds	r3, #20
 80011d4:	787a      	ldrb	r2, [r7, #1]
 80011d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80011d8:	78fa      	ldrb	r2, [r7, #3]
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	4613      	mov	r3, r2
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	1a9b      	subs	r3, r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	440b      	add	r3, r1
 80011e6:	3315      	adds	r3, #21
 80011e8:	78fa      	ldrb	r2, [r7, #3]
 80011ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80011ec:	78fa      	ldrb	r2, [r7, #3]
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	4613      	mov	r3, r2
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	1a9b      	subs	r3, r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	440b      	add	r3, r1
 80011fa:	3326      	adds	r3, #38	@ 0x26
 80011fc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001200:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001202:	78fa      	ldrb	r2, [r7, #3]
 8001204:	78bb      	ldrb	r3, [r7, #2]
 8001206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800120a:	b2d8      	uxtb	r0, r3
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	1a9b      	subs	r3, r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	3316      	adds	r3, #22
 800121a:	4602      	mov	r2, r0
 800121c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800121e:	78fb      	ldrb	r3, [r7, #3]
 8001220:	4619      	mov	r1, r3
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 fbc8 	bl	80019b8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001228:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800122c:	2b00      	cmp	r3, #0
 800122e:	da0a      	bge.n	8001246 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001230:	78fa      	ldrb	r2, [r7, #3]
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	4613      	mov	r3, r2
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	3317      	adds	r3, #23
 8001240:	2201      	movs	r2, #1
 8001242:	701a      	strb	r2, [r3, #0]
 8001244:	e009      	b.n	800125a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001246:	78fa      	ldrb	r2, [r7, #3]
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	1a9b      	subs	r3, r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	440b      	add	r3, r1
 8001254:	3317      	adds	r3, #23
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f003 fb56 	bl	8004910 <USB_GetHostSpeed>
 8001264:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001266:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800126a:	2b01      	cmp	r3, #1
 800126c:	d10b      	bne.n	8001286 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800126e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001272:	2b01      	cmp	r3, #1
 8001274:	d107      	bne.n	8001286 <HAL_HCD_HC_Init+0x10a>
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d104      	bne.n	8001286 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	2bbc      	cmp	r3, #188	@ 0xbc
 8001280:	d901      	bls.n	8001286 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001282:	23bc      	movs	r3, #188	@ 0xbc
 8001284:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001286:	78fa      	ldrb	r2, [r7, #3]
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	1a9b      	subs	r3, r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	440b      	add	r3, r1
 8001294:	3318      	adds	r3, #24
 8001296:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800129a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800129c:	78fa      	ldrb	r2, [r7, #3]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	b298      	uxth	r0, r3
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	011b      	lsls	r3, r3, #4
 80012a8:	1a9b      	subs	r3, r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	3328      	adds	r3, #40	@ 0x28
 80012b0:	4602      	mov	r2, r0
 80012b2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6818      	ldr	r0, [r3, #0]
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	787c      	ldrb	r4, [r7, #1]
 80012be:	78ba      	ldrb	r2, [r7, #2]
 80012c0:	78f9      	ldrb	r1, [r7, #3]
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	4623      	mov	r3, r4
 80012d2:	f003 fb45 	bl	8004960 <USB_HC_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}

080012ec <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001302:	2b01      	cmp	r3, #1
 8001304:	d101      	bne.n	800130a <HAL_HCD_HC_Halt+0x1e>
 8001306:	2302      	movs	r3, #2
 8001308:	e00f      	b.n	800132a <HAL_HCD_HC_Halt+0x3e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	78fa      	ldrb	r2, [r7, #3]
 8001318:	4611      	mov	r1, r2
 800131a:	4618      	mov	r0, r3
 800131c:	f003 fed7 	bl	80050ce <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001328:	7bfb      	ldrb	r3, [r7, #15]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	4608      	mov	r0, r1
 800133e:	4611      	mov	r1, r2
 8001340:	461a      	mov	r2, r3
 8001342:	4603      	mov	r3, r0
 8001344:	70fb      	strb	r3, [r7, #3]
 8001346:	460b      	mov	r3, r1
 8001348:	70bb      	strb	r3, [r7, #2]
 800134a:	4613      	mov	r3, r2
 800134c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800134e:	78fa      	ldrb	r2, [r7, #3]
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	011b      	lsls	r3, r3, #4
 8001356:	1a9b      	subs	r3, r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	440b      	add	r3, r1
 800135c:	3317      	adds	r3, #23
 800135e:	78ba      	ldrb	r2, [r7, #2]
 8001360:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001362:	78fa      	ldrb	r2, [r7, #3]
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	1a9b      	subs	r3, r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	3326      	adds	r3, #38	@ 0x26
 8001372:	787a      	ldrb	r2, [r7, #1]
 8001374:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001376:	7c3b      	ldrb	r3, [r7, #16]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d114      	bne.n	80013a6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800137c:	78fa      	ldrb	r2, [r7, #3]
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	4613      	mov	r3, r2
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	1a9b      	subs	r3, r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	332a      	adds	r3, #42	@ 0x2a
 800138c:	2203      	movs	r2, #3
 800138e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001390:	78fa      	ldrb	r2, [r7, #3]
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	1a9b      	subs	r3, r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	3319      	adds	r3, #25
 80013a0:	7f3a      	ldrb	r2, [r7, #28]
 80013a2:	701a      	strb	r2, [r3, #0]
 80013a4:	e009      	b.n	80013ba <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013a6:	78fa      	ldrb	r2, [r7, #3]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	1a9b      	subs	r3, r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	332a      	adds	r3, #42	@ 0x2a
 80013b6:	2202      	movs	r2, #2
 80013b8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80013ba:	787b      	ldrb	r3, [r7, #1]
 80013bc:	2b03      	cmp	r3, #3
 80013be:	f200 8102 	bhi.w	80015c6 <HAL_HCD_HC_SubmitRequest+0x292>
 80013c2:	a201      	add	r2, pc, #4	@ (adr r2, 80013c8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80013c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c8:	080013d9 	.word	0x080013d9
 80013cc:	080015b1 	.word	0x080015b1
 80013d0:	0800149d 	.word	0x0800149d
 80013d4:	08001527 	.word	0x08001527
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80013d8:	7c3b      	ldrb	r3, [r7, #16]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	f040 80f5 	bne.w	80015ca <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80013e0:	78bb      	ldrb	r3, [r7, #2]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d12d      	bne.n	8001442 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80013e6:	8b3b      	ldrh	r3, [r7, #24]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d109      	bne.n	8001400 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80013ec:	78fa      	ldrb	r2, [r7, #3]
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	1a9b      	subs	r3, r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	333d      	adds	r3, #61	@ 0x3d
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001400:	78fa      	ldrb	r2, [r7, #3]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	1a9b      	subs	r3, r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	333d      	adds	r3, #61	@ 0x3d
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10a      	bne.n	800142c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001416:	78fa      	ldrb	r2, [r7, #3]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	011b      	lsls	r3, r3, #4
 800141e:	1a9b      	subs	r3, r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	332a      	adds	r3, #42	@ 0x2a
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800142a:	e0ce      	b.n	80015ca <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800142c:	78fa      	ldrb	r2, [r7, #3]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	1a9b      	subs	r3, r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	332a      	adds	r3, #42	@ 0x2a
 800143c:	2202      	movs	r2, #2
 800143e:	701a      	strb	r2, [r3, #0]
      break;
 8001440:	e0c3      	b.n	80015ca <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001442:	78fa      	ldrb	r2, [r7, #3]
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	1a9b      	subs	r3, r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	331a      	adds	r3, #26
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b01      	cmp	r3, #1
 8001456:	f040 80b8 	bne.w	80015ca <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800145a:	78fa      	ldrb	r2, [r7, #3]
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	1a9b      	subs	r3, r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	333c      	adds	r3, #60	@ 0x3c
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10a      	bne.n	8001486 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001470:	78fa      	ldrb	r2, [r7, #3]
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	1a9b      	subs	r3, r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	332a      	adds	r3, #42	@ 0x2a
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
      break;
 8001484:	e0a1      	b.n	80015ca <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001486:	78fa      	ldrb	r2, [r7, #3]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	1a9b      	subs	r3, r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	332a      	adds	r3, #42	@ 0x2a
 8001496:	2202      	movs	r2, #2
 8001498:	701a      	strb	r2, [r3, #0]
      break;
 800149a:	e096      	b.n	80015ca <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800149c:	78bb      	ldrb	r3, [r7, #2]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d120      	bne.n	80014e4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80014a2:	78fa      	ldrb	r2, [r7, #3]
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	1a9b      	subs	r3, r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	333d      	adds	r3, #61	@ 0x3d
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10a      	bne.n	80014ce <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014b8:	78fa      	ldrb	r2, [r7, #3]
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	011b      	lsls	r3, r3, #4
 80014c0:	1a9b      	subs	r3, r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	332a      	adds	r3, #42	@ 0x2a
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80014cc:	e07e      	b.n	80015cc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014ce:	78fa      	ldrb	r2, [r7, #3]
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	1a9b      	subs	r3, r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	332a      	adds	r3, #42	@ 0x2a
 80014de:	2202      	movs	r2, #2
 80014e0:	701a      	strb	r2, [r3, #0]
      break;
 80014e2:	e073      	b.n	80015cc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80014e4:	78fa      	ldrb	r2, [r7, #3]
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	4613      	mov	r3, r2
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	1a9b      	subs	r3, r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	440b      	add	r3, r1
 80014f2:	333c      	adds	r3, #60	@ 0x3c
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10a      	bne.n	8001510 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014fa:	78fa      	ldrb	r2, [r7, #3]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	1a9b      	subs	r3, r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	440b      	add	r3, r1
 8001508:	332a      	adds	r3, #42	@ 0x2a
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
      break;
 800150e:	e05d      	b.n	80015cc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001510:	78fa      	ldrb	r2, [r7, #3]
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	1a9b      	subs	r3, r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	332a      	adds	r3, #42	@ 0x2a
 8001520:	2202      	movs	r2, #2
 8001522:	701a      	strb	r2, [r3, #0]
      break;
 8001524:	e052      	b.n	80015cc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001526:	78bb      	ldrb	r3, [r7, #2]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d120      	bne.n	800156e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800152c:	78fa      	ldrb	r2, [r7, #3]
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	011b      	lsls	r3, r3, #4
 8001534:	1a9b      	subs	r3, r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	333d      	adds	r3, #61	@ 0x3d
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10a      	bne.n	8001558 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001542:	78fa      	ldrb	r2, [r7, #3]
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	011b      	lsls	r3, r3, #4
 800154a:	1a9b      	subs	r3, r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	332a      	adds	r3, #42	@ 0x2a
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001556:	e039      	b.n	80015cc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001558:	78fa      	ldrb	r2, [r7, #3]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	011b      	lsls	r3, r3, #4
 8001560:	1a9b      	subs	r3, r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	332a      	adds	r3, #42	@ 0x2a
 8001568:	2202      	movs	r2, #2
 800156a:	701a      	strb	r2, [r3, #0]
      break;
 800156c:	e02e      	b.n	80015cc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800156e:	78fa      	ldrb	r2, [r7, #3]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	1a9b      	subs	r3, r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	333c      	adds	r3, #60	@ 0x3c
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10a      	bne.n	800159a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001584:	78fa      	ldrb	r2, [r7, #3]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	1a9b      	subs	r3, r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	332a      	adds	r3, #42	@ 0x2a
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
      break;
 8001598:	e018      	b.n	80015cc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800159a:	78fa      	ldrb	r2, [r7, #3]
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	011b      	lsls	r3, r3, #4
 80015a2:	1a9b      	subs	r3, r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	332a      	adds	r3, #42	@ 0x2a
 80015aa:	2202      	movs	r2, #2
 80015ac:	701a      	strb	r2, [r3, #0]
      break;
 80015ae:	e00d      	b.n	80015cc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015b0:	78fa      	ldrb	r2, [r7, #3]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	1a9b      	subs	r3, r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	332a      	adds	r3, #42	@ 0x2a
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
      break;
 80015c4:	e002      	b.n	80015cc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80015c6:	bf00      	nop
 80015c8:	e000      	b.n	80015cc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80015ca:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80015cc:	78fa      	ldrb	r2, [r7, #3]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	1a9b      	subs	r3, r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	332c      	adds	r3, #44	@ 0x2c
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80015e0:	78fa      	ldrb	r2, [r7, #3]
 80015e2:	8b39      	ldrh	r1, [r7, #24]
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	1a9b      	subs	r3, r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4403      	add	r3, r0
 80015f0:	3334      	adds	r3, #52	@ 0x34
 80015f2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80015f4:	78fa      	ldrb	r2, [r7, #3]
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	011b      	lsls	r3, r3, #4
 80015fc:	1a9b      	subs	r3, r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	334c      	adds	r3, #76	@ 0x4c
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001608:	78fa      	ldrb	r2, [r7, #3]
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	1a9b      	subs	r3, r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	3338      	adds	r3, #56	@ 0x38
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800161c:	78fa      	ldrb	r2, [r7, #3]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	1a9b      	subs	r3, r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	3315      	adds	r3, #21
 800162c:	78fa      	ldrb	r2, [r7, #3]
 800162e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001630:	78fa      	ldrb	r2, [r7, #3]
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	1a9b      	subs	r3, r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	334d      	adds	r3, #77	@ 0x4d
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6818      	ldr	r0, [r3, #0]
 8001648:	78fa      	ldrb	r2, [r7, #3]
 800164a:	4613      	mov	r3, r2
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	1a9b      	subs	r3, r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	3310      	adds	r3, #16
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	4413      	add	r3, r2
 8001658:	1d19      	adds	r1, r3, #4
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	799b      	ldrb	r3, [r3, #6]
 800165e:	461a      	mov	r2, r3
 8001660:	f003 faaa 	bl	8004bb8 <USB_HC_StartXfer>
 8001664:	4603      	mov	r3, r0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop

08001670 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f002 ff9e 	bl	80045c8 <USB_GetMode>
 800168c:	4603      	mov	r3, r0
 800168e:	2b01      	cmp	r3, #1
 8001690:	f040 80fb 	bne.w	800188a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f002 ff61 	bl	8004560 <USB_ReadInterrupts>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80f1 	beq.w	8001888 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f002 ff58 	bl	8004560 <USB_ReadInterrupts>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80016ba:	d104      	bne.n	80016c6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80016c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f002 ff48 	bl	8004560 <USB_ReadInterrupts>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80016da:	d104      	bne.n	80016e6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80016e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f002 ff38 	bl	8004560 <USB_ReadInterrupts>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80016fa:	d104      	bne.n	8001706 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001704:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f002 ff28 	bl	8004560 <USB_ReadInterrupts>
 8001710:	4603      	mov	r3, r0
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b02      	cmp	r3, #2
 8001718:	d103      	bne.n	8001722 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2202      	movs	r2, #2
 8001720:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f002 ff1a 	bl	8004560 <USB_ReadInterrupts>
 800172c:	4603      	mov	r3, r0
 800172e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001732:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001736:	d120      	bne.n	800177a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001740:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d113      	bne.n	800177a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001752:	2110      	movs	r1, #16
 8001754:	6938      	ldr	r0, [r7, #16]
 8001756:	f002 fe0d 	bl	8004374 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800175a:	6938      	ldr	r0, [r7, #16]
 800175c:	f002 fe3c 	bl	80043d8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	7a5b      	ldrb	r3, [r3, #9]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d105      	bne.n	8001774 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2101      	movs	r1, #1
 800176e:	4618      	mov	r0, r3
 8001770:	f003 f82e 	bl	80047d0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f006 fb87 	bl	8007e88 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f002 feee 	bl	8004560 <USB_ReadInterrupts>
 8001784:	4603      	mov	r3, r0
 8001786:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800178a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800178e:	d102      	bne.n	8001796 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f001 fd4d 	bl	8003230 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f002 fee0 	bl	8004560 <USB_ReadInterrupts>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	d106      	bne.n	80017b8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f006 fb50 	bl	8007e50 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2208      	movs	r2, #8
 80017b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f002 fecf 	bl	8004560 <USB_ReadInterrupts>
 80017c2:	4603      	mov	r3, r0
 80017c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80017cc:	d139      	bne.n	8001842 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 fc6a 	bl	80050ac <USB_HC_ReadInterrupt>
 80017d8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	e025      	b.n	800182c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	fa22 f303 	lsr.w	r3, r2, r3
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d018      	beq.n	8001826 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	015a      	lsls	r2, r3, #5
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4413      	add	r3, r2
 80017fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001806:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800180a:	d106      	bne.n	800181a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	4619      	mov	r1, r3
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f905 	bl	8001a22 <HCD_HC_IN_IRQHandler>
 8001818:	e005      	b.n	8001826 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	4619      	mov	r1, r3
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 ff67 	bl	80026f4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	3301      	adds	r3, #1
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	795b      	ldrb	r3, [r3, #5]
 8001830:	461a      	mov	r2, r3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	4293      	cmp	r3, r2
 8001836:	d3d3      	bcc.n	80017e0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001840:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f002 fe8a 	bl	8004560 <USB_ReadInterrupts>
 800184c:	4603      	mov	r3, r0
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	2b10      	cmp	r3, #16
 8001854:	d101      	bne.n	800185a <HAL_HCD_IRQHandler+0x1ea>
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <HAL_HCD_IRQHandler+0x1ec>
 800185a:	2300      	movs	r3, #0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d014      	beq.n	800188a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	699a      	ldr	r2, [r3, #24]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 0210 	bic.w	r2, r2, #16
 800186e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f001 fbfe 	bl	8003072 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	699a      	ldr	r2, [r3, #24]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f042 0210 	orr.w	r2, r2, #16
 8001884:	619a      	str	r2, [r3, #24]
 8001886:	e000      	b.n	800188a <HAL_HCD_IRQHandler+0x21a>
      return;
 8001888:	bf00      	nop
    }
  }
}
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d101      	bne.n	80018a6 <HAL_HCD_Start+0x16>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e013      	b.n	80018ce <HAL_HCD_Start+0x3e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2101      	movs	r1, #1
 80018b4:	4618      	mov	r0, r3
 80018b6:	f002 fff2 	bl	800489e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 fcea 	bl	8004298 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d101      	bne.n	80018ec <HAL_HCD_Stop+0x16>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e00d      	b.n	8001908 <HAL_HCD_Stop+0x32>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 fd45 	bl	8005388 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f002 ff94 	bl	800484a <USB_ResetPort>
 8001922:	4603      	mov	r3, r0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001938:	78fa      	ldrb	r2, [r7, #3]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	1a9b      	subs	r3, r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	334c      	adds	r3, #76	@ 0x4c
 8001948:	781b      	ldrb	r3, [r3, #0]
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	460b      	mov	r3, r1
 8001960:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001962:	78fa      	ldrb	r2, [r7, #3]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	011b      	lsls	r3, r3, #4
 800196a:	1a9b      	subs	r3, r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	3338      	adds	r3, #56	@ 0x38
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f002 ffd6 	bl	800493e <USB_GetCurrentFrame>
 8001992:	4603      	mov	r3, r0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 ffb1 	bl	8004910 <USB_GetHostSpeed>
 80019ae:	4603      	mov	r3, r0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	331a      	adds	r3, #26
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	331b      	adds	r3, #27
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80019ec:	78fa      	ldrb	r2, [r7, #3]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	3325      	adds	r3, #37	@ 0x25
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001a00:	78fa      	ldrb	r2, [r7, #3]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3324      	adds	r3, #36	@ 0x24
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f002 fda0 	bl	8004586 <USB_ReadChInterrupts>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d11a      	bne.n	8001a86 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	015a      	lsls	r2, r3, #5
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4413      	add	r3, r2
 8001a58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	2304      	movs	r3, #4
 8001a60:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001a62:	78fa      	ldrb	r2, [r7, #3]
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	1a9b      	subs	r3, r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	440b      	add	r3, r1
 8001a70:	334d      	adds	r3, #77	@ 0x4d
 8001a72:	2207      	movs	r2, #7
 8001a74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	78fa      	ldrb	r2, [r7, #3]
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 fb25 	bl	80050ce <USB_HC_Halt>
 8001a84:	e09e      	b.n	8001bc4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	78fa      	ldrb	r2, [r7, #3]
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f002 fd79 	bl	8004586 <USB_ReadChInterrupts>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a9e:	d11b      	bne.n	8001ad8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	015a      	lsls	r2, r3, #5
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001aac:	461a      	mov	r2, r3
 8001aae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ab2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001ab4:	78fa      	ldrb	r2, [r7, #3]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	334d      	adds	r3, #77	@ 0x4d
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	78fa      	ldrb	r2, [r7, #3]
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f003 fafc 	bl	80050ce <USB_HC_Halt>
 8001ad6:	e075      	b.n	8001bc4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	78fa      	ldrb	r2, [r7, #3]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f002 fd50 	bl	8004586 <USB_ReadChInterrupts>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d11a      	bne.n	8001b26 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	015a      	lsls	r2, r3, #5
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4413      	add	r3, r2
 8001af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001afc:	461a      	mov	r2, r3
 8001afe:	2308      	movs	r3, #8
 8001b00:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001b02:	78fa      	ldrb	r2, [r7, #3]
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	1a9b      	subs	r3, r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	334d      	adds	r3, #77	@ 0x4d
 8001b12:	2206      	movs	r2, #6
 8001b14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	78fa      	ldrb	r2, [r7, #3]
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 fad5 	bl	80050ce <USB_HC_Halt>
 8001b24:	e04e      	b.n	8001bc4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	78fa      	ldrb	r2, [r7, #3]
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f002 fd29 	bl	8004586 <USB_ReadChInterrupts>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b3e:	d11b      	bne.n	8001b78 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001b40:	78fb      	ldrb	r3, [r7, #3]
 8001b42:	015a      	lsls	r2, r3, #5
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4413      	add	r3, r2
 8001b48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b52:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001b54:	78fa      	ldrb	r2, [r7, #3]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	1a9b      	subs	r3, r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	334d      	adds	r3, #77	@ 0x4d
 8001b64:	2209      	movs	r2, #9
 8001b66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	78fa      	ldrb	r2, [r7, #3]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f003 faac 	bl	80050ce <USB_HC_Halt>
 8001b76:	e025      	b.n	8001bc4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	78fa      	ldrb	r2, [r7, #3]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f002 fd00 	bl	8004586 <USB_ReadChInterrupts>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b8c:	2b80      	cmp	r3, #128	@ 0x80
 8001b8e:	d119      	bne.n	8001bc4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2380      	movs	r3, #128	@ 0x80
 8001ba0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ba2:	78fa      	ldrb	r2, [r7, #3]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	1a9b      	subs	r3, r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	334d      	adds	r3, #77	@ 0x4d
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	78fa      	ldrb	r2, [r7, #3]
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f003 fa85 	bl	80050ce <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f002 fcda 	bl	8004586 <USB_ReadChInterrupts>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bdc:	d112      	bne.n	8001c04 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	78fa      	ldrb	r2, [r7, #3]
 8001be4:	4611      	mov	r1, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f003 fa71 	bl	80050ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001bec:	78fb      	ldrb	r3, [r7, #3]
 8001bee:	015a      	lsls	r2, r3, #5
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bfe:	6093      	str	r3, [r2, #8]
 8001c00:	f000 bd75 	b.w	80026ee <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	78fa      	ldrb	r2, [r7, #3]
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f002 fcba 	bl	8004586 <USB_ReadChInterrupts>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	f040 8128 	bne.w	8001e6e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	015a      	lsls	r2, r3, #5
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2320      	movs	r3, #32
 8001c2e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001c30:	78fa      	ldrb	r2, [r7, #3]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	331b      	adds	r3, #27
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d119      	bne.n	8001c7a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001c46:	78fa      	ldrb	r2, [r7, #3]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	1a9b      	subs	r3, r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	331b      	adds	r3, #27
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	015a      	lsls	r2, r3, #5
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	78fa      	ldrb	r2, [r7, #3]
 8001c6a:	0151      	lsls	r1, r2, #5
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	440a      	add	r2, r1
 8001c70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001c74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c78:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	799b      	ldrb	r3, [r3, #6]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d01b      	beq.n	8001cba <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001c82:	78fa      	ldrb	r2, [r7, #3]
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	1a9b      	subs	r3, r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	3330      	adds	r3, #48	@ 0x30
 8001c92:	6819      	ldr	r1, [r3, #0]
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	015a      	lsls	r2, r3, #5
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca6:	78fa      	ldrb	r2, [r7, #3]
 8001ca8:	1ac9      	subs	r1, r1, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	1a9b      	subs	r3, r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4403      	add	r3, r0
 8001cb6:	3338      	adds	r3, #56	@ 0x38
 8001cb8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001cba:	78fa      	ldrb	r2, [r7, #3]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	1a9b      	subs	r3, r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	334d      	adds	r3, #77	@ 0x4d
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001cce:	78fa      	ldrb	r2, [r7, #3]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	1a9b      	subs	r3, r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	3344      	adds	r3, #68	@ 0x44
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001cf4:	78fa      	ldrb	r2, [r7, #3]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	3326      	adds	r3, #38	@ 0x26
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00a      	beq.n	8001d20 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001d0a:	78fa      	ldrb	r2, [r7, #3]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	1a9b      	subs	r3, r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	3326      	adds	r3, #38	@ 0x26
 8001d1a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d110      	bne.n	8001d42 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f003 f9d0 	bl	80050ce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	015a      	lsls	r2, r3, #5
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4413      	add	r3, r2
 8001d36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2310      	movs	r3, #16
 8001d3e:	6093      	str	r3, [r2, #8]
 8001d40:	e03d      	b.n	8001dbe <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001d42:	78fa      	ldrb	r2, [r7, #3]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	1a9b      	subs	r3, r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	440b      	add	r3, r1
 8001d50:	3326      	adds	r3, #38	@ 0x26
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d00a      	beq.n	8001d6e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001d58:	78fa      	ldrb	r2, [r7, #3]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	1a9b      	subs	r3, r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	3326      	adds	r3, #38	@ 0x26
 8001d68:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d127      	bne.n	8001dbe <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	015a      	lsls	r2, r3, #5
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	78fa      	ldrb	r2, [r7, #3]
 8001d7e:	0151      	lsls	r1, r2, #5
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	440a      	add	r2, r1
 8001d84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001d88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001d8c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001d8e:	78fa      	ldrb	r2, [r7, #3]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	011b      	lsls	r3, r3, #4
 8001d96:	1a9b      	subs	r3, r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	334c      	adds	r3, #76	@ 0x4c
 8001d9e:	2201      	movs	r2, #1
 8001da0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001da2:	78fa      	ldrb	r2, [r7, #3]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	334c      	adds	r3, #76	@ 0x4c
 8001db2:	781a      	ldrb	r2, [r3, #0]
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	4619      	mov	r1, r3
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f006 f873 	bl	8007ea4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	799b      	ldrb	r3, [r3, #6]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d13b      	bne.n	8001e3e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001dc6:	78fa      	ldrb	r2, [r7, #3]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	3338      	adds	r3, #56	@ 0x38
 8001dd6:	6819      	ldr	r1, [r3, #0]
 8001dd8:	78fa      	ldrb	r2, [r7, #3]
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4403      	add	r3, r0
 8001de6:	3328      	adds	r3, #40	@ 0x28
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	440b      	add	r3, r1
 8001dec:	1e59      	subs	r1, r3, #1
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4403      	add	r3, r0
 8001dfc:	3328      	adds	r3, #40	@ 0x28
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 8470 	beq.w	80026ee <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001e0e:	78fa      	ldrb	r2, [r7, #3]
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	1a9b      	subs	r3, r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	333c      	adds	r3, #60	@ 0x3c
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	78fa      	ldrb	r2, [r7, #3]
 8001e22:	f083 0301 	eor.w	r3, r3, #1
 8001e26:	b2d8      	uxtb	r0, r3
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	1a9b      	subs	r3, r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	440b      	add	r3, r1
 8001e34:	333c      	adds	r3, #60	@ 0x3c
 8001e36:	4602      	mov	r2, r0
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	f000 bc58 	b.w	80026ee <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001e3e:	78fa      	ldrb	r2, [r7, #3]
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	1a9b      	subs	r3, r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	333c      	adds	r3, #60	@ 0x3c
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	78fa      	ldrb	r2, [r7, #3]
 8001e52:	f083 0301 	eor.w	r3, r3, #1
 8001e56:	b2d8      	uxtb	r0, r3
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	1a9b      	subs	r3, r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	333c      	adds	r3, #60	@ 0x3c
 8001e66:	4602      	mov	r2, r0
 8001e68:	701a      	strb	r2, [r3, #0]
 8001e6a:	f000 bc40 	b.w	80026ee <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f002 fb85 	bl	8004586 <USB_ReadChInterrupts>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f003 0320 	and.w	r3, r3, #32
 8001e82:	2b20      	cmp	r3, #32
 8001e84:	d131      	bne.n	8001eea <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	015a      	lsls	r2, r3, #5
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e92:	461a      	mov	r2, r3
 8001e94:	2320      	movs	r3, #32
 8001e96:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8001e98:	78fa      	ldrb	r2, [r7, #3]
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	331a      	adds	r3, #26
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	f040 841f 	bne.w	80026ee <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001eb0:	78fa      	ldrb	r2, [r7, #3]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	1a9b      	subs	r3, r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	331b      	adds	r3, #27
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001ec4:	78fa      	ldrb	r2, [r7, #3]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	334d      	adds	r3, #77	@ 0x4d
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f003 f8f4 	bl	80050ce <USB_HC_Halt>
 8001ee6:	f000 bc02 	b.w	80026ee <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	78fa      	ldrb	r2, [r7, #3]
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f002 fb47 	bl	8004586 <USB_ReadChInterrupts>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	f040 8305 	bne.w	800250e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	015a      	lsls	r2, r3, #5
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f10:	461a      	mov	r2, r3
 8001f12:	2302      	movs	r3, #2
 8001f14:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001f16:	78fa      	ldrb	r2, [r7, #3]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	334d      	adds	r3, #77	@ 0x4d
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d114      	bne.n	8001f56 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	334d      	adds	r3, #77	@ 0x4d
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001f40:	78fa      	ldrb	r2, [r7, #3]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	334c      	adds	r3, #76	@ 0x4c
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
 8001f54:	e2cc      	b.n	80024f0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001f56:	78fa      	ldrb	r2, [r7, #3]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	1a9b      	subs	r3, r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	334d      	adds	r3, #77	@ 0x4d
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b06      	cmp	r3, #6
 8001f6a:	d114      	bne.n	8001f96 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	334d      	adds	r3, #77	@ 0x4d
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	334c      	adds	r3, #76	@ 0x4c
 8001f90:	2205      	movs	r2, #5
 8001f92:	701a      	strb	r2, [r3, #0]
 8001f94:	e2ac      	b.n	80024f0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001f96:	78fa      	ldrb	r2, [r7, #3]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	334d      	adds	r3, #77	@ 0x4d
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b07      	cmp	r3, #7
 8001faa:	d00b      	beq.n	8001fc4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001fac:	78fa      	ldrb	r2, [r7, #3]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	334d      	adds	r3, #77	@ 0x4d
 8001fbc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001fbe:	2b09      	cmp	r3, #9
 8001fc0:	f040 80a6 	bne.w	8002110 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	334d      	adds	r3, #77	@ 0x4d
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001fd8:	78fa      	ldrb	r2, [r7, #3]
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	1a9b      	subs	r3, r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3344      	adds	r3, #68	@ 0x44
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	1c59      	adds	r1, r3, #1
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4403      	add	r3, r0
 8001ff8:	3344      	adds	r3, #68	@ 0x44
 8001ffa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	3344      	adds	r3, #68	@ 0x44
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d943      	bls.n	800209a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002012:	78fa      	ldrb	r2, [r7, #3]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	1a9b      	subs	r3, r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	3344      	adds	r3, #68	@ 0x44
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002026:	78fa      	ldrb	r2, [r7, #3]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	331a      	adds	r3, #26
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d123      	bne.n	8002084 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800203c:	78fa      	ldrb	r2, [r7, #3]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	331b      	adds	r3, #27
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002050:	78fa      	ldrb	r2, [r7, #3]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	1a9b      	subs	r3, r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	331c      	adds	r3, #28
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4413      	add	r3, r2
 800206c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	78fa      	ldrb	r2, [r7, #3]
 8002074:	0151      	lsls	r1, r2, #5
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	440a      	add	r2, r1
 800207a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800207e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002082:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002084:	78fa      	ldrb	r2, [r7, #3]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	1a9b      	subs	r3, r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	334c      	adds	r3, #76	@ 0x4c
 8002094:	2204      	movs	r2, #4
 8002096:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002098:	e229      	b.n	80024ee <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800209a:	78fa      	ldrb	r2, [r7, #3]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	334c      	adds	r3, #76	@ 0x4c
 80020aa:	2202      	movs	r2, #2
 80020ac:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020ae:	78fa      	ldrb	r2, [r7, #3]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	011b      	lsls	r3, r3, #4
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	3326      	adds	r3, #38	@ 0x26
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00b      	beq.n	80020dc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	3326      	adds	r3, #38	@ 0x26
 80020d4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	f040 8209 	bne.w	80024ee <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80020f2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80020fa:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4413      	add	r3, r2
 8002104:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002108:	461a      	mov	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800210e:	e1ee      	b.n	80024ee <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002110:	78fa      	ldrb	r2, [r7, #3]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	1a9b      	subs	r3, r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	334d      	adds	r3, #77	@ 0x4d
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b05      	cmp	r3, #5
 8002124:	f040 80c8 	bne.w	80022b8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002128:	78fa      	ldrb	r2, [r7, #3]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	1a9b      	subs	r3, r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	334d      	adds	r3, #77	@ 0x4d
 8002138:	2202      	movs	r2, #2
 800213a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	331b      	adds	r3, #27
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b01      	cmp	r3, #1
 8002150:	f040 81ce 	bne.w	80024f0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	1a9b      	subs	r3, r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3326      	adds	r3, #38	@ 0x26
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d16b      	bne.n	8002242 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	3348      	adds	r3, #72	@ 0x48
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	1c59      	adds	r1, r3, #1
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4403      	add	r3, r0
 800218a:	3348      	adds	r3, #72	@ 0x48
 800218c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	1a9b      	subs	r3, r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	3348      	adds	r3, #72	@ 0x48
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d943      	bls.n	800222c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80021a4:	78fa      	ldrb	r2, [r7, #3]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	1a9b      	subs	r3, r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	3348      	adds	r3, #72	@ 0x48
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80021b8:	78fa      	ldrb	r2, [r7, #3]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	331b      	adds	r3, #27
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	3344      	adds	r3, #68	@ 0x44
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d809      	bhi.n	80021f6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	331c      	adds	r3, #28
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	0151      	lsls	r1, r2, #5
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	440a      	add	r2, r1
 800220c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002214:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	334c      	adds	r3, #76	@ 0x4c
 8002226:	2204      	movs	r2, #4
 8002228:	701a      	strb	r2, [r3, #0]
 800222a:	e014      	b.n	8002256 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	334c      	adds	r3, #76	@ 0x4c
 800223c:	2202      	movs	r2, #2
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	e009      	b.n	8002256 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	334c      	adds	r3, #76	@ 0x4c
 8002252:	2202      	movs	r2, #2
 8002254:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	3326      	adds	r3, #38	@ 0x26
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00b      	beq.n	8002284 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	3326      	adds	r3, #38	@ 0x26
 800227c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800227e:	2b02      	cmp	r3, #2
 8002280:	f040 8136 	bne.w	80024f0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4413      	add	r3, r2
 800228c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800229a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80022a2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022b0:	461a      	mov	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e11b      	b.n	80024f0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80022b8:	78fa      	ldrb	r2, [r7, #3]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	1a9b      	subs	r3, r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	334d      	adds	r3, #77	@ 0x4d
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	f040 8081 	bne.w	80023d2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	334d      	adds	r3, #77	@ 0x4d
 80022e0:	2202      	movs	r2, #2
 80022e2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	331b      	adds	r3, #27
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	f040 80fa 	bne.w	80024f0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	334c      	adds	r3, #76	@ 0x4c
 800230c:	2202      	movs	r2, #2
 800230e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4413      	add	r3, r2
 8002318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	0151      	lsls	r1, r2, #5
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	440a      	add	r2, r1
 8002326:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800232a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800232e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4413      	add	r3, r2
 8002338:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	78fa      	ldrb	r2, [r7, #3]
 8002340:	0151      	lsls	r1, r2, #5
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	440a      	add	r2, r1
 8002346:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800234a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800234e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	0151      	lsls	r1, r2, #5
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	440a      	add	r2, r1
 8002366:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800236a:	f023 0320 	bic.w	r3, r3, #32
 800236e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002370:	78fa      	ldrb	r2, [r7, #3]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	3326      	adds	r3, #38	@ 0x26
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00b      	beq.n	800239e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	1a9b      	subs	r3, r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	3326      	adds	r3, #38	@ 0x26
 8002396:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002398:	2b02      	cmp	r3, #2
 800239a:	f040 80a9 	bne.w	80024f0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80023b4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80023bc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	e08e      	b.n	80024f0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	1a9b      	subs	r3, r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	334d      	adds	r3, #77	@ 0x4d
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d143      	bne.n	8002470 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	334d      	adds	r3, #77	@ 0x4d
 80023f8:	2202      	movs	r2, #2
 80023fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	334c      	adds	r3, #76	@ 0x4c
 800240c:	2202      	movs	r2, #2
 800240e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	3326      	adds	r3, #38	@ 0x26
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002426:	78fa      	ldrb	r2, [r7, #3]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	3326      	adds	r3, #38	@ 0x26
 8002436:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002438:	2b02      	cmp	r3, #2
 800243a:	d159      	bne.n	80024f0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4413      	add	r3, r2
 8002444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002452:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800245a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4413      	add	r3, r2
 8002464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002468:	461a      	mov	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e03f      	b.n	80024f0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	334d      	adds	r3, #77	@ 0x4d
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b08      	cmp	r3, #8
 8002484:	d126      	bne.n	80024d4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002486:	78fa      	ldrb	r2, [r7, #3]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	334d      	adds	r3, #77	@ 0x4d
 8002496:	2202      	movs	r2, #2
 8002498:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	3344      	adds	r3, #68	@ 0x44
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	1c59      	adds	r1, r3, #1
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4403      	add	r3, r0
 80024ba:	3344      	adds	r3, #68	@ 0x44
 80024bc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80024be:	78fa      	ldrb	r2, [r7, #3]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	334c      	adds	r3, #76	@ 0x4c
 80024ce:	2204      	movs	r2, #4
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	e00d      	b.n	80024f0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	334d      	adds	r3, #77	@ 0x4d
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	f000 8100 	beq.w	80026ec <HCD_HC_IN_IRQHandler+0xcca>
 80024ec:	e000      	b.n	80024f0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024ee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	334c      	adds	r3, #76	@ 0x4c
 8002500:	781a      	ldrb	r2, [r3, #0]
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	4619      	mov	r1, r3
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f005 fccc 	bl	8007ea4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800250c:	e0ef      	b.n	80026ee <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	78fa      	ldrb	r2, [r7, #3]
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f002 f835 	bl	8004586 <USB_ReadChInterrupts>
 800251c:	4603      	mov	r3, r0
 800251e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002522:	2b40      	cmp	r3, #64	@ 0x40
 8002524:	d12f      	bne.n	8002586 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4413      	add	r3, r2
 800252e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002532:	461a      	mov	r2, r3
 8002534:	2340      	movs	r3, #64	@ 0x40
 8002536:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	334d      	adds	r3, #77	@ 0x4d
 8002548:	2205      	movs	r2, #5
 800254a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	331a      	adds	r3, #26
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002562:	78fa      	ldrb	r2, [r7, #3]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	3344      	adds	r3, #68	@ 0x44
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	4611      	mov	r1, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f002 fda5 	bl	80050ce <USB_HC_Halt>
 8002584:	e0b3      	b.n	80026ee <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	78fa      	ldrb	r2, [r7, #3]
 800258c:	4611      	mov	r1, r2
 800258e:	4618      	mov	r0, r3
 8002590:	f001 fff9 	bl	8004586 <USB_ReadChInterrupts>
 8002594:	4603      	mov	r3, r0
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	2b10      	cmp	r3, #16
 800259c:	f040 80a7 	bne.w	80026ee <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	3326      	adds	r3, #38	@ 0x26
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d11b      	bne.n	80025ee <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80025b6:	78fa      	ldrb	r2, [r7, #3]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	3344      	adds	r3, #68	@ 0x44
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	334d      	adds	r3, #77	@ 0x4d
 80025da:	2204      	movs	r2, #4
 80025dc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	78fa      	ldrb	r2, [r7, #3]
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f002 fd71 	bl	80050ce <USB_HC_Halt>
 80025ec:	e03f      	b.n	800266e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025ee:	78fa      	ldrb	r2, [r7, #3]
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	1a9b      	subs	r3, r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	3326      	adds	r3, #38	@ 0x26
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00a      	beq.n	800261a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	3326      	adds	r3, #38	@ 0x26
 8002614:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002616:	2b02      	cmp	r3, #2
 8002618:	d129      	bne.n	800266e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	3344      	adds	r3, #68	@ 0x44
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	799b      	ldrb	r3, [r3, #6]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HCD_HC_IN_IRQHandler+0xc2a>
 8002636:	78fa      	ldrb	r2, [r7, #3]
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	331b      	adds	r3, #27
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d110      	bne.n	800266e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	334d      	adds	r3, #77	@ 0x4d
 800265c:	2204      	movs	r2, #4
 800265e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f002 fd30 	bl	80050ce <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800266e:	78fa      	ldrb	r2, [r7, #3]
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	1a9b      	subs	r3, r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	331b      	adds	r3, #27
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d129      	bne.n	80026d8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	331b      	adds	r3, #27
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	78fa      	ldrb	r2, [r7, #3]
 80026a8:	0151      	lsls	r1, r2, #5
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	440a      	add	r2, r1
 80026ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	0151      	lsls	r1, r2, #5
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	440a      	add	r2, r1
 80026ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026d2:	f043 0320 	orr.w	r3, r3, #32
 80026d6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026e4:	461a      	mov	r2, r3
 80026e6:	2310      	movs	r3, #16
 80026e8:	6093      	str	r3, [r2, #8]
 80026ea:	e000      	b.n	80026ee <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80026ec:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	78fa      	ldrb	r2, [r7, #3]
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f001 ff37 	bl	8004586 <USB_ReadChInterrupts>
 8002718:	4603      	mov	r3, r0
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	2b04      	cmp	r3, #4
 8002720:	d11b      	bne.n	800275a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002722:	78fb      	ldrb	r3, [r7, #3]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4413      	add	r3, r2
 800272a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800272e:	461a      	mov	r2, r3
 8002730:	2304      	movs	r3, #4
 8002732:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	334d      	adds	r3, #77	@ 0x4d
 8002744:	2207      	movs	r2, #7
 8002746:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f002 fcbc 	bl	80050ce <USB_HC_Halt>
 8002756:	f000 bc89 	b.w	800306c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f001 ff0f 	bl	8004586 <USB_ReadChInterrupts>
 8002768:	4603      	mov	r3, r0
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	2b20      	cmp	r3, #32
 8002770:	f040 8082 	bne.w	8002878 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002780:	461a      	mov	r2, r3
 8002782:	2320      	movs	r3, #32
 8002784:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002786:	78fa      	ldrb	r2, [r7, #3]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	3319      	adds	r3, #25
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d124      	bne.n	80027e6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	3319      	adds	r3, #25
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	334c      	adds	r3, #76	@ 0x4c
 80027c0:	2202      	movs	r2, #2
 80027c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	334d      	adds	r3, #77	@ 0x4d
 80027d4:	2203      	movs	r2, #3
 80027d6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f002 fc74 	bl	80050ce <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	331a      	adds	r3, #26
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	f040 8437 	bne.w	800306c <HCD_HC_OUT_IRQHandler+0x978>
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	331b      	adds	r3, #27
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	f040 842b 	bne.w	800306c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	3326      	adds	r3, #38	@ 0x26
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d009      	beq.n	8002840 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	331b      	adds	r3, #27
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	334d      	adds	r3, #77	@ 0x4d
 8002850:	2203      	movs	r2, #3
 8002852:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f002 fc36 	bl	80050ce <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	1a9b      	subs	r3, r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	3344      	adds	r3, #68	@ 0x44
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	e3f9      	b.n	800306c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	78fa      	ldrb	r2, [r7, #3]
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f001 fe80 	bl	8004586 <USB_ReadChInterrupts>
 8002886:	4603      	mov	r3, r0
 8002888:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800288c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002890:	d111      	bne.n	80028b6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4413      	add	r3, r2
 800289a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800289e:	461a      	mov	r2, r3
 80028a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028a4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	78fa      	ldrb	r2, [r7, #3]
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f002 fc0d 	bl	80050ce <USB_HC_Halt>
 80028b4:	e3da      	b.n	800306c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	78fa      	ldrb	r2, [r7, #3]
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 fe61 	bl	8004586 <USB_ReadChInterrupts>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d168      	bne.n	80029a0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	3344      	adds	r3, #68	@ 0x44
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 fe4b 	bl	8004586 <USB_ReadChInterrupts>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f6:	2b40      	cmp	r3, #64	@ 0x40
 80028f8:	d112      	bne.n	8002920 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	3319      	adds	r3, #25
 800290a:	2201      	movs	r2, #1
 800290c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800291a:	461a      	mov	r2, r3
 800291c:	2340      	movs	r3, #64	@ 0x40
 800291e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002920:	78fa      	ldrb	r2, [r7, #3]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	331b      	adds	r3, #27
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d019      	beq.n	800296a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002936:	78fa      	ldrb	r2, [r7, #3]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	1a9b      	subs	r3, r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	331b      	adds	r3, #27
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	78fa      	ldrb	r2, [r7, #3]
 800295a:	0151      	lsls	r1, r2, #5
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	440a      	add	r2, r1
 8002960:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002964:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002968:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4413      	add	r3, r2
 8002972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002976:	461a      	mov	r2, r3
 8002978:	2301      	movs	r3, #1
 800297a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	334d      	adds	r3, #77	@ 0x4d
 800298c:	2201      	movs	r2, #1
 800298e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	4611      	mov	r1, r2
 8002998:	4618      	mov	r0, r3
 800299a:	f002 fb98 	bl	80050ce <USB_HC_Halt>
 800299e:	e365      	b.n	800306c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f001 fdec 	bl	8004586 <USB_ReadChInterrupts>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b4:	2b40      	cmp	r3, #64	@ 0x40
 80029b6:	d139      	bne.n	8002a2c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	334d      	adds	r3, #77	@ 0x4d
 80029c8:	2205      	movs	r2, #5
 80029ca:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80029cc:	78fa      	ldrb	r2, [r7, #3]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	331a      	adds	r3, #26
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	3319      	adds	r3, #25
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	3344      	adds	r3, #68	@ 0x44
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	78fa      	ldrb	r2, [r7, #3]
 8002a10:	4611      	mov	r1, r2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f002 fb5b 	bl	80050ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a24:	461a      	mov	r2, r3
 8002a26:	2340      	movs	r3, #64	@ 0x40
 8002a28:	6093      	str	r3, [r2, #8]
 8002a2a:	e31f      	b.n	800306c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f001 fda6 	bl	8004586 <USB_ReadChInterrupts>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f003 0308 	and.w	r3, r3, #8
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d11a      	bne.n	8002a7a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a50:	461a      	mov	r2, r3
 8002a52:	2308      	movs	r3, #8
 8002a54:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	334d      	adds	r3, #77	@ 0x4d
 8002a66:	2206      	movs	r2, #6
 8002a68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	78fa      	ldrb	r2, [r7, #3]
 8002a70:	4611      	mov	r1, r2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f002 fb2b 	bl	80050ce <USB_HC_Halt>
 8002a78:	e2f8      	b.n	800306c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	78fa      	ldrb	r2, [r7, #3]
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f001 fd7f 	bl	8004586 <USB_ReadChInterrupts>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	2b10      	cmp	r3, #16
 8002a90:	d144      	bne.n	8002b1c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	3344      	adds	r3, #68	@ 0x44
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	334d      	adds	r3, #77	@ 0x4d
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	1a9b      	subs	r3, r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	3319      	adds	r3, #25
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d114      	bne.n	8002afa <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002ad0:	78fa      	ldrb	r2, [r7, #3]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	3318      	adds	r3, #24
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d109      	bne.n	8002afa <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002ae6:	78fa      	ldrb	r2, [r7, #3]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	1a9b      	subs	r3, r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	440b      	add	r3, r1
 8002af4:	3319      	adds	r3, #25
 8002af6:	2201      	movs	r2, #1
 8002af8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	78fa      	ldrb	r2, [r7, #3]
 8002b00:	4611      	mov	r1, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f002 fae3 	bl	80050ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b14:	461a      	mov	r2, r3
 8002b16:	2310      	movs	r3, #16
 8002b18:	6093      	str	r3, [r2, #8]
 8002b1a:	e2a7      	b.n	800306c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	78fa      	ldrb	r2, [r7, #3]
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f001 fd2e 	bl	8004586 <USB_ReadChInterrupts>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b30:	2b80      	cmp	r3, #128	@ 0x80
 8002b32:	f040 8083 	bne.w	8002c3c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	799b      	ldrb	r3, [r3, #6]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d111      	bne.n	8002b62 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002b3e:	78fa      	ldrb	r2, [r7, #3]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	334d      	adds	r3, #77	@ 0x4d
 8002b4e:	2207      	movs	r2, #7
 8002b50:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	4611      	mov	r1, r2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f002 fab7 	bl	80050ce <USB_HC_Halt>
 8002b60:	e062      	b.n	8002c28 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002b62:	78fa      	ldrb	r2, [r7, #3]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	1a9b      	subs	r3, r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	3344      	adds	r3, #68	@ 0x44
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	1c59      	adds	r1, r3, #1
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4403      	add	r3, r0
 8002b82:	3344      	adds	r3, #68	@ 0x44
 8002b84:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b86:	78fa      	ldrb	r2, [r7, #3]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	3344      	adds	r3, #68	@ 0x44
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d922      	bls.n	8002be2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002b9c:	78fa      	ldrb	r2, [r7, #3]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	3344      	adds	r3, #68	@ 0x44
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	334c      	adds	r3, #76	@ 0x4c
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	334c      	adds	r3, #76	@ 0x4c
 8002bd4:	781a      	ldrb	r2, [r3, #0]
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f005 f962 	bl	8007ea4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002be0:	e022      	b.n	8002c28 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	334c      	adds	r3, #76	@ 0x4c
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002c0c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c14:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c16:	78fb      	ldrb	r3, [r7, #3]
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c22:	461a      	mov	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c34:	461a      	mov	r2, r3
 8002c36:	2380      	movs	r3, #128	@ 0x80
 8002c38:	6093      	str	r3, [r2, #8]
 8002c3a:	e217      	b.n	800306c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	4611      	mov	r1, r2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f001 fc9e 	bl	8004586 <USB_ReadChInterrupts>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c54:	d11b      	bne.n	8002c8e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	334d      	adds	r3, #77	@ 0x4d
 8002c66:	2209      	movs	r2, #9
 8002c68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	4611      	mov	r1, r2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 fa2b 	bl	80050ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c84:	461a      	mov	r2, r3
 8002c86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c8a:	6093      	str	r3, [r2, #8]
 8002c8c:	e1ee      	b.n	800306c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	78fa      	ldrb	r2, [r7, #3]
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f001 fc75 	bl	8004586 <USB_ReadChInterrupts>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	f040 81df 	bne.w	8003066 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	334d      	adds	r3, #77	@ 0x4d
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	f040 8093 	bne.w	8002df8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	334d      	adds	r3, #77	@ 0x4d
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	334c      	adds	r3, #76	@ 0x4c
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	3326      	adds	r3, #38	@ 0x26
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d00b      	beq.n	8002d28 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3326      	adds	r3, #38	@ 0x26
 8002d20:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	f040 8190 	bne.w	8003048 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	799b      	ldrb	r3, [r3, #6]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d115      	bne.n	8002d5c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	333d      	adds	r3, #61	@ 0x3d
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	f083 0301 	eor.w	r3, r3, #1
 8002d48:	b2d8      	uxtb	r0, r3
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	333d      	adds	r3, #61	@ 0x3d
 8002d58:	4602      	mov	r2, r0
 8002d5a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	799b      	ldrb	r3, [r3, #6]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	f040 8171 	bne.w	8003048 <HCD_HC_OUT_IRQHandler+0x954>
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	3334      	adds	r3, #52	@ 0x34
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 8165 	beq.w	8003048 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3334      	adds	r3, #52	@ 0x34
 8002d8e:	6819      	ldr	r1, [r3, #0]
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4403      	add	r3, r0
 8002d9e:	3328      	adds	r3, #40	@ 0x28
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	440b      	add	r3, r1
 8002da4:	1e59      	subs	r1, r3, #1
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4403      	add	r3, r0
 8002db4:	3328      	adds	r3, #40	@ 0x28
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dbc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 813f 	beq.w	8003048 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002dca:	78fa      	ldrb	r2, [r7, #3]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	333d      	adds	r3, #61	@ 0x3d
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	78fa      	ldrb	r2, [r7, #3]
 8002dde:	f083 0301 	eor.w	r3, r3, #1
 8002de2:	b2d8      	uxtb	r0, r3
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	333d      	adds	r3, #61	@ 0x3d
 8002df2:	4602      	mov	r2, r0
 8002df4:	701a      	strb	r2, [r3, #0]
 8002df6:	e127      	b.n	8003048 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	1a9b      	subs	r3, r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	334d      	adds	r3, #77	@ 0x4d
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d120      	bne.n	8002e50 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	1a9b      	subs	r3, r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	334d      	adds	r3, #77	@ 0x4d
 8002e1e:	2202      	movs	r2, #2
 8002e20:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	331b      	adds	r3, #27
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	f040 8107 	bne.w	8003048 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	334c      	adds	r3, #76	@ 0x4c
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	701a      	strb	r2, [r3, #0]
 8002e4e:	e0fb      	b.n	8003048 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	334d      	adds	r3, #77	@ 0x4d
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d13a      	bne.n	8002edc <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	334d      	adds	r3, #77	@ 0x4d
 8002e76:	2202      	movs	r2, #2
 8002e78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	334c      	adds	r3, #76	@ 0x4c
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	331b      	adds	r3, #27
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	f040 80d1 	bne.w	8003048 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	331b      	adds	r3, #27
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002eba:	78fb      	ldrb	r3, [r7, #3]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	0151      	lsls	r1, r2, #5
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	440a      	add	r2, r1
 8002ed0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ed4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ed8:	6053      	str	r3, [r2, #4]
 8002eda:	e0b5      	b.n	8003048 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	334d      	adds	r3, #77	@ 0x4d
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b05      	cmp	r3, #5
 8002ef0:	d114      	bne.n	8002f1c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	334d      	adds	r3, #77	@ 0x4d
 8002f02:	2202      	movs	r2, #2
 8002f04:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002f06:	78fa      	ldrb	r2, [r7, #3]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	334c      	adds	r3, #76	@ 0x4c
 8002f16:	2202      	movs	r2, #2
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	e095      	b.n	8003048 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	334d      	adds	r3, #77	@ 0x4d
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b06      	cmp	r3, #6
 8002f30:	d114      	bne.n	8002f5c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	334d      	adds	r3, #77	@ 0x4d
 8002f42:	2202      	movs	r2, #2
 8002f44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002f46:	78fa      	ldrb	r2, [r7, #3]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	334c      	adds	r3, #76	@ 0x4c
 8002f56:	2205      	movs	r2, #5
 8002f58:	701a      	strb	r2, [r3, #0]
 8002f5a:	e075      	b.n	8003048 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	334d      	adds	r3, #77	@ 0x4d
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b07      	cmp	r3, #7
 8002f70:	d00a      	beq.n	8002f88 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	334d      	adds	r3, #77	@ 0x4d
 8002f82:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f84:	2b09      	cmp	r3, #9
 8002f86:	d170      	bne.n	800306a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	334d      	adds	r3, #77	@ 0x4d
 8002f98:	2202      	movs	r2, #2
 8002f9a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002f9c:	78fa      	ldrb	r2, [r7, #3]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	3344      	adds	r3, #68	@ 0x44
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	1c59      	adds	r1, r3, #1
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4403      	add	r3, r0
 8002fbc:	3344      	adds	r3, #68	@ 0x44
 8002fbe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fc0:	78fa      	ldrb	r2, [r7, #3]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	1a9b      	subs	r3, r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	3344      	adds	r3, #68	@ 0x44
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d914      	bls.n	8003000 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	3344      	adds	r3, #68	@ 0x44
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	334c      	adds	r3, #76	@ 0x4c
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ffe:	e022      	b.n	8003046 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003000:	78fa      	ldrb	r2, [r7, #3]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	334c      	adds	r3, #76	@ 0x4c
 8003010:	2202      	movs	r2, #2
 8003012:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800302a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003032:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4413      	add	r3, r2
 800303c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003040:	461a      	mov	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003046:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003048:	78fa      	ldrb	r2, [r7, #3]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	334c      	adds	r3, #76	@ 0x4c
 8003058:	781a      	ldrb	r2, [r3, #0]
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	4619      	mov	r1, r3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f004 ff20 	bl	8007ea4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003064:	e002      	b.n	800306c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003066:	bf00      	nop
 8003068:	e000      	b.n	800306c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800306a:	bf00      	nop
  }
}
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b08a      	sub	sp, #40	@ 0x28
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	0c5b      	lsrs	r3, r3, #17
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030a6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d004      	beq.n	80030b8 <HCD_RXQLVL_IRQHandler+0x46>
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b05      	cmp	r3, #5
 80030b2:	f000 80b6 	beq.w	8003222 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80030b6:	e0b7      	b.n	8003228 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80b3 	beq.w	8003226 <HCD_RXQLVL_IRQHandler+0x1b4>
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4613      	mov	r3, r2
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	332c      	adds	r3, #44	@ 0x2c
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 80a7 	beq.w	8003226 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4613      	mov	r3, r2
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	3338      	adds	r3, #56	@ 0x38
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	18d1      	adds	r1, r2, r3
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4613      	mov	r3, r2
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4403      	add	r3, r0
 80030fc:	3334      	adds	r3, #52	@ 0x34
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4299      	cmp	r1, r3
 8003102:	f200 8083 	bhi.w	800320c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	332c      	adds	r3, #44	@ 0x2c
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	b292      	uxth	r2, r2
 8003120:	4619      	mov	r1, r3
 8003122:	f001 f9c5 	bl	80044b0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4613      	mov	r3, r2
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	332c      	adds	r3, #44	@ 0x2c
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	18d1      	adds	r1, r2, r3
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4613      	mov	r3, r2
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4403      	add	r3, r0
 800314a:	332c      	adds	r3, #44	@ 0x2c
 800314c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4613      	mov	r3, r2
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	3338      	adds	r3, #56	@ 0x38
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	18d1      	adds	r1, r2, r3
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4613      	mov	r3, r2
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4403      	add	r3, r0
 8003172:	3338      	adds	r3, #56	@ 0x38
 8003174:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	4413      	add	r3, r2
 800317e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	0cdb      	lsrs	r3, r3, #19
 8003186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800318a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4613      	mov	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	3328      	adds	r3, #40	@ 0x28
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d13f      	bne.n	8003226 <HCD_RXQLVL_IRQHandler+0x1b4>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d03c      	beq.n	8003226 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80031c2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031ca:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031d8:	461a      	mov	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4613      	mov	r3, r2
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	333c      	adds	r3, #60	@ 0x3c
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	f083 0301 	eor.w	r3, r3, #1
 80031f4:	b2d8      	uxtb	r0, r3
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4613      	mov	r3, r2
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	333c      	adds	r3, #60	@ 0x3c
 8003206:	4602      	mov	r2, r0
 8003208:	701a      	strb	r2, [r3, #0]
      break;
 800320a:	e00c      	b.n	8003226 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	334c      	adds	r3, #76	@ 0x4c
 800321c:	2204      	movs	r2, #4
 800321e:	701a      	strb	r2, [r3, #0]
      break;
 8003220:	e001      	b.n	8003226 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003222:	bf00      	nop
 8003224:	e000      	b.n	8003228 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003226:	bf00      	nop
  }
}
 8003228:	bf00      	nop
 800322a:	3728      	adds	r7, #40	@ 0x28
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800325c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b02      	cmp	r3, #2
 8003266:	d10b      	bne.n	8003280 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b01      	cmp	r3, #1
 8003270:	d102      	bne.n	8003278 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f004 fdfa 	bl	8007e6c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f043 0302 	orr.w	r3, r3, #2
 800327e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b08      	cmp	r3, #8
 8003288:	d132      	bne.n	80032f0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f043 0308 	orr.w	r3, r3, #8
 8003290:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b04      	cmp	r3, #4
 800329a:	d126      	bne.n	80032ea <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	7a5b      	ldrb	r3, [r3, #9]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d113      	bne.n	80032cc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80032aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032ae:	d106      	bne.n	80032be <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2102      	movs	r1, #2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 fa8a 	bl	80047d0 <USB_InitFSLSPClkSel>
 80032bc:	e011      	b.n	80032e2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2101      	movs	r1, #1
 80032c4:	4618      	mov	r0, r3
 80032c6:	f001 fa83 	bl	80047d0 <USB_InitFSLSPClkSel>
 80032ca:	e00a      	b.n	80032e2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	79db      	ldrb	r3, [r3, #7]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d106      	bne.n	80032e2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032da:	461a      	mov	r2, r3
 80032dc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80032e0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f004 fdec 	bl	8007ec0 <HAL_HCD_PortEnabled_Callback>
 80032e8:	e002      	b.n	80032f0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f004 fdf6 	bl	8007edc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d103      	bne.n	8003302 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f043 0320 	orr.w	r3, r3, #32
 8003300:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003308:	461a      	mov	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	6013      	str	r3, [r2, #0]
}
 800330e:	bf00      	nop
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e267      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d075      	beq.n	8003422 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003336:	4b88      	ldr	r3, [pc, #544]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
 800333e:	2b04      	cmp	r3, #4
 8003340:	d00c      	beq.n	800335c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003342:	4b85      	ldr	r3, [pc, #532]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800334a:	2b08      	cmp	r3, #8
 800334c:	d112      	bne.n	8003374 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800334e:	4b82      	ldr	r3, [pc, #520]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003356:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800335a:	d10b      	bne.n	8003374 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335c:	4b7e      	ldr	r3, [pc, #504]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d05b      	beq.n	8003420 <HAL_RCC_OscConfig+0x108>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d157      	bne.n	8003420 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e242      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800337c:	d106      	bne.n	800338c <HAL_RCC_OscConfig+0x74>
 800337e:	4b76      	ldr	r3, [pc, #472]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a75      	ldr	r2, [pc, #468]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e01d      	b.n	80033c8 <HAL_RCC_OscConfig+0xb0>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x98>
 8003396:	4b70      	ldr	r3, [pc, #448]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a6f      	ldr	r2, [pc, #444]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 800339c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a6c      	ldr	r2, [pc, #432]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e00b      	b.n	80033c8 <HAL_RCC_OscConfig+0xb0>
 80033b0:	4b69      	ldr	r3, [pc, #420]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a68      	ldr	r2, [pc, #416]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 80033b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	4b66      	ldr	r3, [pc, #408]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a65      	ldr	r2, [pc, #404]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 80033c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d013      	beq.n	80033f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7fd fb76 	bl	8000ac0 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d8:	f7fd fb72 	bl	8000ac0 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	@ 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e207      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0xc0>
 80033f6:	e014      	b.n	8003422 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fd fb62 	bl	8000ac0 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003400:	f7fd fb5e 	bl	8000ac0 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	@ 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e1f3      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003412:	4b51      	ldr	r3, [pc, #324]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0xe8>
 800341e:	e000      	b.n	8003422 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d063      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800342e:	4b4a      	ldr	r3, [pc, #296]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00b      	beq.n	8003452 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800343a:	4b47      	ldr	r3, [pc, #284]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003442:	2b08      	cmp	r3, #8
 8003444:	d11c      	bne.n	8003480 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003446:	4b44      	ldr	r3, [pc, #272]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d116      	bne.n	8003480 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003452:	4b41      	ldr	r3, [pc, #260]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_RCC_OscConfig+0x152>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d001      	beq.n	800346a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e1c7      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346a:	4b3b      	ldr	r3, [pc, #236]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	4937      	ldr	r1, [pc, #220]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 800347a:	4313      	orrs	r3, r2
 800347c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347e:	e03a      	b.n	80034f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d020      	beq.n	80034ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003488:	4b34      	ldr	r3, [pc, #208]	@ (800355c <HAL_RCC_OscConfig+0x244>)
 800348a:	2201      	movs	r2, #1
 800348c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348e:	f7fd fb17 	bl	8000ac0 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003496:	f7fd fb13 	bl	8000ac0 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e1a8      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b4:	4b28      	ldr	r3, [pc, #160]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4925      	ldr	r1, [pc, #148]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	600b      	str	r3, [r1, #0]
 80034c8:	e015      	b.n	80034f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ca:	4b24      	ldr	r3, [pc, #144]	@ (800355c <HAL_RCC_OscConfig+0x244>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fd faf6 	bl	8000ac0 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d8:	f7fd faf2 	bl	8000ac0 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e187      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d036      	beq.n	8003570 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d016      	beq.n	8003538 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800350a:	4b15      	ldr	r3, [pc, #84]	@ (8003560 <HAL_RCC_OscConfig+0x248>)
 800350c:	2201      	movs	r2, #1
 800350e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003510:	f7fd fad6 	bl	8000ac0 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003518:	f7fd fad2 	bl	8000ac0 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e167      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352a:	4b0b      	ldr	r3, [pc, #44]	@ (8003558 <HAL_RCC_OscConfig+0x240>)
 800352c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0x200>
 8003536:	e01b      	b.n	8003570 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003538:	4b09      	ldr	r3, [pc, #36]	@ (8003560 <HAL_RCC_OscConfig+0x248>)
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353e:	f7fd fabf 	bl	8000ac0 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003544:	e00e      	b.n	8003564 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003546:	f7fd fabb 	bl	8000ac0 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d907      	bls.n	8003564 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e150      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
 8003558:	40023800 	.word	0x40023800
 800355c:	42470000 	.word	0x42470000
 8003560:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003564:	4b88      	ldr	r3, [pc, #544]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 8003566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1ea      	bne.n	8003546 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 8097 	beq.w	80036ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800357e:	2300      	movs	r3, #0
 8003580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003582:	4b81      	ldr	r3, [pc, #516]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10f      	bne.n	80035ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	4b7d      	ldr	r3, [pc, #500]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003596:	4a7c      	ldr	r2, [pc, #496]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 8003598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800359c:	6413      	str	r3, [r2, #64]	@ 0x40
 800359e:	4b7a      	ldr	r3, [pc, #488]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035aa:	2301      	movs	r3, #1
 80035ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ae:	4b77      	ldr	r3, [pc, #476]	@ (800378c <HAL_RCC_OscConfig+0x474>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d118      	bne.n	80035ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ba:	4b74      	ldr	r3, [pc, #464]	@ (800378c <HAL_RCC_OscConfig+0x474>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a73      	ldr	r2, [pc, #460]	@ (800378c <HAL_RCC_OscConfig+0x474>)
 80035c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035c6:	f7fd fa7b 	bl	8000ac0 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ce:	f7fd fa77 	bl	8000ac0 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e10c      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e0:	4b6a      	ldr	r3, [pc, #424]	@ (800378c <HAL_RCC_OscConfig+0x474>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d106      	bne.n	8003602 <HAL_RCC_OscConfig+0x2ea>
 80035f4:	4b64      	ldr	r3, [pc, #400]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 80035f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f8:	4a63      	ldr	r2, [pc, #396]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003600:	e01c      	b.n	800363c <HAL_RCC_OscConfig+0x324>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b05      	cmp	r3, #5
 8003608:	d10c      	bne.n	8003624 <HAL_RCC_OscConfig+0x30c>
 800360a:	4b5f      	ldr	r3, [pc, #380]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360e:	4a5e      	ldr	r2, [pc, #376]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 8003610:	f043 0304 	orr.w	r3, r3, #4
 8003614:	6713      	str	r3, [r2, #112]	@ 0x70
 8003616:	4b5c      	ldr	r3, [pc, #368]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800361a:	4a5b      	ldr	r2, [pc, #364]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	6713      	str	r3, [r2, #112]	@ 0x70
 8003622:	e00b      	b.n	800363c <HAL_RCC_OscConfig+0x324>
 8003624:	4b58      	ldr	r3, [pc, #352]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003628:	4a57      	ldr	r2, [pc, #348]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 800362a:	f023 0301 	bic.w	r3, r3, #1
 800362e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003630:	4b55      	ldr	r3, [pc, #340]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003634:	4a54      	ldr	r2, [pc, #336]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 8003636:	f023 0304 	bic.w	r3, r3, #4
 800363a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d015      	beq.n	8003670 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003644:	f7fd fa3c 	bl	8000ac0 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364a:	e00a      	b.n	8003662 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364c:	f7fd fa38 	bl	8000ac0 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800365a:	4293      	cmp	r3, r2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e0cb      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003662:	4b49      	ldr	r3, [pc, #292]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0ee      	beq.n	800364c <HAL_RCC_OscConfig+0x334>
 800366e:	e014      	b.n	800369a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003670:	f7fd fa26 	bl	8000ac0 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003676:	e00a      	b.n	800368e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003678:	f7fd fa22 	bl	8000ac0 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003686:	4293      	cmp	r3, r2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e0b5      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800368e:	4b3e      	ldr	r3, [pc, #248]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 8003690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1ee      	bne.n	8003678 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800369a:	7dfb      	ldrb	r3, [r7, #23]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d105      	bne.n	80036ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a0:	4b39      	ldr	r3, [pc, #228]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 80036a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a4:	4a38      	ldr	r2, [pc, #224]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 80036a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 80a1 	beq.w	80037f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036b6:	4b34      	ldr	r3, [pc, #208]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d05c      	beq.n	800377c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d141      	bne.n	800374e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ca:	4b31      	ldr	r3, [pc, #196]	@ (8003790 <HAL_RCC_OscConfig+0x478>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d0:	f7fd f9f6 	bl	8000ac0 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d8:	f7fd f9f2 	bl	8000ac0 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e087      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	4b27      	ldr	r3, [pc, #156]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69da      	ldr	r2, [r3, #28]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003704:	019b      	lsls	r3, r3, #6
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370c:	085b      	lsrs	r3, r3, #1
 800370e:	3b01      	subs	r3, #1
 8003710:	041b      	lsls	r3, r3, #16
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003718:	061b      	lsls	r3, r3, #24
 800371a:	491b      	ldr	r1, [pc, #108]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003720:	4b1b      	ldr	r3, [pc, #108]	@ (8003790 <HAL_RCC_OscConfig+0x478>)
 8003722:	2201      	movs	r2, #1
 8003724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003726:	f7fd f9cb 	bl	8000ac0 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372e:	f7fd f9c7 	bl	8000ac0 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e05c      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003740:	4b11      	ldr	r3, [pc, #68]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0f0      	beq.n	800372e <HAL_RCC_OscConfig+0x416>
 800374c:	e054      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374e:	4b10      	ldr	r3, [pc, #64]	@ (8003790 <HAL_RCC_OscConfig+0x478>)
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003754:	f7fd f9b4 	bl	8000ac0 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375c:	f7fd f9b0 	bl	8000ac0 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e045      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376e:	4b06      	ldr	r3, [pc, #24]	@ (8003788 <HAL_RCC_OscConfig+0x470>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0x444>
 800377a:	e03d      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d107      	bne.n	8003794 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e038      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
 8003788:	40023800 	.word	0x40023800
 800378c:	40007000 	.word	0x40007000
 8003790:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003794:	4b1b      	ldr	r3, [pc, #108]	@ (8003804 <HAL_RCC_OscConfig+0x4ec>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d028      	beq.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d121      	bne.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d11a      	bne.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037c4:	4013      	ands	r3, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d111      	bne.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	3b01      	subs	r3, #1
 80037de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d107      	bne.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800

08003808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0cc      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800381c:	4b68      	ldr	r3, [pc, #416]	@ (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d90c      	bls.n	8003844 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	4b65      	ldr	r3, [pc, #404]	@ (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003832:	4b63      	ldr	r3, [pc, #396]	@ (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d001      	beq.n	8003844 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0b8      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d020      	beq.n	8003892 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800385c:	4b59      	ldr	r3, [pc, #356]	@ (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4a58      	ldr	r2, [pc, #352]	@ (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003866:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003874:	4b53      	ldr	r3, [pc, #332]	@ (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	4a52      	ldr	r2, [pc, #328]	@ (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800387e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003880:	4b50      	ldr	r3, [pc, #320]	@ (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	494d      	ldr	r1, [pc, #308]	@ (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	4313      	orrs	r3, r2
 8003890:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d044      	beq.n	8003928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a6:	4b47      	ldr	r3, [pc, #284]	@ (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d119      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e07f      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d003      	beq.n	80038c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	d107      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c6:	4b3f      	ldr	r3, [pc, #252]	@ (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e06f      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d6:	4b3b      	ldr	r3, [pc, #236]	@ (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e067      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038e6:	4b37      	ldr	r3, [pc, #220]	@ (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f023 0203 	bic.w	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	4934      	ldr	r1, [pc, #208]	@ (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038f8:	f7fd f8e2 	bl	8000ac0 <HAL_GetTick>
 80038fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003900:	f7fd f8de 	bl	8000ac0 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e04f      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	4b2b      	ldr	r3, [pc, #172]	@ (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 020c 	and.w	r2, r3, #12
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	429a      	cmp	r2, r3
 8003926:	d1eb      	bne.n	8003900 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003928:	4b25      	ldr	r3, [pc, #148]	@ (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d20c      	bcs.n	8003950 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b22      	ldr	r3, [pc, #136]	@ (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b20      	ldr	r3, [pc, #128]	@ (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e032      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800395c:	4b19      	ldr	r3, [pc, #100]	@ (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4916      	ldr	r1, [pc, #88]	@ (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800397a:	4b12      	ldr	r3, [pc, #72]	@ (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	490e      	ldr	r1, [pc, #56]	@ (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	4313      	orrs	r3, r2
 800398c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800398e:	f000 f821 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 8003992:	4602      	mov	r2, r0
 8003994:	4b0b      	ldr	r3, [pc, #44]	@ (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	490a      	ldr	r1, [pc, #40]	@ (80039c8 <HAL_RCC_ClockConfig+0x1c0>)
 80039a0:	5ccb      	ldrb	r3, [r1, r3]
 80039a2:	fa22 f303 	lsr.w	r3, r2, r3
 80039a6:	4a09      	ldr	r2, [pc, #36]	@ (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 80039a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80039aa:	4b09      	ldr	r3, [pc, #36]	@ (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fd f842 	bl	8000a38 <HAL_InitTick>

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40023c00 	.word	0x40023c00
 80039c4:	40023800 	.word	0x40023800
 80039c8:	08008598 	.word	0x08008598
 80039cc:	20000000 	.word	0x20000000
 80039d0:	20000004 	.word	0x20000004

080039d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d8:	b094      	sub	sp, #80	@ 0x50
 80039da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ec:	4b79      	ldr	r3, [pc, #484]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 030c 	and.w	r3, r3, #12
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d00d      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0x40>
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	f200 80e1 	bhi.w	8003bc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_RCC_GetSysClockFreq+0x34>
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d003      	beq.n	8003a0e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a06:	e0db      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a08:	4b73      	ldr	r3, [pc, #460]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a0c:	e0db      	b.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a0e:	4b73      	ldr	r3, [pc, #460]	@ (8003bdc <HAL_RCC_GetSysClockFreq+0x208>)
 8003a10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a12:	e0d8      	b.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a14:	4b6f      	ldr	r3, [pc, #444]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a1e:	4b6d      	ldr	r3, [pc, #436]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d063      	beq.n	8003af2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a2a:	4b6a      	ldr	r3, [pc, #424]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	099b      	lsrs	r3, r3, #6
 8003a30:	2200      	movs	r2, #0
 8003a32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a3e:	2300      	movs	r3, #0
 8003a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a46:	4622      	mov	r2, r4
 8003a48:	462b      	mov	r3, r5
 8003a4a:	f04f 0000 	mov.w	r0, #0
 8003a4e:	f04f 0100 	mov.w	r1, #0
 8003a52:	0159      	lsls	r1, r3, #5
 8003a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a58:	0150      	lsls	r0, r2, #5
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4621      	mov	r1, r4
 8003a60:	1a51      	subs	r1, r2, r1
 8003a62:	6139      	str	r1, [r7, #16]
 8003a64:	4629      	mov	r1, r5
 8003a66:	eb63 0301 	sbc.w	r3, r3, r1
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a78:	4659      	mov	r1, fp
 8003a7a:	018b      	lsls	r3, r1, #6
 8003a7c:	4651      	mov	r1, sl
 8003a7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a82:	4651      	mov	r1, sl
 8003a84:	018a      	lsls	r2, r1, #6
 8003a86:	4651      	mov	r1, sl
 8003a88:	ebb2 0801 	subs.w	r8, r2, r1
 8003a8c:	4659      	mov	r1, fp
 8003a8e:	eb63 0901 	sbc.w	r9, r3, r1
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aa6:	4690      	mov	r8, r2
 8003aa8:	4699      	mov	r9, r3
 8003aaa:	4623      	mov	r3, r4
 8003aac:	eb18 0303 	adds.w	r3, r8, r3
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	462b      	mov	r3, r5
 8003ab4:	eb49 0303 	adc.w	r3, r9, r3
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	024b      	lsls	r3, r1, #9
 8003aca:	4621      	mov	r1, r4
 8003acc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	024a      	lsls	r2, r1, #9
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ada:	2200      	movs	r2, #0
 8003adc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ade:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ae0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ae4:	f7fc fb70 	bl	80001c8 <__aeabi_uldivmod>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4613      	mov	r3, r2
 8003aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003af0:	e058      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af2:	4b38      	ldr	r3, [pc, #224]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	099b      	lsrs	r3, r3, #6
 8003af8:	2200      	movs	r2, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	4611      	mov	r1, r2
 8003afe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b02:	623b      	str	r3, [r7, #32]
 8003b04:	2300      	movs	r3, #0
 8003b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b0c:	4642      	mov	r2, r8
 8003b0e:	464b      	mov	r3, r9
 8003b10:	f04f 0000 	mov.w	r0, #0
 8003b14:	f04f 0100 	mov.w	r1, #0
 8003b18:	0159      	lsls	r1, r3, #5
 8003b1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b1e:	0150      	lsls	r0, r2, #5
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4641      	mov	r1, r8
 8003b26:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b2a:	4649      	mov	r1, r9
 8003b2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b44:	ebb2 040a 	subs.w	r4, r2, sl
 8003b48:	eb63 050b 	sbc.w	r5, r3, fp
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	00eb      	lsls	r3, r5, #3
 8003b56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b5a:	00e2      	lsls	r2, r4, #3
 8003b5c:	4614      	mov	r4, r2
 8003b5e:	461d      	mov	r5, r3
 8003b60:	4643      	mov	r3, r8
 8003b62:	18e3      	adds	r3, r4, r3
 8003b64:	603b      	str	r3, [r7, #0]
 8003b66:	464b      	mov	r3, r9
 8003b68:	eb45 0303 	adc.w	r3, r5, r3
 8003b6c:	607b      	str	r3, [r7, #4]
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b7a:	4629      	mov	r1, r5
 8003b7c:	028b      	lsls	r3, r1, #10
 8003b7e:	4621      	mov	r1, r4
 8003b80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b84:	4621      	mov	r1, r4
 8003b86:	028a      	lsls	r2, r1, #10
 8003b88:	4610      	mov	r0, r2
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b8e:	2200      	movs	r2, #0
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	61fa      	str	r2, [r7, #28]
 8003b94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b98:	f7fc fb16 	bl	80001c8 <__aeabi_uldivmod>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	0c1b      	lsrs	r3, r3, #16
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003bb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bbe:	e002      	b.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bc0:	4b05      	ldr	r3, [pc, #20]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3750      	adds	r7, #80	@ 0x50
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	00f42400 	.word	0x00f42400
 8003bdc:	007a1200 	.word	0x007a1200

08003be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003be4:	4b03      	ldr	r3, [pc, #12]	@ (8003bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003be6:	681b      	ldr	r3, [r3, #0]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	20000000 	.word	0x20000000

08003bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bfc:	f7ff fff0 	bl	8003be0 <HAL_RCC_GetHCLKFreq>
 8003c00:	4602      	mov	r2, r0
 8003c02:	4b05      	ldr	r3, [pc, #20]	@ (8003c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	0a9b      	lsrs	r3, r3, #10
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	4903      	ldr	r1, [pc, #12]	@ (8003c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c0e:	5ccb      	ldrb	r3, [r1, r3]
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	080085a8 	.word	0x080085a8

08003c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c24:	f7ff ffdc 	bl	8003be0 <HAL_RCC_GetHCLKFreq>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b05      	ldr	r3, [pc, #20]	@ (8003c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	0b5b      	lsrs	r3, r3, #13
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	4903      	ldr	r1, [pc, #12]	@ (8003c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c36:	5ccb      	ldrb	r3, [r1, r3]
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40023800 	.word	0x40023800
 8003c44:	080085a8 	.word	0x080085a8

08003c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e042      	b.n	8003ce0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fc fdcc 	bl	800080c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2224      	movs	r2, #36	@ 0x24
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f82b 	bl	8003ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cec:	b0c0      	sub	sp, #256	@ 0x100
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d04:	68d9      	ldr	r1, [r3, #12]
 8003d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	ea40 0301 	orr.w	r3, r0, r1
 8003d10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d40:	f021 010c 	bic.w	r1, r1, #12
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d62:	6999      	ldr	r1, [r3, #24]
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	ea40 0301 	orr.w	r3, r0, r1
 8003d6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	4b8f      	ldr	r3, [pc, #572]	@ (8003fb4 <UART_SetConfig+0x2cc>)
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d005      	beq.n	8003d88 <UART_SetConfig+0xa0>
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4b8d      	ldr	r3, [pc, #564]	@ (8003fb8 <UART_SetConfig+0x2d0>)
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d104      	bne.n	8003d92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d88:	f7ff ff4a 	bl	8003c20 <HAL_RCC_GetPCLK2Freq>
 8003d8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d90:	e003      	b.n	8003d9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d92:	f7ff ff31 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 8003d96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003da4:	f040 810c 	bne.w	8003fc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dac:	2200      	movs	r2, #0
 8003dae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003db2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003db6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003dba:	4622      	mov	r2, r4
 8003dbc:	462b      	mov	r3, r5
 8003dbe:	1891      	adds	r1, r2, r2
 8003dc0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003dc2:	415b      	adcs	r3, r3
 8003dc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003dca:	4621      	mov	r1, r4
 8003dcc:	eb12 0801 	adds.w	r8, r2, r1
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	eb43 0901 	adc.w	r9, r3, r1
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dea:	4690      	mov	r8, r2
 8003dec:	4699      	mov	r9, r3
 8003dee:	4623      	mov	r3, r4
 8003df0:	eb18 0303 	adds.w	r3, r8, r3
 8003df4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003df8:	462b      	mov	r3, r5
 8003dfa:	eb49 0303 	adc.w	r3, r9, r3
 8003dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e16:	460b      	mov	r3, r1
 8003e18:	18db      	adds	r3, r3, r3
 8003e1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	eb42 0303 	adc.w	r3, r2, r3
 8003e22:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e2c:	f7fc f9cc 	bl	80001c8 <__aeabi_uldivmod>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4b61      	ldr	r3, [pc, #388]	@ (8003fbc <UART_SetConfig+0x2d4>)
 8003e36:	fba3 2302 	umull	r2, r3, r3, r2
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	011c      	lsls	r4, r3, #4
 8003e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e50:	4642      	mov	r2, r8
 8003e52:	464b      	mov	r3, r9
 8003e54:	1891      	adds	r1, r2, r2
 8003e56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e58:	415b      	adcs	r3, r3
 8003e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e60:	4641      	mov	r1, r8
 8003e62:	eb12 0a01 	adds.w	sl, r2, r1
 8003e66:	4649      	mov	r1, r9
 8003e68:	eb43 0b01 	adc.w	fp, r3, r1
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e80:	4692      	mov	sl, r2
 8003e82:	469b      	mov	fp, r3
 8003e84:	4643      	mov	r3, r8
 8003e86:	eb1a 0303 	adds.w	r3, sl, r3
 8003e8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e8e:	464b      	mov	r3, r9
 8003e90:	eb4b 0303 	adc.w	r3, fp, r3
 8003e94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ea4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ea8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003eac:	460b      	mov	r3, r1
 8003eae:	18db      	adds	r3, r3, r3
 8003eb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	eb42 0303 	adc.w	r3, r2, r3
 8003eb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ebe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ec2:	f7fc f981 	bl	80001c8 <__aeabi_uldivmod>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4611      	mov	r1, r2
 8003ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8003fbc <UART_SetConfig+0x2d4>)
 8003ece:	fba3 2301 	umull	r2, r3, r3, r1
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	2264      	movs	r2, #100	@ 0x64
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
 8003eda:	1acb      	subs	r3, r1, r3
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ee2:	4b36      	ldr	r3, [pc, #216]	@ (8003fbc <UART_SetConfig+0x2d4>)
 8003ee4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ee8:	095b      	lsrs	r3, r3, #5
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ef0:	441c      	add	r4, r3
 8003ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003efc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f04:	4642      	mov	r2, r8
 8003f06:	464b      	mov	r3, r9
 8003f08:	1891      	adds	r1, r2, r2
 8003f0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f0c:	415b      	adcs	r3, r3
 8003f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f14:	4641      	mov	r1, r8
 8003f16:	1851      	adds	r1, r2, r1
 8003f18:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f1a:	4649      	mov	r1, r9
 8003f1c:	414b      	adcs	r3, r1
 8003f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f2c:	4659      	mov	r1, fp
 8003f2e:	00cb      	lsls	r3, r1, #3
 8003f30:	4651      	mov	r1, sl
 8003f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f36:	4651      	mov	r1, sl
 8003f38:	00ca      	lsls	r2, r1, #3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4642      	mov	r2, r8
 8003f42:	189b      	adds	r3, r3, r2
 8003f44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f48:	464b      	mov	r3, r9
 8003f4a:	460a      	mov	r2, r1
 8003f4c:	eb42 0303 	adc.w	r3, r2, r3
 8003f50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f68:	460b      	mov	r3, r1
 8003f6a:	18db      	adds	r3, r3, r3
 8003f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f6e:	4613      	mov	r3, r2
 8003f70:	eb42 0303 	adc.w	r3, r2, r3
 8003f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f7e:	f7fc f923 	bl	80001c8 <__aeabi_uldivmod>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4b0d      	ldr	r3, [pc, #52]	@ (8003fbc <UART_SetConfig+0x2d4>)
 8003f88:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	2164      	movs	r1, #100	@ 0x64
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	3332      	adds	r3, #50	@ 0x32
 8003f9a:	4a08      	ldr	r2, [pc, #32]	@ (8003fbc <UART_SetConfig+0x2d4>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	f003 0207 	and.w	r2, r3, #7
 8003fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4422      	add	r2, r4
 8003fae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fb0:	e106      	b.n	80041c0 <UART_SetConfig+0x4d8>
 8003fb2:	bf00      	nop
 8003fb4:	40011000 	.word	0x40011000
 8003fb8:	40011400 	.word	0x40011400
 8003fbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003fce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003fd2:	4642      	mov	r2, r8
 8003fd4:	464b      	mov	r3, r9
 8003fd6:	1891      	adds	r1, r2, r2
 8003fd8:	6239      	str	r1, [r7, #32]
 8003fda:	415b      	adcs	r3, r3
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fe2:	4641      	mov	r1, r8
 8003fe4:	1854      	adds	r4, r2, r1
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	eb43 0501 	adc.w	r5, r3, r1
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	00eb      	lsls	r3, r5, #3
 8003ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ffa:	00e2      	lsls	r2, r4, #3
 8003ffc:	4614      	mov	r4, r2
 8003ffe:	461d      	mov	r5, r3
 8004000:	4643      	mov	r3, r8
 8004002:	18e3      	adds	r3, r4, r3
 8004004:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004008:	464b      	mov	r3, r9
 800400a:	eb45 0303 	adc.w	r3, r5, r3
 800400e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800401e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800402e:	4629      	mov	r1, r5
 8004030:	008b      	lsls	r3, r1, #2
 8004032:	4621      	mov	r1, r4
 8004034:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004038:	4621      	mov	r1, r4
 800403a:	008a      	lsls	r2, r1, #2
 800403c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004040:	f7fc f8c2 	bl	80001c8 <__aeabi_uldivmod>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4b60      	ldr	r3, [pc, #384]	@ (80041cc <UART_SetConfig+0x4e4>)
 800404a:	fba3 2302 	umull	r2, r3, r3, r2
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	011c      	lsls	r4, r3, #4
 8004052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004056:	2200      	movs	r2, #0
 8004058:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800405c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004060:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004064:	4642      	mov	r2, r8
 8004066:	464b      	mov	r3, r9
 8004068:	1891      	adds	r1, r2, r2
 800406a:	61b9      	str	r1, [r7, #24]
 800406c:	415b      	adcs	r3, r3
 800406e:	61fb      	str	r3, [r7, #28]
 8004070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004074:	4641      	mov	r1, r8
 8004076:	1851      	adds	r1, r2, r1
 8004078:	6139      	str	r1, [r7, #16]
 800407a:	4649      	mov	r1, r9
 800407c:	414b      	adcs	r3, r1
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800408c:	4659      	mov	r1, fp
 800408e:	00cb      	lsls	r3, r1, #3
 8004090:	4651      	mov	r1, sl
 8004092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004096:	4651      	mov	r1, sl
 8004098:	00ca      	lsls	r2, r1, #3
 800409a:	4610      	mov	r0, r2
 800409c:	4619      	mov	r1, r3
 800409e:	4603      	mov	r3, r0
 80040a0:	4642      	mov	r2, r8
 80040a2:	189b      	adds	r3, r3, r2
 80040a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040a8:	464b      	mov	r3, r9
 80040aa:	460a      	mov	r2, r1
 80040ac:	eb42 0303 	adc.w	r3, r2, r3
 80040b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80040cc:	4649      	mov	r1, r9
 80040ce:	008b      	lsls	r3, r1, #2
 80040d0:	4641      	mov	r1, r8
 80040d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040d6:	4641      	mov	r1, r8
 80040d8:	008a      	lsls	r2, r1, #2
 80040da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80040de:	f7fc f873 	bl	80001c8 <__aeabi_uldivmod>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4611      	mov	r1, r2
 80040e8:	4b38      	ldr	r3, [pc, #224]	@ (80041cc <UART_SetConfig+0x4e4>)
 80040ea:	fba3 2301 	umull	r2, r3, r3, r1
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	2264      	movs	r2, #100	@ 0x64
 80040f2:	fb02 f303 	mul.w	r3, r2, r3
 80040f6:	1acb      	subs	r3, r1, r3
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	3332      	adds	r3, #50	@ 0x32
 80040fc:	4a33      	ldr	r2, [pc, #204]	@ (80041cc <UART_SetConfig+0x4e4>)
 80040fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004108:	441c      	add	r4, r3
 800410a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800410e:	2200      	movs	r2, #0
 8004110:	673b      	str	r3, [r7, #112]	@ 0x70
 8004112:	677a      	str	r2, [r7, #116]	@ 0x74
 8004114:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004118:	4642      	mov	r2, r8
 800411a:	464b      	mov	r3, r9
 800411c:	1891      	adds	r1, r2, r2
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	415b      	adcs	r3, r3
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004128:	4641      	mov	r1, r8
 800412a:	1851      	adds	r1, r2, r1
 800412c:	6039      	str	r1, [r7, #0]
 800412e:	4649      	mov	r1, r9
 8004130:	414b      	adcs	r3, r1
 8004132:	607b      	str	r3, [r7, #4]
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004140:	4659      	mov	r1, fp
 8004142:	00cb      	lsls	r3, r1, #3
 8004144:	4651      	mov	r1, sl
 8004146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800414a:	4651      	mov	r1, sl
 800414c:	00ca      	lsls	r2, r1, #3
 800414e:	4610      	mov	r0, r2
 8004150:	4619      	mov	r1, r3
 8004152:	4603      	mov	r3, r0
 8004154:	4642      	mov	r2, r8
 8004156:	189b      	adds	r3, r3, r2
 8004158:	66bb      	str	r3, [r7, #104]	@ 0x68
 800415a:	464b      	mov	r3, r9
 800415c:	460a      	mov	r2, r1
 800415e:	eb42 0303 	adc.w	r3, r2, r3
 8004162:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	663b      	str	r3, [r7, #96]	@ 0x60
 800416e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800417c:	4649      	mov	r1, r9
 800417e:	008b      	lsls	r3, r1, #2
 8004180:	4641      	mov	r1, r8
 8004182:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004186:	4641      	mov	r1, r8
 8004188:	008a      	lsls	r2, r1, #2
 800418a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800418e:	f7fc f81b 	bl	80001c8 <__aeabi_uldivmod>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4b0d      	ldr	r3, [pc, #52]	@ (80041cc <UART_SetConfig+0x4e4>)
 8004198:	fba3 1302 	umull	r1, r3, r3, r2
 800419c:	095b      	lsrs	r3, r3, #5
 800419e:	2164      	movs	r1, #100	@ 0x64
 80041a0:	fb01 f303 	mul.w	r3, r1, r3
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	3332      	adds	r3, #50	@ 0x32
 80041aa:	4a08      	ldr	r2, [pc, #32]	@ (80041cc <UART_SetConfig+0x4e4>)
 80041ac:	fba2 2303 	umull	r2, r3, r2, r3
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	f003 020f 	and.w	r2, r3, #15
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4422      	add	r2, r4
 80041be:	609a      	str	r2, [r3, #8]
}
 80041c0:	bf00      	nop
 80041c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80041c6:	46bd      	mov	sp, r7
 80041c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041cc:	51eb851f 	.word	0x51eb851f

080041d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041d0:	b084      	sub	sp, #16
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	f107 001c 	add.w	r0, r7, #28
 80041de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d123      	bne.n	8004232 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80041fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004212:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004216:	2b01      	cmp	r3, #1
 8004218:	d105      	bne.n	8004226 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f9dc 	bl	80045e4 <USB_CoreReset>
 800422c:	4603      	mov	r3, r0
 800422e:	73fb      	strb	r3, [r7, #15]
 8004230:	e01b      	b.n	800426a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f9d0 	bl	80045e4 <USB_CoreReset>
 8004244:	4603      	mov	r3, r0
 8004246:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004248:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800424c:	2b00      	cmp	r3, #0
 800424e:	d106      	bne.n	800425e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004254:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	639a      	str	r2, [r3, #56]	@ 0x38
 800425c:	e005      	b.n	800426a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004262:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800426a:	7fbb      	ldrb	r3, [r7, #30]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d10b      	bne.n	8004288 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f043 0206 	orr.w	r2, r3, #6
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f043 0220 	orr.w	r2, r3, #32
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004288:	7bfb      	ldrb	r3, [r7, #15]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004294:	b004      	add	sp, #16
 8004296:	4770      	bx	lr

08004298 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f043 0201 	orr.w	r2, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f023 0201 	bic.w	r2, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042f8:	78fb      	ldrb	r3, [r7, #3]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d115      	bne.n	800432a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800430a:	200a      	movs	r0, #10
 800430c:	f7fc fbe4 	bl	8000ad8 <HAL_Delay>
      ms += 10U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	330a      	adds	r3, #10
 8004314:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f956 	bl	80045c8 <USB_GetMode>
 800431c:	4603      	mov	r3, r0
 800431e:	2b01      	cmp	r3, #1
 8004320:	d01e      	beq.n	8004360 <USB_SetCurrentMode+0x84>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2bc7      	cmp	r3, #199	@ 0xc7
 8004326:	d9f0      	bls.n	800430a <USB_SetCurrentMode+0x2e>
 8004328:	e01a      	b.n	8004360 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800432a:	78fb      	ldrb	r3, [r7, #3]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d115      	bne.n	800435c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800433c:	200a      	movs	r0, #10
 800433e:	f7fc fbcb 	bl	8000ad8 <HAL_Delay>
      ms += 10U;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	330a      	adds	r3, #10
 8004346:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f93d 	bl	80045c8 <USB_GetMode>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <USB_SetCurrentMode+0x84>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2bc7      	cmp	r3, #199	@ 0xc7
 8004358:	d9f0      	bls.n	800433c <USB_SetCurrentMode+0x60>
 800435a:	e001      	b.n	8004360 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e005      	b.n	800436c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2bc8      	cmp	r3, #200	@ 0xc8
 8004364:	d101      	bne.n	800436a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	3301      	adds	r3, #1
 8004386:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800438e:	d901      	bls.n	8004394 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e01b      	b.n	80043cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	daf2      	bge.n	8004382 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	019b      	lsls	r3, r3, #6
 80043a4:	f043 0220 	orr.w	r2, r3, #32
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3301      	adds	r3, #1
 80043b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043b8:	d901      	bls.n	80043be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e006      	b.n	80043cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	d0f0      	beq.n	80043ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3301      	adds	r3, #1
 80043e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043f0:	d901      	bls.n	80043f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e018      	b.n	8004428 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	daf2      	bge.n	80043e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2210      	movs	r2, #16
 8004406:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3301      	adds	r3, #1
 800440c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004414:	d901      	bls.n	800441a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e006      	b.n	8004428 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	2b10      	cmp	r3, #16
 8004424:	d0f0      	beq.n	8004408 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004434:	b480      	push	{r7}
 8004436:	b089      	sub	sp, #36	@ 0x24
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	4611      	mov	r1, r2
 8004440:	461a      	mov	r2, r3
 8004442:	460b      	mov	r3, r1
 8004444:	71fb      	strb	r3, [r7, #7]
 8004446:	4613      	mov	r3, r2
 8004448:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004452:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004456:	2b00      	cmp	r3, #0
 8004458:	d123      	bne.n	80044a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800445a:	88bb      	ldrh	r3, [r7, #4]
 800445c:	3303      	adds	r3, #3
 800445e:	089b      	lsrs	r3, r3, #2
 8004460:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004462:	2300      	movs	r3, #0
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	e018      	b.n	800449a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	031a      	lsls	r2, r3, #12
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	4413      	add	r3, r2
 8004470:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004474:	461a      	mov	r2, r3
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	3301      	adds	r3, #1
 8004480:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3301      	adds	r3, #1
 8004486:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	3301      	adds	r3, #1
 800448c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	3301      	adds	r3, #1
 8004492:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	3301      	adds	r3, #1
 8004498:	61bb      	str	r3, [r7, #24]
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d3e2      	bcc.n	8004468 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3724      	adds	r7, #36	@ 0x24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b08b      	sub	sp, #44	@ 0x2c
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	4613      	mov	r3, r2
 80044bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	089b      	lsrs	r3, r3, #2
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	f003 0303 	and.w	r3, r3, #3
 80044d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80044d6:	2300      	movs	r3, #0
 80044d8:	623b      	str	r3, [r7, #32]
 80044da:	e014      	b.n	8004506 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	3301      	adds	r3, #1
 80044ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	3301      	adds	r3, #1
 80044f2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f6:	3301      	adds	r3, #1
 80044f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fc:	3301      	adds	r3, #1
 80044fe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	3301      	adds	r3, #1
 8004504:	623b      	str	r3, [r7, #32]
 8004506:	6a3a      	ldr	r2, [r7, #32]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	429a      	cmp	r2, r3
 800450c:	d3e6      	bcc.n	80044dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800450e:	8bfb      	ldrh	r3, [r7, #30]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01e      	beq.n	8004552 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800451e:	461a      	mov	r2, r3
 8004520:	f107 0310 	add.w	r3, r7, #16
 8004524:	6812      	ldr	r2, [r2, #0]
 8004526:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	fa22 f303 	lsr.w	r3, r2, r3
 8004534:	b2da      	uxtb	r2, r3
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	701a      	strb	r2, [r3, #0]
      i++;
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	3301      	adds	r3, #1
 800453e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004542:	3301      	adds	r3, #1
 8004544:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004546:	8bfb      	ldrh	r3, [r7, #30]
 8004548:	3b01      	subs	r3, #1
 800454a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800454c:	8bfb      	ldrh	r3, [r7, #30]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1ea      	bne.n	8004528 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004554:	4618      	mov	r0, r3
 8004556:	372c      	adds	r7, #44	@ 0x2c
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4013      	ands	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004578:	68fb      	ldr	r3, [r7, #12]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8004586:	b480      	push	{r7}
 8004588:	b085      	sub	sp, #20
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	460b      	mov	r3, r1
 8004590:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4413      	add	r3, r2
 800459e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80045a6:	78fb      	ldrb	r3, [r7, #3]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	4013      	ands	r3, r2
 80045b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80045ba:	68bb      	ldr	r3, [r7, #8]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	f003 0301 	and.w	r3, r3, #1
}
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	3301      	adds	r3, #1
 80045f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045fc:	d901      	bls.n	8004602 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e01b      	b.n	800463a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	daf2      	bge.n	80045f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f043 0201 	orr.w	r2, r3, #1
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3301      	adds	r3, #1
 800461e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004626:	d901      	bls.n	800462c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e006      	b.n	800463a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b01      	cmp	r3, #1
 8004636:	d0f0      	beq.n	800461a <USB_CoreReset+0x36>

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004648:	b084      	sub	sp, #16
 800464a:	b580      	push	{r7, lr}
 800464c:	b086      	sub	sp, #24
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004656:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004668:	461a      	mov	r2, r3
 800466a:	2300      	movs	r3, #0
 800466c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004672:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800468a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	d119      	bne.n	80046d2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800469e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d10a      	bne.n	80046bc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80046b4:	f043 0304 	orr.w	r3, r3, #4
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	e014      	b.n	80046e6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80046ca:	f023 0304 	bic.w	r3, r3, #4
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	e009      	b.n	80046e6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80046e0:	f023 0304 	bic.w	r3, r3, #4
 80046e4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046e6:	2110      	movs	r1, #16
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff fe43 	bl	8004374 <USB_FlushTxFifo>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff fe6d 	bl	80043d8 <USB_FlushRxFifo>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004708:	2300      	movs	r3, #0
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	e015      	b.n	800473a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4413      	add	r3, r2
 8004716:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800471a:	461a      	mov	r2, r3
 800471c:	f04f 33ff 	mov.w	r3, #4294967295
 8004720:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4413      	add	r3, r2
 800472a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800472e:	461a      	mov	r2, r3
 8004730:	2300      	movs	r3, #0
 8004732:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	3301      	adds	r3, #1
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800473e:	461a      	mov	r2, r3
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4293      	cmp	r3, r2
 8004744:	d3e3      	bcc.n	800470e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f04f 32ff 	mov.w	r2, #4294967295
 8004752:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a18      	ldr	r2, [pc, #96]	@ (80047b8 <USB_HostInit+0x170>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d10b      	bne.n	8004774 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004762:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a15      	ldr	r2, [pc, #84]	@ (80047bc <USB_HostInit+0x174>)
 8004768:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a14      	ldr	r2, [pc, #80]	@ (80047c0 <USB_HostInit+0x178>)
 800476e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8004772:	e009      	b.n	8004788 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2280      	movs	r2, #128	@ 0x80
 8004778:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a11      	ldr	r2, [pc, #68]	@ (80047c4 <USB_HostInit+0x17c>)
 800477e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a11      	ldr	r2, [pc, #68]	@ (80047c8 <USB_HostInit+0x180>)
 8004784:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004788:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800478c:	2b00      	cmp	r3, #0
 800478e:	d105      	bne.n	800479c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	f043 0210 	orr.w	r2, r3, #16
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699a      	ldr	r2, [r3, #24]
 80047a0:	4b0a      	ldr	r3, [pc, #40]	@ (80047cc <USB_HostInit+0x184>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80047a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047b4:	b004      	add	sp, #16
 80047b6:	4770      	bx	lr
 80047b8:	40040000 	.word	0x40040000
 80047bc:	01000200 	.word	0x01000200
 80047c0:	00e00300 	.word	0x00e00300
 80047c4:	00600080 	.word	0x00600080
 80047c8:	004000e0 	.word	0x004000e0
 80047cc:	a3200008 	.word	0xa3200008

080047d0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80047ee:	f023 0303 	bic.w	r3, r3, #3
 80047f2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	68f9      	ldr	r1, [r7, #12]
 8004804:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004808:	4313      	orrs	r3, r2
 800480a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d107      	bne.n	8004822 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004818:	461a      	mov	r2, r3
 800481a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800481e:	6053      	str	r3, [r2, #4]
 8004820:	e00c      	b.n	800483c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	2b02      	cmp	r3, #2
 8004826:	d107      	bne.n	8004838 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800482e:	461a      	mov	r2, r3
 8004830:	f241 7370 	movw	r3, #6000	@ 0x1770
 8004834:	6053      	str	r3, [r2, #4]
 8004836:	e001      	b.n	800483c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b084      	sub	sp, #16
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800486a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004878:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800487a:	2064      	movs	r0, #100	@ 0x64
 800487c:	f7fc f92c 	bl	8000ad8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004888:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800488c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800488e:	200a      	movs	r0, #10
 8004890:	f7fc f922 	bl	8000ad8 <HAL_Delay>

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800489e:	b480      	push	{r7}
 80048a0:	b085      	sub	sp, #20
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	460b      	mov	r3, r1
 80048a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80048c2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <USB_DriveVbus+0x44>
 80048ce:	78fb      	ldrb	r3, [r7, #3]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d106      	bne.n	80048e2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80048dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80048e0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ec:	d109      	bne.n	8004902 <USB_DriveVbus+0x64>
 80048ee:	78fb      	ldrb	r3, [r7, #3]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d106      	bne.n	8004902 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80048fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004900:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	0c5b      	lsrs	r3, r3, #17
 800492e:	f003 0303 	and.w	r3, r3, #3
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	b29b      	uxth	r3, r3
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	4608      	mov	r0, r1
 800496a:	4611      	mov	r1, r2
 800496c:	461a      	mov	r2, r3
 800496e:	4603      	mov	r3, r0
 8004970:	70fb      	strb	r3, [r7, #3]
 8004972:	460b      	mov	r3, r1
 8004974:	70bb      	strb	r3, [r7, #2]
 8004976:	4613      	mov	r3, r2
 8004978:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8004982:	78fb      	ldrb	r3, [r7, #3]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	4413      	add	r3, r2
 800498a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800498e:	461a      	mov	r2, r3
 8004990:	f04f 33ff 	mov.w	r3, #4294967295
 8004994:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004996:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800499a:	2b03      	cmp	r3, #3
 800499c:	d87c      	bhi.n	8004a98 <USB_HC_Init+0x138>
 800499e:	a201      	add	r2, pc, #4	@ (adr r2, 80049a4 <USB_HC_Init+0x44>)
 80049a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a4:	080049b5 	.word	0x080049b5
 80049a8:	08004a5b 	.word	0x08004a5b
 80049ac:	080049b5 	.word	0x080049b5
 80049b0:	08004a1d 	.word	0x08004a1d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049c0:	461a      	mov	r2, r3
 80049c2:	f240 439d 	movw	r3, #1181	@ 0x49d
 80049c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80049c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	da10      	bge.n	80049f2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	78fa      	ldrb	r2, [r7, #3]
 80049e0:	0151      	lsls	r1, r2, #5
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	440a      	add	r2, r1
 80049e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049ee:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80049f0:	e055      	b.n	8004a9e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a6f      	ldr	r2, [pc, #444]	@ (8004bb4 <USB_HC_Init+0x254>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d151      	bne.n	8004a9e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	78fa      	ldrb	r2, [r7, #3]
 8004a0a:	0151      	lsls	r1, r2, #5
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	440a      	add	r2, r1
 8004a10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a14:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004a18:	60d3      	str	r3, [r2, #12]
      break;
 8004a1a:	e040      	b.n	8004a9e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004a1c:	78fb      	ldrb	r3, [r7, #3]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a28:	461a      	mov	r2, r3
 8004a2a:	f240 639d 	movw	r3, #1693	@ 0x69d
 8004a2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004a30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	da34      	bge.n	8004aa2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	78fa      	ldrb	r2, [r7, #3]
 8004a48:	0151      	lsls	r1, r2, #5
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	440a      	add	r2, r1
 8004a4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a56:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004a58:	e023      	b.n	8004aa2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004a5a:	78fb      	ldrb	r3, [r7, #3]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a66:	461a      	mov	r2, r3
 8004a68:	f240 2325 	movw	r3, #549	@ 0x225
 8004a6c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004a6e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	da17      	bge.n	8004aa6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	78fa      	ldrb	r2, [r7, #3]
 8004a86:	0151      	lsls	r1, r2, #5
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	440a      	add	r2, r1
 8004a8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a90:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8004a94:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004a96:	e006      	b.n	8004aa6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	77fb      	strb	r3, [r7, #31]
      break;
 8004a9c:	e004      	b.n	8004aa8 <USB_HC_Init+0x148>
      break;
 8004a9e:	bf00      	nop
 8004aa0:	e002      	b.n	8004aa8 <USB_HC_Init+0x148>
      break;
 8004aa2:	bf00      	nop
 8004aa4:	e000      	b.n	8004aa8 <USB_HC_Init+0x148>
      break;
 8004aa6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004aba:	78fb      	ldrb	r3, [r7, #3]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	78fa      	ldrb	r2, [r7, #3]
 8004aca:	0151      	lsls	r1, r2, #5
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	440a      	add	r2, r1
 8004ad0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ad4:	f043 0302 	orr.w	r3, r3, #2
 8004ad8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	78fb      	ldrb	r3, [r7, #3]
 8004ae4:	f003 030f 	and.w	r3, r3, #15
 8004ae8:	2101      	movs	r1, #1
 8004aea:	fa01 f303 	lsl.w	r3, r1, r3
 8004aee:	6939      	ldr	r1, [r7, #16]
 8004af0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004af4:	4313      	orrs	r3, r2
 8004af6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004b04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	da03      	bge.n	8004b14 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004b0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b10:	61bb      	str	r3, [r7, #24]
 8004b12:	e001      	b.n	8004b18 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8004b14:	2300      	movs	r3, #0
 8004b16:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7ff fef9 	bl	8004910 <USB_GetHostSpeed>
 8004b1e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004b20:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d106      	bne.n	8004b36 <USB_HC_Init+0x1d6>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d003      	beq.n	8004b36 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004b2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	e001      	b.n	8004b3a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b3a:	787b      	ldrb	r3, [r7, #1]
 8004b3c:	059b      	lsls	r3, r3, #22
 8004b3e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004b42:	78bb      	ldrb	r3, [r7, #2]
 8004b44:	02db      	lsls	r3, r3, #11
 8004b46:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b4a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004b4c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004b50:	049b      	lsls	r3, r3, #18
 8004b52:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004b56:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8004b58:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004b5e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b68:	78fa      	ldrb	r2, [r7, #3]
 8004b6a:	0151      	lsls	r1, r2, #5
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	440a      	add	r2, r1
 8004b70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8004b74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b78:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004b7a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d003      	beq.n	8004b8a <USB_HC_Init+0x22a>
 8004b82:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d10f      	bne.n	8004baa <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	78fa      	ldrb	r2, [r7, #3]
 8004b9a:	0151      	lsls	r1, r2, #5
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	440a      	add	r2, r1
 8004ba0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ba4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ba8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004baa:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3720      	adds	r7, #32
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40040000 	.word	0x40040000

08004bb8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08c      	sub	sp, #48	@ 0x30
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	785b      	ldrb	r3, [r3, #1]
 8004bce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8004bd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004bd4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	4a5d      	ldr	r2, [pc, #372]	@ (8004d50 <USB_HC_StartXfer+0x198>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d12f      	bne.n	8004c3e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d11c      	bne.n	8004c1e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	7c9b      	ldrb	r3, [r3, #18]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <USB_HC_StartXfer+0x3c>
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	7c9b      	ldrb	r3, [r3, #18]
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d124      	bne.n	8004c3e <USB_HC_StartXfer+0x86>
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	799b      	ldrb	r3, [r3, #6]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d120      	bne.n	8004c3e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	0151      	lsls	r1, r2, #5
 8004c0e:	6a3a      	ldr	r2, [r7, #32]
 8004c10:	440a      	add	r2, r1
 8004c12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c1a:	60d3      	str	r3, [r2, #12]
 8004c1c:	e00f      	b.n	8004c3e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	791b      	ldrb	r3, [r3, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10b      	bne.n	8004c3e <USB_HC_StartXfer+0x86>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	795b      	ldrb	r3, [r3, #5]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d107      	bne.n	8004c3e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	785b      	ldrb	r3, [r3, #1]
 8004c32:	4619      	mov	r1, r3
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 fb6b 	bl	8005310 <USB_DoPing>
        return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e232      	b.n	80050a4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	799b      	ldrb	r3, [r3, #6]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d158      	bne.n	8004cf8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8004c46:	2301      	movs	r3, #1
 8004c48:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	78db      	ldrb	r3, [r3, #3]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d007      	beq.n	8004c62 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004c52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	8a92      	ldrh	r2, [r2, #20]
 8004c58:	fb03 f202 	mul.w	r2, r3, r2
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	61da      	str	r2, [r3, #28]
 8004c60:	e07c      	b.n	8004d5c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	7c9b      	ldrb	r3, [r3, #18]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d130      	bne.n	8004ccc <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	2bbc      	cmp	r3, #188	@ 0xbc
 8004c70:	d918      	bls.n	8004ca4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	8a9b      	ldrh	r3, [r3, #20]
 8004c76:	461a      	mov	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d003      	beq.n	8004c94 <USB_HC_StartXfer+0xdc>
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d103      	bne.n	8004c9c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2202      	movs	r2, #2
 8004c98:	60da      	str	r2, [r3, #12]
 8004c9a:	e05f      	b.n	8004d5c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	60da      	str	r2, [r3, #12]
 8004ca2:	e05b      	b.n	8004d5c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	6a1a      	ldr	r2, [r3, #32]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d007      	beq.n	8004cc4 <USB_HC_StartXfer+0x10c>
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d003      	beq.n	8004cc4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	60da      	str	r2, [r3, #12]
 8004cc2:	e04b      	b.n	8004d5c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2203      	movs	r2, #3
 8004cc8:	60da      	str	r2, [r3, #12]
 8004cca:	e047      	b.n	8004d5c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d10d      	bne.n	8004cee <USB_HC_StartXfer+0x136>
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	8a92      	ldrh	r2, [r2, #20]
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d907      	bls.n	8004cee <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004cde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	8a92      	ldrh	r2, [r2, #20]
 8004ce4:	fb03 f202 	mul.w	r2, r3, r2
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	61da      	str	r2, [r3, #28]
 8004cec:	e036      	b.n	8004d5c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	6a1a      	ldr	r2, [r3, #32]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	61da      	str	r2, [r3, #28]
 8004cf6:	e031      	b.n	8004d5c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d018      	beq.n	8004d32 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	8a92      	ldrh	r2, [r2, #20]
 8004d08:	4413      	add	r3, r2
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	8a92      	ldrh	r2, [r2, #20]
 8004d10:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d14:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8004d16:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004d18:	8b7b      	ldrh	r3, [r7, #26]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d90b      	bls.n	8004d36 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8004d1e:	8b7b      	ldrh	r3, [r7, #26]
 8004d20:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004d22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	8a92      	ldrh	r2, [r2, #20]
 8004d28:	fb03 f202 	mul.w	r2, r3, r2
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	61da      	str	r2, [r3, #28]
 8004d30:	e001      	b.n	8004d36 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8004d32:	2301      	movs	r3, #1
 8004d34:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	78db      	ldrb	r3, [r3, #3]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004d3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	8a92      	ldrh	r2, [r2, #20]
 8004d44:	fb03 f202 	mul.w	r2, r3, r2
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	61da      	str	r2, [r3, #28]
 8004d4c:	e006      	b.n	8004d5c <USB_HC_StartXfer+0x1a4>
 8004d4e:	bf00      	nop
 8004d50:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	6a1a      	ldr	r2, [r3, #32]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d64:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004d66:	04d9      	lsls	r1, r3, #19
 8004d68:	4ba3      	ldr	r3, [pc, #652]	@ (8004ff8 <USB_HC_StartXfer+0x440>)
 8004d6a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d6c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	7d9b      	ldrb	r3, [r3, #22]
 8004d72:	075b      	lsls	r3, r3, #29
 8004d74:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d78:	69f9      	ldr	r1, [r7, #28]
 8004d7a:	0148      	lsls	r0, r1, #5
 8004d7c:	6a39      	ldr	r1, [r7, #32]
 8004d7e:	4401      	add	r1, r0
 8004d80:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d84:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d86:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d009      	beq.n	8004da2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	6999      	ldr	r1, [r3, #24]
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d9e:	460a      	mov	r2, r1
 8004da0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bf0c      	ite	eq
 8004db2:	2301      	moveq	r3, #1
 8004db4:	2300      	movne	r3, #0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	69fa      	ldr	r2, [r7, #28]
 8004dca:	0151      	lsls	r1, r2, #5
 8004dcc:	6a3a      	ldr	r2, [r7, #32]
 8004dce:	440a      	add	r2, r1
 8004dd0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004dd4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004dd8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	7e7b      	ldrb	r3, [r7, #25]
 8004dea:	075b      	lsls	r3, r3, #29
 8004dec:	69f9      	ldr	r1, [r7, #28]
 8004dee:	0148      	lsls	r0, r1, #5
 8004df0:	6a39      	ldr	r1, [r7, #32]
 8004df2:	4401      	add	r1, r0
 8004df4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	799b      	ldrb	r3, [r3, #6]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	f040 80c3 	bne.w	8004f8c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	7c5b      	ldrb	r3, [r3, #17]
 8004e0a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8004e10:	4313      	orrs	r3, r2
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	0151      	lsls	r1, r2, #5
 8004e16:	6a3a      	ldr	r2, [r7, #32]
 8004e18:	440a      	add	r2, r1
 8004e1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8004e1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8004e22:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	0151      	lsls	r1, r2, #5
 8004e36:	6a3a      	ldr	r2, [r7, #32]
 8004e38:	440a      	add	r2, r1
 8004e3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e3e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004e42:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	79db      	ldrb	r3, [r3, #7]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d123      	bne.n	8004e94 <USB_HC_StartXfer+0x2dc>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	78db      	ldrb	r3, [r3, #3]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d11f      	bne.n	8004e94 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	69fa      	ldr	r2, [r7, #28]
 8004e64:	0151      	lsls	r1, r2, #5
 8004e66:	6a3a      	ldr	r2, [r7, #32]
 8004e68:	440a      	add	r2, r1
 8004e6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e72:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	69fa      	ldr	r2, [r7, #28]
 8004e84:	0151      	lsls	r1, r2, #5
 8004e86:	6a3a      	ldr	r2, [r7, #32]
 8004e88:	440a      	add	r2, r1
 8004e8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e92:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	7c9b      	ldrb	r3, [r3, #18]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d003      	beq.n	8004ea4 <USB_HC_StartXfer+0x2ec>
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	7c9b      	ldrb	r3, [r3, #18]
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d117      	bne.n	8004ed4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d113      	bne.n	8004ed4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	78db      	ldrb	r3, [r3, #3]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d10f      	bne.n	8004ed4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	0151      	lsls	r1, r2, #5
 8004ec6:	6a3a      	ldr	r2, [r7, #32]
 8004ec8:	440a      	add	r2, r1
 8004eca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	7c9b      	ldrb	r3, [r3, #18]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d162      	bne.n	8004fa2 <USB_HC_StartXfer+0x3ea>
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	78db      	ldrb	r3, [r3, #3]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d15e      	bne.n	8004fa2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d858      	bhi.n	8004fa0 <USB_HC_StartXfer+0x3e8>
 8004eee:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef4 <USB_HC_StartXfer+0x33c>)
 8004ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef4:	08004f05 	.word	0x08004f05
 8004ef8:	08004f27 	.word	0x08004f27
 8004efc:	08004f49 	.word	0x08004f49
 8004f00:	08004f6b 	.word	0x08004f6b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	0151      	lsls	r1, r2, #5
 8004f16:	6a3a      	ldr	r2, [r7, #32]
 8004f18:	440a      	add	r2, r1
 8004f1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f22:	6053      	str	r3, [r2, #4]
          break;
 8004f24:	e03d      	b.n	8004fa2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	69fa      	ldr	r2, [r7, #28]
 8004f36:	0151      	lsls	r1, r2, #5
 8004f38:	6a3a      	ldr	r2, [r7, #32]
 8004f3a:	440a      	add	r2, r1
 8004f3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f40:	f043 030e 	orr.w	r3, r3, #14
 8004f44:	6053      	str	r3, [r2, #4]
          break;
 8004f46:	e02c      	b.n	8004fa2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	69fa      	ldr	r2, [r7, #28]
 8004f58:	0151      	lsls	r1, r2, #5
 8004f5a:	6a3a      	ldr	r2, [r7, #32]
 8004f5c:	440a      	add	r2, r1
 8004f5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f66:	6053      	str	r3, [r2, #4]
          break;
 8004f68:	e01b      	b.n	8004fa2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	0151      	lsls	r1, r2, #5
 8004f7c:	6a3a      	ldr	r2, [r7, #32]
 8004f7e:	440a      	add	r2, r1
 8004f80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f88:	6053      	str	r3, [r2, #4]
          break;
 8004f8a:	e00a      	b.n	8004fa2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f98:	461a      	mov	r2, r3
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	6053      	str	r3, [r2, #4]
 8004f9e:	e000      	b.n	8004fa2 <USB_HC_StartXfer+0x3ea>
          break;
 8004fa0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004fb8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	78db      	ldrb	r3, [r3, #3]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d004      	beq.n	8004fcc <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	e003      	b.n	8004fd4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004fd2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004fda:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fe8:	461a      	mov	r2, r3
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d003      	beq.n	8004ffc <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e055      	b.n	80050a4 <USB_HC_StartXfer+0x4ec>
 8004ff8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	78db      	ldrb	r3, [r3, #3]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d14e      	bne.n	80050a2 <USB_HC_StartXfer+0x4ea>
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d04a      	beq.n	80050a2 <USB_HC_StartXfer+0x4ea>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	79db      	ldrb	r3, [r3, #7]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d146      	bne.n	80050a2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	7c9b      	ldrb	r3, [r3, #18]
 8005018:	2b03      	cmp	r3, #3
 800501a:	d831      	bhi.n	8005080 <USB_HC_StartXfer+0x4c8>
 800501c:	a201      	add	r2, pc, #4	@ (adr r2, 8005024 <USB_HC_StartXfer+0x46c>)
 800501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005022:	bf00      	nop
 8005024:	08005035 	.word	0x08005035
 8005028:	08005059 	.word	0x08005059
 800502c:	08005035 	.word	0x08005035
 8005030:	08005059 	.word	0x08005059
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	3303      	adds	r3, #3
 800503a:	089b      	lsrs	r3, r3, #2
 800503c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800503e:	8afa      	ldrh	r2, [r7, #22]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005044:	b29b      	uxth	r3, r3
 8005046:	429a      	cmp	r2, r3
 8005048:	d91c      	bls.n	8005084 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	f043 0220 	orr.w	r2, r3, #32
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	619a      	str	r2, [r3, #24]
        }
        break;
 8005056:	e015      	b.n	8005084 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	3303      	adds	r3, #3
 800505e:	089b      	lsrs	r3, r3, #2
 8005060:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005062:	8afa      	ldrh	r2, [r7, #22]
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	b29b      	uxth	r3, r3
 800506e:	429a      	cmp	r2, r3
 8005070:	d90a      	bls.n	8005088 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	619a      	str	r2, [r3, #24]
        }
        break;
 800507e:	e003      	b.n	8005088 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005080:	bf00      	nop
 8005082:	e002      	b.n	800508a <USB_HC_StartXfer+0x4d2>
        break;
 8005084:	bf00      	nop
 8005086:	e000      	b.n	800508a <USB_HC_StartXfer+0x4d2>
        break;
 8005088:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	6999      	ldr	r1, [r3, #24]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	785a      	ldrb	r2, [r3, #1]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	b29b      	uxth	r3, r3
 8005098:	2000      	movs	r0, #0
 800509a:	9000      	str	r0, [sp, #0]
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f7ff f9c9 	bl	8004434 <USB_WritePacket>
  }

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3728      	adds	r7, #40	@ 0x28
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	b29b      	uxth	r3, r3
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b089      	sub	sp, #36	@ 0x24
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	460b      	mov	r3, r1
 80050d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80050de:	78fb      	ldrb	r3, [r7, #3]
 80050e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	0c9b      	lsrs	r3, r3, #18
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	4413      	add	r3, r2
 8005104:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	0fdb      	lsrs	r3, r3, #31
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	4413      	add	r3, r2
 800511a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	0fdb      	lsrs	r3, r3, #31
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b20      	cmp	r3, #32
 8005132:	d10d      	bne.n	8005150 <USB_HC_Halt+0x82>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10a      	bne.n	8005150 <USB_HC_Halt+0x82>
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d005      	beq.n	800514c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d002      	beq.n	800514c <USB_HC_Halt+0x7e>
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b03      	cmp	r3, #3
 800514a:	d101      	bne.n	8005150 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	e0d8      	b.n	8005302 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <USB_HC_Halt+0x8e>
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d173      	bne.n	8005244 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	4413      	add	r3, r2
 8005164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	0151      	lsls	r1, r2, #5
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	440a      	add	r2, r1
 8005172:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005176:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800517a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f003 0320 	and.w	r3, r3, #32
 8005184:	2b00      	cmp	r3, #0
 8005186:	d14a      	bne.n	800521e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d133      	bne.n	80051fc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	4413      	add	r3, r2
 800519c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	0151      	lsls	r1, r2, #5
 80051a6:	69fa      	ldr	r2, [r7, #28]
 80051a8:	440a      	add	r2, r1
 80051aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80051b2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	0151      	lsls	r1, r2, #5
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	440a      	add	r2, r1
 80051ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80051d2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	3301      	adds	r3, #1
 80051d8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051e0:	d82e      	bhi.n	8005240 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051f8:	d0ec      	beq.n	80051d4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051fa:	e081      	b.n	8005300 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	4413      	add	r3, r2
 8005204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	0151      	lsls	r1, r2, #5
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	440a      	add	r2, r1
 8005212:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005216:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800521a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800521c:	e070      	b.n	8005300 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	4413      	add	r3, r2
 8005226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	0151      	lsls	r1, r2, #5
 8005230:	69fa      	ldr	r2, [r7, #28]
 8005232:	440a      	add	r2, r1
 8005234:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005238:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800523c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800523e:	e05f      	b.n	8005300 <USB_HC_Halt+0x232>
            break;
 8005240:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005242:	e05d      	b.n	8005300 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	4413      	add	r3, r2
 800524c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	0151      	lsls	r1, r2, #5
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	440a      	add	r2, r1
 800525a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800525e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005262:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d133      	bne.n	80052dc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	4413      	add	r3, r2
 800527c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	0151      	lsls	r1, r2, #5
 8005286:	69fa      	ldr	r2, [r7, #28]
 8005288:	440a      	add	r2, r1
 800528a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800528e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005292:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	4413      	add	r3, r2
 800529c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	0151      	lsls	r1, r2, #5
 80052a6:	69fa      	ldr	r2, [r7, #28]
 80052a8:	440a      	add	r2, r1
 80052aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80052ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052b2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	3301      	adds	r3, #1
 80052b8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80052c0:	d81d      	bhi.n	80052fe <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052d8:	d0ec      	beq.n	80052b4 <USB_HC_Halt+0x1e6>
 80052da:	e011      	b.n	8005300 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	0151      	lsls	r1, r2, #5
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	440a      	add	r2, r1
 80052f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80052f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	e000      	b.n	8005300 <USB_HC_Halt+0x232>
          break;
 80052fe:	bf00      	nop
    }
  }

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3724      	adds	r7, #36	@ 0x24
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
	...

08005310 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005324:	2301      	movs	r3, #1
 8005326:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	04da      	lsls	r2, r3, #19
 800532c:	4b15      	ldr	r3, [pc, #84]	@ (8005384 <USB_DoPing+0x74>)
 800532e:	4013      	ands	r3, r2
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	0151      	lsls	r1, r2, #5
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	440a      	add	r2, r1
 8005338:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800533c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005340:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	4413      	add	r3, r2
 800534a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005358:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005360:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	4413      	add	r3, r2
 800536a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800536e:	461a      	mov	r2, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	371c      	adds	r7, #28
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	1ff80000 	.word	0x1ff80000

08005388 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005390:	2300      	movs	r3, #0
 8005392:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7fe ff8c 	bl	80042ba <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053a2:	2110      	movs	r1, #16
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7fe ffe5 	bl	8004374 <USB_FlushTxFifo>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff f80f 	bl	80043d8 <USB_FlushRxFifo>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80053c4:	2300      	movs	r3, #0
 80053c6:	61bb      	str	r3, [r7, #24]
 80053c8:	e01f      	b.n	800540a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80053e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80053f0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053fe:	461a      	mov	r2, r3
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	3301      	adds	r3, #1
 8005408:	61bb      	str	r3, [r7, #24]
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	2b0f      	cmp	r3, #15
 800540e:	d9dc      	bls.n	80053ca <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005410:	2300      	movs	r3, #0
 8005412:	61bb      	str	r3, [r7, #24]
 8005414:	e034      	b.n	8005480 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	4413      	add	r3, r2
 800541e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800542c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005434:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800543c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	4413      	add	r3, r2
 8005446:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800544a:	461a      	mov	r2, r3
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3301      	adds	r3, #1
 8005454:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800545c:	d80c      	bhi.n	8005478 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	4413      	add	r3, r2
 8005466:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005470:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005474:	d0ec      	beq.n	8005450 <USB_StopHost+0xc8>
 8005476:	e000      	b.n	800547a <USB_StopHost+0xf2>
        break;
 8005478:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	3301      	adds	r3, #1
 800547e:	61bb      	str	r3, [r7, #24]
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	2b0f      	cmp	r3, #15
 8005484:	d9c7      	bls.n	8005416 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800548c:	461a      	mov	r2, r3
 800548e:	f04f 33ff 	mov.w	r3, #4294967295
 8005492:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f04f 32ff 	mov.w	r2, #4294967295
 800549a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7fe fefb 	bl	8004298 <USB_EnableGlobalInt>

  return ret;
 80054a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3720      	adds	r7, #32
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80054ac:	b590      	push	{r4, r7, lr}
 80054ae:	b08b      	sub	sp, #44	@ 0x2c
 80054b0:	af04      	add	r7, sp, #16
 80054b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint16_t ep_mps;
  uint8_t max_ep;
  uint8_t num = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80054be:	7919      	ldrb	r1, [r3, #4]
 80054c0:	23ff      	movs	r3, #255	@ 0xff
 80054c2:	2201      	movs	r2, #1
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f001 f836 	bl	8006536 <USBH_FindInterface>
 80054ca:	4603      	mov	r3, r0
 80054cc:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80054ce:	7dbb      	ldrb	r3, [r7, #22]
 80054d0:	2bff      	cmp	r3, #255	@ 0xff
 80054d2:	d002      	beq.n	80054da <USBH_HID_InterfaceInit+0x2e>
 80054d4:	7dbb      	ldrb	r3, [r7, #22]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d901      	bls.n	80054de <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80054da:	2302      	movs	r3, #2
 80054dc:	e122      	b.n	8005724 <USBH_HID_InterfaceInit+0x278>
  }

  status = USBH_SelectInterface(phost, interface);
 80054de:	7dbb      	ldrb	r3, [r7, #22]
 80054e0:	4619      	mov	r1, r3
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f001 f80b 	bl	80064fe <USBH_SelectInterface>
 80054e8:	4603      	mov	r3, r0
 80054ea:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 80054ec:	7d7b      	ldrb	r3, [r7, #21]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 80054f2:	2302      	movs	r3, #2
 80054f4:	e116      	b.n	8005724 <USBH_HID_InterfaceInit+0x278>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80054fc:	2034      	movs	r0, #52	@ 0x34
 80054fe:	f002 fef1 	bl	80082e4 <malloc>
 8005502:	4603      	mov	r3, r0
 8005504:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 8005516:	2302      	movs	r3, #2
 8005518:	e104      	b.n	8005724 <USBH_HID_InterfaceInit+0x278>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800551a:	2234      	movs	r2, #52	@ 0x34
 800551c:	2100      	movs	r1, #0
 800551e:	6938      	ldr	r0, [r7, #16]
 8005520:	f002 ff9e 	bl	8008460 <memset>

  HID_Handle->state = USBH_HID_ERROR;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2207      	movs	r2, #7
 8005528:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800552a:	7dbb      	ldrb	r3, [r7, #22]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	211a      	movs	r1, #26
 8005530:	fb01 f303 	mul.w	r3, r1, r3
 8005534:	4413      	add	r3, r2
 8005536:	f203 3349 	addw	r3, r3, #841	@ 0x349
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d103      	bne.n	8005548 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	4a7a      	ldr	r2, [pc, #488]	@ (800572c <USBH_HID_InterfaceInit+0x280>)
 8005544:	631a      	str	r2, [r3, #48]	@ 0x30
 8005546:	e010      	b.n	800556a <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8005548:	7dbb      	ldrb	r3, [r7, #22]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	211a      	movs	r1, #26
 800554e:	fb01 f303 	mul.w	r3, r1, r3
 8005552:	4413      	add	r3, r2
 8005554:	f203 3349 	addw	r3, r3, #841	@ 0x349
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	2b02      	cmp	r3, #2
 800555c:	d103      	bne.n	8005566 <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	4a73      	ldr	r2, [pc, #460]	@ (8005730 <USBH_HID_InterfaceInit+0x284>)
 8005562:	631a      	str	r2, [r3, #48]	@ 0x30
 8005564:	e001      	b.n	800556a <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8005566:	2302      	movs	r3, #2
 8005568:	e0dc      	b.n	8005724 <USBH_HID_InterfaceInit+0x278>
  }

  HID_Handle->state     = USBH_HID_INIT;
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	2200      	movs	r2, #0
 800556e:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = USBH_HID_REQ_INIT;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	2200      	movs	r2, #0
 8005574:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005576:	7dbb      	ldrb	r3, [r7, #22]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	211a      	movs	r1, #26
 800557c:	fb01 f303 	mul.w	r3, r1, r3
 8005580:	4413      	add	r3, r2
 8005582:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005586:	781a      	ldrb	r2, [r3, #0]
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800558c:	7dbb      	ldrb	r3, [r7, #22]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	211a      	movs	r1, #26
 8005592:	fb01 f303 	mul.w	r3, r1, r3
 8005596:	4413      	add	r3, r2
 8005598:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800559c:	881a      	ldrh	r2, [r3, #0]
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80055a2:	7dbb      	ldrb	r3, [r7, #22]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	211a      	movs	r1, #26
 80055a8:	fb01 f303 	mul.w	r3, r1, r3
 80055ac:	4413      	add	r3, r2
 80055ae:	f203 3352 	addw	r3, r3, #850	@ 0x352
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	461a      	mov	r2, r3
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll < HID_MIN_POLL)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	8b9b      	ldrh	r3, [r3, #28]
 80055be:	2b09      	cmp	r3, #9
 80055c0:	d802      	bhi.n	80055c8 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	220a      	movs	r2, #10
 80055c6:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 80055c8:	7dbb      	ldrb	r3, [r7, #22]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	211a      	movs	r1, #26
 80055ce:	fb01 f303 	mul.w	r3, r1, r3
 80055d2:	4413      	add	r3, r2
 80055d4:	f203 3346 	addw	r3, r3, #838	@ 0x346
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	bf28      	it	cs
 80055de:	2302      	movcs	r3, #2
 80055e0:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 80055e2:	2300      	movs	r3, #0
 80055e4:	75fb      	strb	r3, [r7, #23]
 80055e6:	e097      	b.n	8005718 <USBH_HID_InterfaceInit+0x26c>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 80055e8:	7dbb      	ldrb	r3, [r7, #22]
 80055ea:	7df9      	ldrb	r1, [r7, #23]
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	3101      	adds	r1, #1
 80055f0:	00c9      	lsls	r1, r1, #3
 80055f2:	201a      	movs	r0, #26
 80055f4:	fb00 f303 	mul.w	r3, r0, r3
 80055f8:	440b      	add	r3, r1
 80055fa:	4413      	add	r3, r2
 80055fc:	f203 3346 	addw	r3, r3, #838	@ 0x346
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	b25b      	sxtb	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	da42      	bge.n	800568e <USBH_HID_InterfaceInit+0x1e2>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8005608:	7dbb      	ldrb	r3, [r7, #22]
 800560a:	7df9      	ldrb	r1, [r7, #23]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	3101      	adds	r1, #1
 8005610:	00c9      	lsls	r1, r1, #3
 8005612:	201a      	movs	r0, #26
 8005614:	fb00 f303 	mul.w	r3, r0, r3
 8005618:	440b      	add	r3, r1
 800561a:	4413      	add	r3, r2
 800561c:	f203 3346 	addw	r3, r3, #838	@ 0x346
 8005620:	781a      	ldrb	r2, [r3, #0]
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	791b      	ldrb	r3, [r3, #4]
 800562a:	4619      	mov	r1, r3
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f002 faec 	bl	8007c0a <USBH_AllocPipe>
 8005632:	4603      	mov	r3, r0
 8005634:	461a      	mov	r2, r3
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	705a      	strb	r2, [r3, #1]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800563a:	7dbb      	ldrb	r3, [r7, #22]
 800563c:	7df9      	ldrb	r1, [r7, #23]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	3101      	adds	r1, #1
 8005642:	00c9      	lsls	r1, r1, #3
 8005644:	201a      	movs	r0, #26
 8005646:	fb00 f303 	mul.w	r3, r0, r3
 800564a:	440b      	add	r3, r1
 800564c:	4413      	add	r3, r2
 800564e:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	7859      	ldrb	r1, [r3, #1]
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	7918      	ldrb	r0, [r3, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800566a:	89ba      	ldrh	r2, [r7, #12]
 800566c:	9202      	str	r2, [sp, #8]
 800566e:	2203      	movs	r2, #3
 8005670:	9201      	str	r2, [sp, #4]
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	4623      	mov	r3, r4
 8005676:	4602      	mov	r2, r0
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f002 fa97 	bl	8007bac <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	785b      	ldrb	r3, [r3, #1]
 8005682:	2200      	movs	r2, #0
 8005684:	4619      	mov	r1, r3
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f002 fda6 	bl	80081d8 <USBH_LL_SetToggle>
 800568c:	e041      	b.n	8005712 <USBH_HID_InterfaceInit+0x266>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800568e:	7dbb      	ldrb	r3, [r7, #22]
 8005690:	7df9      	ldrb	r1, [r7, #23]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	3101      	adds	r1, #1
 8005696:	00c9      	lsls	r1, r1, #3
 8005698:	201a      	movs	r0, #26
 800569a:	fb00 f303 	mul.w	r3, r0, r3
 800569e:	440b      	add	r3, r1
 80056a0:	4413      	add	r3, r2
 80056a2:	f203 3346 	addw	r3, r3, #838	@ 0x346
 80056a6:	781a      	ldrb	r2, [r3, #0]
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe = USBH_AllocPipe(phost, HID_Handle->OutEp);
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	78db      	ldrb	r3, [r3, #3]
 80056b0:	4619      	mov	r1, r3
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f002 faa9 	bl	8007c0a <USBH_AllocPipe>
 80056b8:	4603      	mov	r3, r0
 80056ba:	461a      	mov	r2, r3
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	701a      	strb	r2, [r3, #0]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 80056c0:	7dbb      	ldrb	r3, [r7, #22]
 80056c2:	7df9      	ldrb	r1, [r7, #23]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	3101      	adds	r1, #1
 80056c8:	00c9      	lsls	r1, r1, #3
 80056ca:	201a      	movs	r0, #26
 80056cc:	fb00 f303 	mul.w	r3, r0, r3
 80056d0:	440b      	add	r3, r1
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	7819      	ldrb	r1, [r3, #0]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	78d8      	ldrb	r0, [r3, #3]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80056f0:	89ba      	ldrh	r2, [r7, #12]
 80056f2:	9202      	str	r2, [sp, #8]
 80056f4:	2203      	movs	r2, #3
 80056f6:	9201      	str	r2, [sp, #4]
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	4623      	mov	r3, r4
 80056fc:	4602      	mov	r2, r0
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f002 fa54 	bl	8007bac <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2200      	movs	r2, #0
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f002 fd63 	bl	80081d8 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8005712:	7dfb      	ldrb	r3, [r7, #23]
 8005714:	3301      	adds	r3, #1
 8005716:	75fb      	strb	r3, [r7, #23]
 8005718:	7dfa      	ldrb	r2, [r7, #23]
 800571a:	7bfb      	ldrb	r3, [r7, #15]
 800571c:	429a      	cmp	r2, r3
 800571e:	f4ff af63 	bcc.w	80055e8 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	bd90      	pop	{r4, r7, pc}
 800572c:	08005e51 	.word	0x08005e51
 8005730:	080060a1 	.word	0x080060a1

08005734 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	785b      	ldrb	r3, [r3, #1]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00e      	beq.n	800576c <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	785b      	ldrb	r3, [r3, #1]
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f002 fa48 	bl	8007bea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	785b      	ldrb	r3, [r3, #1]
 800575e:	4619      	mov	r1, r3
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f002 fa73 	bl	8007c4c <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00e      	beq.n	8005792 <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	4619      	mov	r1, r3
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f002 fa35 	bl	8007bea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	4619      	mov	r1, r3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f002 fa60 	bl	8007c4c <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00b      	beq.n	80057b6 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f002 fda4 	bl	80082f4 <free>
    phost->pActiveClass->pData = 0U;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80057b2:	2200      	movs	r2, #0
 80057b4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 80057c8:	2301      	movs	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	795b      	ldrb	r3, [r3, #5]
 80057de:	2b05      	cmp	r3, #5
 80057e0:	d860      	bhi.n	80058a4 <USBH_HID_ClassRequest+0xe4>
 80057e2:	a201      	add	r2, pc, #4	@ (adr r2, 80057e8 <USBH_HID_ClassRequest+0x28>)
 80057e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e8:	08005801 	.word	0x08005801
 80057ec:	080058a5 	.word	0x080058a5
 80057f0:	0800581b 	.word	0x0800581b
 80057f4:	08005801 	.word	0x08005801
 80057f8:	08005845 	.word	0x08005845
 80057fc:	0800586f 	.word	0x0800586f
  {
    case USBH_HID_REQ_INIT:
    case USBH_HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	331c      	adds	r3, #28
 800580a:	4619      	mov	r1, r3
 800580c:	4610      	mov	r0, r2
 800580e:	f000 f9e1 	bl	8005bd4 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = USBH_HID_REQ_GET_REPORT_DESC;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2202      	movs	r2, #2
 8005816:	715a      	strb	r2, [r3, #5]

      break;
 8005818:	e04b      	b.n	80058b2 <USBH_HID_ClassRequest+0xf2>
    case USBH_HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f93e 	bl	8005aa2 <USBH_HID_GetHIDReportDescriptor>
 8005826:	4603      	mov	r3, r0
 8005828:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800582a:	7bbb      	ldrb	r3, [r7, #14]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d103      	bne.n	8005838 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = USBH_HID_REQ_SET_IDLE;
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2204      	movs	r2, #4
 8005834:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 8005836:	e037      	b.n	80058a8 <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8005838:	7bbb      	ldrb	r3, [r7, #14]
 800583a:	2b03      	cmp	r3, #3
 800583c:	d134      	bne.n	80058a8 <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 800583e:	2302      	movs	r3, #2
 8005840:	73fb      	strb	r3, [r7, #15]
      break;
 8005842:	e031      	b.n	80058a8 <USBH_HID_ClassRequest+0xe8>

    case USBH_HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8005844:	2200      	movs	r2, #0
 8005846:	2100      	movs	r1, #0
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f949 	bl	8005ae0 <USBH_HID_SetIdle>
 800584e:	4603      	mov	r3, r0
 8005850:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 8005852:	7bbb      	ldrb	r3, [r7, #14]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d103      	bne.n	8005860 <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2205      	movs	r2, #5
 800585c:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 800585e:	e025      	b.n	80058ac <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8005860:	7bbb      	ldrb	r3, [r7, #14]
 8005862:	2b03      	cmp	r3, #3
 8005864:	d122      	bne.n	80058ac <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2205      	movs	r2, #5
 800586a:	715a      	strb	r2, [r3, #5]
      break;
 800586c:	e01e      	b.n	80058ac <USBH_HID_ClassRequest+0xec>

    case USBH_HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 800586e:	2100      	movs	r1, #0
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f989 	bl	8005b88 <USBH_HID_SetProtocol>
 8005876:	4603      	mov	r3, r0
 8005878:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800587a:	7bbb      	ldrb	r3, [r7, #14]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10b      	bne.n	8005898 <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_IDLE;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2201      	movs	r2, #1
 8005884:	715a      	strb	r2, [r3, #5]

        /* all requests performed */
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800588c:	2102      	movs	r1, #2
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	4798      	blx	r3
        status = USBH_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 8005896:	e00b      	b.n	80058b0 <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8005898:	7bbb      	ldrb	r3, [r7, #14]
 800589a:	2b03      	cmp	r3, #3
 800589c:	d108      	bne.n	80058b0 <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 800589e:	2302      	movs	r3, #2
 80058a0:	73fb      	strb	r3, [r7, #15]
      break;
 80058a2:	e005      	b.n	80058b0 <USBH_HID_ClassRequest+0xf0>

    case USBH_HID_REQ_IDLE:
    default:
      break;
 80058a4:	bf00      	nop
 80058a6:	e004      	b.n	80058b2 <USBH_HID_ClassRequest+0xf2>
      break;
 80058a8:	bf00      	nop
 80058aa:	e002      	b.n	80058b2 <USBH_HID_ClassRequest+0xf2>
      break;
 80058ac:	bf00      	nop
 80058ae:	e000      	b.n	80058b2 <USBH_HID_ClassRequest+0xf2>
      break;
 80058b0:	bf00      	nop
  }

  return status;
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	789b      	ldrb	r3, [r3, #2]
 80058d6:	2b06      	cmp	r3, #6
 80058d8:	f200 80b8 	bhi.w	8005a4c <USBH_HID_Process+0x190>
 80058dc:	a201      	add	r2, pc, #4	@ (adr r2, 80058e4 <USBH_HID_Process+0x28>)
 80058de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e2:	bf00      	nop
 80058e4:	08005901 	.word	0x08005901
 80058e8:	08005927 	.word	0x08005927
 80058ec:	08005a4d 	.word	0x08005a4d
 80058f0:	08005a4d 	.word	0x08005a4d
 80058f4:	08005997 	.word	0x08005997
 80058f8:	08005981 	.word	0x08005981
 80058fc:	080059c5 	.word	0x080059c5
  {
    case USBH_HID_INIT:
      status = HID_Handle->Init(phost);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	4798      	blx	r3
 8005908:	4603      	mov	r3, r0
 800590a:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800590c:	7dfb      	ldrb	r3, [r7, #23]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <USBH_HID_Process+0x5e>
      {
        HID_Handle->state = USBH_HID_IDLE;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	2201      	movs	r2, #1
 8005916:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005918:	e09d      	b.n	8005a56 <USBH_HID_Process+0x19a>
        HID_Handle->state = USBH_HID_ERROR;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2207      	movs	r2, #7
 800591e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8005920:	2302      	movs	r3, #2
 8005922:	75fb      	strb	r3, [r7, #23]
      break;
 8005924:	e097      	b.n	8005a56 <USBH_HID_Process+0x19a>

    case USBH_HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	695a      	ldr	r2, [r3, #20]
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	8b1b      	ldrh	r3, [r3, #24]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	4613      	mov	r3, r2
 8005934:	2200      	movs	r2, #0
 8005936:	2101      	movs	r1, #1
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f8f9 	bl	8005b30 <USBH_HID_GetReport>
 800593e:	4603      	mov	r3, r0
 8005940:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 8005942:	7dfb      	ldrb	r3, [r7, #23]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d103      	bne.n	8005950 <USBH_HID_Process+0x94>
      {
        HID_Handle->state = USBH_HID_SYNC;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	2205      	movs	r2, #5
 800594c:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800594e:	e082      	b.n	8005a56 <USBH_HID_Process+0x19a>
      else if (status == USBH_BUSY)
 8005950:	7dfb      	ldrb	r3, [r7, #23]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d105      	bne.n	8005962 <USBH_HID_Process+0xa6>
        HID_Handle->state = USBH_HID_IDLE;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	2201      	movs	r2, #1
 800595a:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	75fb      	strb	r3, [r7, #23]
      break;
 8005960:	e079      	b.n	8005a56 <USBH_HID_Process+0x19a>
      else if (status == USBH_NOT_SUPPORTED)
 8005962:	7dfb      	ldrb	r3, [r7, #23]
 8005964:	2b03      	cmp	r3, #3
 8005966:	d105      	bne.n	8005974 <USBH_HID_Process+0xb8>
        HID_Handle->state = USBH_HID_SYNC;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	2205      	movs	r2, #5
 800596c:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	75fb      	strb	r3, [r7, #23]
      break;
 8005972:	e070      	b.n	8005a56 <USBH_HID_Process+0x19a>
        HID_Handle->state = USBH_HID_ERROR;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	2207      	movs	r2, #7
 8005978:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800597a:	2302      	movs	r3, #2
 800597c:	75fb      	strb	r3, [r7, #23]
      break;
 800597e:	e06a      	b.n	8005a56 <USBH_HID_Process+0x19a>

    case USBH_HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d060      	beq.n	8005a50 <USBH_HID_Process+0x194>
      {
        HID_Handle->state = USBH_HID_GET_DATA;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	2204      	movs	r2, #4
 8005992:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005994:	e05c      	b.n	8005a50 <USBH_HID_Process+0x194>

    case USBH_HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	785b      	ldrb	r3, [r3, #1]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f002 f8e2 	bl	8007b6e <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = USBH_HID_POLL;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	2206      	movs	r2, #6
 80059ae:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      break;
 80059c2:	e048      	b.n	8005a56 <USBH_HID_Process+0x19a>

    case USBH_HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	785b      	ldrb	r3, [r3, #1]
 80059c8:	4619      	mov	r1, r3
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f002 fbda 	bl	8008184 <USBH_LL_GetURBState>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d124      	bne.n	8005a20 <USBH_HID_Process+0x164>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	785b      	ldrb	r3, [r3, #1]
 80059da:	4619      	mov	r1, r3
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f002 fb3f 	bl	8008060 <USBH_LL_GetLastXferSize>
 80059e2:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U) && (HID_Handle->fifo.buf != NULL))
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d132      	bne.n	8005a54 <USBH_HID_Process+0x198>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d02f      	beq.n	8005a54 <USBH_HID_Process+0x198>
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d02b      	beq.n	8005a54 <USBH_HID_Process+0x198>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f103 0008 	add.w	r0, r3, #8
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	6959      	ldr	r1, [r3, #20]
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	8b1b      	ldrh	r3, [r3, #24]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f000 f9cc 	bl	8005da8 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          USBH_HID_EventCallback(phost);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7fa fd4d 	bl	80004b8 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = USBH_HID_GET_DATA;
          }
        }
      }
      break;
 8005a1e:	e019      	b.n	8005a54 <USBH_HID_Process+0x198>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	785b      	ldrb	r3, [r3, #1]
 8005a24:	4619      	mov	r1, r3
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f002 fbac 	bl	8008184 <USBH_LL_GetURBState>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b05      	cmp	r3, #5
 8005a30:	d110      	bne.n	8005a54 <USBH_HID_Process+0x198>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	7e9b      	ldrb	r3, [r3, #26]
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f001 fb55 	bl	80070e8 <USBH_ClrFeature>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d107      	bne.n	8005a54 <USBH_HID_Process+0x198>
            HID_Handle->state = USBH_HID_GET_DATA;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	2204      	movs	r2, #4
 8005a48:	709a      	strb	r2, [r3, #2]
      break;
 8005a4a:	e003      	b.n	8005a54 <USBH_HID_Process+0x198>

    default:
      break;
 8005a4c:	bf00      	nop
 8005a4e:	e002      	b.n	8005a56 <USBH_HID_Process+0x19a>
      break;
 8005a50:	bf00      	nop
 8005a52:	e000      	b.n	8005a56 <USBH_HID_Process+0x19a>
      break;
 8005a54:	bf00      	nop
  }

  return status;
 8005a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == USBH_HID_POLL)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	789b      	ldrb	r3, [r3, #2]
 8005a76:	2b06      	cmp	r3, #6
 8005a78:	d10c      	bne.n	8005a94 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	8b92      	ldrh	r2, [r2, #28]
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d302      	bcc.n	8005a94 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = USBH_HID_GET_DATA;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2204      	movs	r2, #4
 8005a92:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b086      	sub	sp, #24
 8005aa6:	af02      	add	r7, sp, #8
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	807b      	strh	r3, [r7, #2]

  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8005aae:	887b      	ldrh	r3, [r7, #2]
 8005ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ab4:	d901      	bls.n	8005aba <USBH_HID_GetHIDReportDescriptor+0x18>
  {
    USBH_ErrLog("Control error: Get HID Report Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e00e      	b.n	8005ad8 <USBH_HID_GetHIDReportDescriptor+0x36>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8005ac0:	887b      	ldrh	r3, [r7, #2]
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 8005aca:	2101      	movs	r1, #1
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f001 fa6b 	bl	8006fa8 <USBH_GetDescriptor>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	70fb      	strb	r3, [r7, #3]
 8005aec:	4613      	mov	r3, r2
 8005aee:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2221      	movs	r2, #33	@ 0x21
 8005af4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	220a      	movs	r2, #10
 8005afa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	78bb      	ldrb	r3, [r7, #2]
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2100      	movs	r1, #0
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f001 fe16 	bl	8007752 <USBH_CtlReq>
 8005b26:	4603      	mov	r3, r0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	607b      	str	r3, [r7, #4]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	72fb      	strb	r3, [r7, #11]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	22a1      	movs	r2, #161	@ 0xa1
 8005b46:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 8005b4e:	7afb      	ldrb	r3, [r7, #11]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	7abb      	ldrb	r3, [r7, #10]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8005b68:	7e3b      	ldrb	r3, [r7, #24]
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8005b70:	7e3b      	ldrb	r3, [r7, #24]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	461a      	mov	r2, r3
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f001 fdea 	bl	8007752 <USBH_CtlReq>
 8005b7e:	4603      	mov	r3, r0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2221      	movs	r2, #33	@ 0x21
 8005b98:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	220b      	movs	r2, #11
 8005b9e:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	825a      	strh	r2, [r3, #18]
 8005bac:	e002      	b.n	8005bb4 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f001 fdc4 	bl	8007752 <USBH_CtlReq>
 8005bca:	4603      	mov	r3, r0

}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	3302      	adds	r3, #2
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	461a      	mov	r2, r3
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	3303      	adds	r3, #3
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	021b      	lsls	r3, r3, #8
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 8005bf8:	897b      	ldrh	r3, [r7, #10]
 8005bfa:	2b09      	cmp	r3, #9
 8005bfc:	d941      	bls.n	8005c82 <USBH_HID_ParseHIDDesc+0xae>
  {
    ptr = USB_LEN_CFG_DESC;
 8005bfe:	2309      	movs	r3, #9
 8005c00:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 8005c02:	e03a      	b.n	8005c7a <USBH_HID_ParseHIDDesc+0xa6>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005c04:	f107 0308 	add.w	r3, r7, #8
 8005c08:	4619      	mov	r1, r3
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f001 fd87 	bl	800771e <USBH_GetNextDesc>
 8005c10:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	785b      	ldrb	r3, [r3, #1]
 8005c16:	2b21      	cmp	r3, #33	@ 0x21
 8005c18:	d12f      	bne.n	8005c7a <USBH_HID_ParseHIDDesc+0xa6>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	781a      	ldrb	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	785a      	ldrb	r2, [r3, #1]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3302      	adds	r3, #2
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	461a      	mov	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3303      	adds	r3, #3
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	021b      	lsls	r3, r3, #8
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	791a      	ldrb	r2, [r3, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	795a      	ldrb	r2, [r3, #5]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	799a      	ldrb	r2, [r3, #6]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	3307      	adds	r3, #7
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3308      	adds	r3, #8
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	811a      	strh	r2, [r3, #8]
        break;
 8005c76:	bf00      	nop
      }
    }
  }
}
 8005c78:	e003      	b.n	8005c82 <USBH_HID_ParseHIDDesc+0xae>
    while (ptr < CfgDescLen)
 8005c7a:	893b      	ldrh	r3, [r7, #8]
 8005c7c:	897a      	ldrh	r2, [r7, #10]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d8c0      	bhi.n	8005c04 <USBH_HID_ParseHIDDesc+0x30>
}
 8005c82:	bf00      	nop
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 8005c92:	23ff      	movs	r3, #255	@ 0xff
 8005c94:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b0b      	cmp	r3, #11
 8005c9e:	d117      	bne.n	8005cd0 <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	231a      	movs	r3, #26
 8005cac:	fb01 f303 	mul.w	r3, r1, r3
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f203 3349 	addw	r3, r3, #841	@ 0x349
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8005cba:	7bbb      	ldrb	r3, [r7, #14]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d102      	bne.n	8005cc6 <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	73fb      	strb	r3, [r7, #15]
 8005cc4:	e004      	b.n	8005cd0 <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 8005cc6:	7bbb      	ldrb	r3, [r7, #14]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d101      	bne.n	8005cd0 <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b085      	sub	sp, #20
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	729a      	strb	r2, [r3, #10]
  f->size = size;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	88fa      	ldrh	r2, [r7, #6]
 8005d02:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	601a      	str	r2, [r3, #0]
}
 8005d0a:	bf00      	nop
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b087      	sub	sp, #28
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	4613      	mov	r3, r2
 8005d22:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	7a9b      	ldrb	r3, [r3, #10]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d131      	bne.n	8005d94 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2201      	movs	r2, #1
 8005d34:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8005d36:	2300      	movs	r3, #0
 8005d38:	82fb      	strh	r3, [r7, #22]
 8005d3a:	e027      	b.n	8005d8c <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	88da      	ldrh	r2, [r3, #6]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	889b      	ldrh	r3, [r3, #4]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d019      	beq.n	8005d7c <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	88d2      	ldrh	r2, [r2, #6]
 8005d50:	441a      	add	r2, r3
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1c59      	adds	r1, r3, #1
 8005d56:	6139      	str	r1, [r7, #16]
 8005d58:	7812      	ldrb	r2, [r2, #0]
 8005d5a:	701a      	strb	r2, [r3, #0]
        f->tail++;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	88db      	ldrh	r3, [r3, #6]
 8005d60:	3301      	adds	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	88da      	ldrh	r2, [r3, #6]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	891b      	ldrh	r3, [r3, #8]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d108      	bne.n	8005d86 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	80da      	strh	r2, [r3, #6]
 8005d7a:	e004      	b.n	8005d86 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	729a      	strb	r2, [r3, #10]
        return i;
 8005d82:	8afb      	ldrh	r3, [r7, #22]
 8005d84:	e00a      	b.n	8005d9c <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 8005d86:	8afb      	ldrh	r3, [r7, #22]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	82fb      	strh	r3, [r7, #22]
 8005d8c:	8afa      	ldrh	r2, [r7, #22]
 8005d8e:	88fb      	ldrh	r3, [r7, #6]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d3d3      	bcc.n	8005d3c <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8005d9a:	88fb      	ldrh	r3, [r7, #6]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	371c      	adds	r7, #28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	4613      	mov	r3, r2
 8005db4:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	7a9b      	ldrb	r3, [r3, #10]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d13c      	bne.n	8005e3c <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8005dc8:	2300      	movs	r3, #0
 8005dca:	82fb      	strh	r3, [r7, #22]
 8005dcc:	e032      	b.n	8005e34 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	889b      	ldrh	r3, [r3, #4]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	88d2      	ldrh	r2, [r2, #6]
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d00a      	beq.n	8005df2 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	889b      	ldrh	r3, [r3, #4]
 8005de0:	3301      	adds	r3, #1
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d108      	bne.n	8005dfc <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	88db      	ldrh	r3, [r3, #6]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d104      	bne.n	8005dfc <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	729a      	strb	r2, [r3, #10]
        return i;
 8005df8:	8afb      	ldrh	r3, [r7, #22]
 8005dfa:	e023      	b.n	8005e44 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	613a      	str	r2, [r7, #16]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	6812      	ldr	r2, [r2, #0]
 8005e06:	68f9      	ldr	r1, [r7, #12]
 8005e08:	8889      	ldrh	r1, [r1, #4]
 8005e0a:	440a      	add	r2, r1
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	7013      	strb	r3, [r2, #0]
        f->head++;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	889b      	ldrh	r3, [r3, #4]
 8005e14:	3301      	adds	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	889a      	ldrh	r2, [r3, #4]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	891b      	ldrh	r3, [r3, #8]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d102      	bne.n	8005e2e <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 8005e2e:	8afb      	ldrh	r3, [r7, #22]
 8005e30:	3301      	adds	r3, #1
 8005e32:	82fb      	strh	r3, [r7, #22]
 8005e34:	8afa      	ldrh	r2, [r7, #22]
 8005e36:	88fb      	ldrh	r3, [r7, #6]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d3c8      	bcc.n	8005dce <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8005e42:	88fb      	ldrh	r3, [r7, #6]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 8005e62:	4b22      	ldr	r3, [pc, #136]	@ (8005eec <USBH_HID_KeybdInit+0x9c>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 8005e68:	4b20      	ldr	r3, [pc, #128]	@ (8005eec <USBH_HID_KeybdInit+0x9c>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 8005e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8005eec <USBH_HID_KeybdInit+0x9c>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 8005e74:	4b1d      	ldr	r3, [pc, #116]	@ (8005eec <USBH_HID_KeybdInit+0x9c>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 8005e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8005eec <USBH_HID_KeybdInit+0x9c>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 8005e80:	4b1a      	ldr	r3, [pc, #104]	@ (8005eec <USBH_HID_KeybdInit+0x9c>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 8005e86:	4b19      	ldr	r3, [pc, #100]	@ (8005eec <USBH_HID_KeybdInit+0x9c>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 8005e8c:	4b17      	ldr	r3, [pc, #92]	@ (8005eec <USBH_HID_KeybdInit+0x9c>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	721a      	strb	r2, [r3, #8]

  for (x = 0U; x < sizeof(keybd_report_data); x++)
 8005e92:	2300      	movs	r3, #0
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	e00c      	b.n	8005eb2 <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 8005e98:	4a15      	ldr	r2, [pc, #84]	@ (8005ef0 <USBH_HID_KeybdInit+0xa0>)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	701a      	strb	r2, [r3, #0]
    keybd_rx_report_buf[x] = 0U;
 8005ea2:	4a14      	ldr	r2, [pc, #80]	@ (8005ef4 <USBH_HID_KeybdInit+0xa4>)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	701a      	strb	r2, [r3, #0]
  for (x = 0U; x < sizeof(keybd_report_data); x++)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b07      	cmp	r3, #7
 8005eb6:	d9ef      	bls.n	8005e98 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	8b1b      	ldrh	r3, [r3, #24]
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d902      	bls.n	8005ec6 <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2208      	movs	r2, #8
 8005ec4:	831a      	strh	r2, [r3, #24]
  }

  HID_Handle->pData = keybd_rx_report_buf;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8005ef4 <USBH_HID_KeybdInit+0xa4>)
 8005eca:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f103 0008 	add.w	r0, r3, #8
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8005ed8:	2250      	movs	r2, #80	@ 0x50
 8005eda:	4619      	mov	r1, r3
 8005edc:	f7ff feff 	bl	8005cde <USBH_HID_FifoInit>
  }

  return USBH_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	200000e8 	.word	0x200000e8
 8005ef0:	20000100 	.word	0x20000100
 8005ef4:	200000f8 	.word	0x200000f8

08005ef8 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f80d 	bl	8005f20 <USBH_HID_KeybdDecode>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 8005f0c:	4b03      	ldr	r3, [pc, #12]	@ (8005f1c <USBH_HID_GetKeybdInfo+0x24>)
 8005f0e:	e000      	b.n	8005f12 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 8005f10:	2300      	movs	r3, #0
  }
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	200000e8 	.word	0x200000e8

08005f20 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	60bb      	str	r3, [r7, #8]

  if ((HID_Handle->length == 0U) || (HID_Handle->fifo.buf == NULL))
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	8b1b      	ldrh	r3, [r3, #24]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <USBH_HID_KeybdDecode+0x22>
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <USBH_HID_KeybdDecode+0x26>
  {
    return USBH_FAIL;
 8005f42:	2302      	movs	r3, #2
 8005f44:	e066      	b.n	8006014 <USBH_HID_KeybdDecode+0xf4>
  }

  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f103 0008 	add.w	r0, r3, #8
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	8b1b      	ldrh	r3, [r3, #24]
 8005f50:	461a      	mov	r2, r3
 8005f52:	4932      	ldr	r1, [pc, #200]	@ (800601c <USBH_HID_KeybdDecode+0xfc>)
 8005f54:	f7ff fedf 	bl	8005d16 <USBH_HID_FifoRead>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	8b1b      	ldrh	r3, [r3, #24]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d156      	bne.n	8006012 <USBH_HID_KeybdDecode+0xf2>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 8005f64:	2100      	movs	r1, #0
 8005f66:	482e      	ldr	r0, [pc, #184]	@ (8006020 <USBH_HID_KeybdDecode+0x100>)
 8005f68:	f000 f958 	bl	800621c <HID_ReadItem>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	b2da      	uxtb	r2, r3
 8005f70:	4b2c      	ldr	r3, [pc, #176]	@ (8006024 <USBH_HID_KeybdDecode+0x104>)
 8005f72:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 8005f74:	2100      	movs	r1, #0
 8005f76:	482c      	ldr	r0, [pc, #176]	@ (8006028 <USBH_HID_KeybdDecode+0x108>)
 8005f78:	f000 f950 	bl	800621c <HID_ReadItem>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	4b28      	ldr	r3, [pc, #160]	@ (8006024 <USBH_HID_KeybdDecode+0x104>)
 8005f82:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 8005f84:	2100      	movs	r1, #0
 8005f86:	4829      	ldr	r0, [pc, #164]	@ (800602c <USBH_HID_KeybdDecode+0x10c>)
 8005f88:	f000 f948 	bl	800621c <HID_ReadItem>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	4b24      	ldr	r3, [pc, #144]	@ (8006024 <USBH_HID_KeybdDecode+0x104>)
 8005f92:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 8005f94:	2100      	movs	r1, #0
 8005f96:	4826      	ldr	r0, [pc, #152]	@ (8006030 <USBH_HID_KeybdDecode+0x110>)
 8005f98:	f000 f940 	bl	800621c <HID_ReadItem>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	4b20      	ldr	r3, [pc, #128]	@ (8006024 <USBH_HID_KeybdDecode+0x104>)
 8005fa2:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	4823      	ldr	r0, [pc, #140]	@ (8006034 <USBH_HID_KeybdDecode+0x114>)
 8005fa8:	f000 f938 	bl	800621c <HID_ReadItem>
 8005fac:	4603      	mov	r3, r0
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8006024 <USBH_HID_KeybdDecode+0x104>)
 8005fb2:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	4820      	ldr	r0, [pc, #128]	@ (8006038 <USBH_HID_KeybdDecode+0x118>)
 8005fb8:	f000 f930 	bl	800621c <HID_ReadItem>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	4b18      	ldr	r3, [pc, #96]	@ (8006024 <USBH_HID_KeybdDecode+0x104>)
 8005fc2:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	481d      	ldr	r0, [pc, #116]	@ (800603c <USBH_HID_KeybdDecode+0x11c>)
 8005fc8:	f000 f928 	bl	800621c <HID_ReadItem>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	4b14      	ldr	r3, [pc, #80]	@ (8006024 <USBH_HID_KeybdDecode+0x104>)
 8005fd2:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	481a      	ldr	r0, [pc, #104]	@ (8006040 <USBH_HID_KeybdDecode+0x120>)
 8005fd8:	f000 f920 	bl	800621c <HID_ReadItem>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	4b10      	ldr	r3, [pc, #64]	@ (8006024 <USBH_HID_KeybdDecode+0x104>)
 8005fe2:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	73fb      	strb	r3, [r7, #15]
 8005fe8:	e00e      	b.n	8006008 <USBH_HID_KeybdDecode+0xe8>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	4619      	mov	r1, r3
 8005fee:	4815      	ldr	r0, [pc, #84]	@ (8006044 <USBH_HID_KeybdDecode+0x124>)
 8005ff0:	f000 f914 	bl	800621c <HID_ReadItem>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
 8005ff8:	b2d1      	uxtb	r1, r2
 8005ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8006024 <USBH_HID_KeybdDecode+0x104>)
 8005ffc:	4413      	add	r3, r2
 8005ffe:	460a      	mov	r2, r1
 8006000:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	3301      	adds	r3, #1
 8006006:	73fb      	strb	r3, [r7, #15]
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	2b05      	cmp	r3, #5
 800600c:	d9ed      	bls.n	8005fea <USBH_HID_KeybdDecode+0xca>
    }

    return USBH_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	e000      	b.n	8006014 <USBH_HID_KeybdDecode+0xf4>
  }
  return   USBH_FAIL;
 8006012:	2302      	movs	r3, #2
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	20000100 	.word	0x20000100
 8006020:	080085b0 	.word	0x080085b0
 8006024:	200000e8 	.word	0x200000e8
 8006028:	080085d0 	.word	0x080085d0
 800602c:	080085f0 	.word	0x080085f0
 8006030:	08008610 	.word	0x08008610
 8006034:	08008630 	.word	0x08008630
 8006038:	08008650 	.word	0x08008650
 800603c:	08008670 	.word	0x08008670
 8006040:	08008690 	.word	0x08008690
 8006044:	080086b0 	.word	0x080086b0

08006048 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	789b      	ldrb	r3, [r3, #2]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d103      	bne.n	8006060 <USBH_HID_GetASCIICode+0x18>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	799b      	ldrb	r3, [r3, #6]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d009      	beq.n	8006074 <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	7a5b      	ldrb	r3, [r3, #9]
 8006064:	461a      	mov	r2, r3
 8006066:	4b0b      	ldr	r3, [pc, #44]	@ (8006094 <USBH_HID_GetASCIICode+0x4c>)
 8006068:	5c9b      	ldrb	r3, [r3, r2]
 800606a:	461a      	mov	r2, r3
 800606c:	4b0a      	ldr	r3, [pc, #40]	@ (8006098 <USBH_HID_GetASCIICode+0x50>)
 800606e:	5c9b      	ldrb	r3, [r3, r2]
 8006070:	73fb      	strb	r3, [r7, #15]
 8006072:	e008      	b.n	8006086 <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	7a5b      	ldrb	r3, [r3, #9]
 8006078:	461a      	mov	r2, r3
 800607a:	4b06      	ldr	r3, [pc, #24]	@ (8006094 <USBH_HID_GetASCIICode+0x4c>)
 800607c:	5c9b      	ldrb	r3, [r3, r2]
 800607e:	461a      	mov	r2, r3
 8006080:	4b06      	ldr	r3, [pc, #24]	@ (800609c <USBH_HID_GetASCIICode+0x54>)
 8006082:	5c9b      	ldrb	r3, [r3, r2]
 8006084:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 8006086:	7bfb      	ldrb	r3, [r7, #15]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	080087d8 	.word	0x080087d8
 8006098:	08008754 	.word	0x08008754
 800609c:	080086d0 	.word	0x080086d0

080060a0 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 80060b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006128 <USBH_HID_MouseInit+0x88>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 80060b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006128 <USBH_HID_MouseInit+0x88>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 80060be:	4b1a      	ldr	r3, [pc, #104]	@ (8006128 <USBH_HID_MouseInit+0x88>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 80060c4:	4b18      	ldr	r3, [pc, #96]	@ (8006128 <USBH_HID_MouseInit+0x88>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 80060ca:	4b17      	ldr	r3, [pc, #92]	@ (8006128 <USBH_HID_MouseInit+0x88>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < sizeof(mouse_report_data); i++)
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	e00c      	b.n	80060f0 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 80060d6:	4a15      	ldr	r2, [pc, #84]	@ (800612c <USBH_HID_MouseInit+0x8c>)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4413      	add	r3, r2
 80060dc:	2200      	movs	r2, #0
 80060de:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 80060e0:	4a13      	ldr	r2, [pc, #76]	@ (8006130 <USBH_HID_MouseInit+0x90>)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4413      	add	r3, r2
 80060e6:	2200      	movs	r2, #0
 80060e8:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < sizeof(mouse_report_data); i++)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3301      	adds	r3, #1
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b07      	cmp	r3, #7
 80060f4:	d9ef      	bls.n	80060d6 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	8b1b      	ldrh	r3, [r3, #24]
 80060fa:	2b08      	cmp	r3, #8
 80060fc:	d902      	bls.n	8006104 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2208      	movs	r2, #8
 8006102:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = mouse_rx_report_buf;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	4a0a      	ldr	r2, [pc, #40]	@ (8006130 <USBH_HID_MouseInit+0x90>)
 8006108:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	f103 0008 	add.w	r0, r3, #8
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006116:	2250      	movs	r2, #80	@ 0x50
 8006118:	4619      	mov	r1, r3
 800611a:	f7ff fde0 	bl	8005cde <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20000108 	.word	0x20000108
 800612c:	20000110 	.word	0x20000110
 8006130:	20000118 	.word	0x20000118

08006134 <USBH_HID_GetMouseInfo>:
  *         The function return mouse information.
  * @param  phost: Host handle
  * @retval mouse information
  */
HID_MOUSE_Info_TypeDef *USBH_HID_GetMouseInfo(USBH_HandleTypeDef *phost)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  if (USBH_HID_MouseDecode(phost) == USBH_OK)
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f80d 	bl	800615c <USBH_HID_MouseDecode>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <USBH_HID_GetMouseInfo+0x18>
  {
    return &mouse_info;
 8006148:	4b03      	ldr	r3, [pc, #12]	@ (8006158 <USBH_HID_GetMouseInfo+0x24>)
 800614a:	e000      	b.n	800614e <USBH_HID_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 800614c:	2300      	movs	r3, #0
  }
}
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20000108 	.word	0x20000108

0800615c <USBH_HID_MouseDecode>:
  *         The function decode mouse data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_MouseDecode(USBH_HandleTypeDef *phost)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	60fb      	str	r3, [r7, #12]

  if ((HID_Handle->length == 0U) || (HID_Handle->fifo.buf == NULL))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8b1b      	ldrh	r3, [r3, #24]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <USBH_HID_MouseDecode+0x22>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <USBH_HID_MouseDecode+0x26>
  {
    return USBH_FAIL;
 800617e:	2302      	movs	r3, #2
 8006180:	e039      	b.n	80061f6 <USBH_HID_MouseDecode+0x9a>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &mouse_report_data, HID_Handle->length) == HID_Handle->length)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f103 0008 	add.w	r0, r3, #8
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8b1b      	ldrh	r3, [r3, #24]
 800618c:	461a      	mov	r2, r3
 800618e:	491c      	ldr	r1, [pc, #112]	@ (8006200 <USBH_HID_MouseDecode+0xa4>)
 8006190:	f7ff fdc1 	bl	8005d16 <USBH_HID_FifoRead>
 8006194:	4603      	mov	r3, r0
 8006196:	461a      	mov	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8b1b      	ldrh	r3, [r3, #24]
 800619c:	429a      	cmp	r2, r3
 800619e:	d129      	bne.n	80061f4 <USBH_HID_MouseDecode+0x98>
  {
    /*Decode report */
    mouse_info.x = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_x, 0U);
 80061a0:	2100      	movs	r1, #0
 80061a2:	4818      	ldr	r0, [pc, #96]	@ (8006204 <USBH_HID_MouseDecode+0xa8>)
 80061a4:	f000 f83a 	bl	800621c <HID_ReadItem>
 80061a8:	4603      	mov	r3, r0
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	4b16      	ldr	r3, [pc, #88]	@ (8006208 <USBH_HID_MouseDecode+0xac>)
 80061ae:	701a      	strb	r2, [r3, #0]
    mouse_info.y = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_y, 0U);
 80061b0:	2100      	movs	r1, #0
 80061b2:	4816      	ldr	r0, [pc, #88]	@ (800620c <USBH_HID_MouseDecode+0xb0>)
 80061b4:	f000 f832 	bl	800621c <HID_ReadItem>
 80061b8:	4603      	mov	r3, r0
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	4b12      	ldr	r3, [pc, #72]	@ (8006208 <USBH_HID_MouseDecode+0xac>)
 80061be:	705a      	strb	r2, [r3, #1]

    mouse_info.buttons[0] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b1, 0U);
 80061c0:	2100      	movs	r1, #0
 80061c2:	4813      	ldr	r0, [pc, #76]	@ (8006210 <USBH_HID_MouseDecode+0xb4>)
 80061c4:	f000 f82a 	bl	800621c <HID_ReadItem>
 80061c8:	4603      	mov	r3, r0
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006208 <USBH_HID_MouseDecode+0xac>)
 80061ce:	709a      	strb	r2, [r3, #2]
    mouse_info.buttons[1] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b2, 0U);
 80061d0:	2100      	movs	r1, #0
 80061d2:	4810      	ldr	r0, [pc, #64]	@ (8006214 <USBH_HID_MouseDecode+0xb8>)
 80061d4:	f000 f822 	bl	800621c <HID_ReadItem>
 80061d8:	4603      	mov	r3, r0
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006208 <USBH_HID_MouseDecode+0xac>)
 80061de:	70da      	strb	r2, [r3, #3]
    mouse_info.buttons[2] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b3, 0U);
 80061e0:	2100      	movs	r1, #0
 80061e2:	480d      	ldr	r0, [pc, #52]	@ (8006218 <USBH_HID_MouseDecode+0xbc>)
 80061e4:	f000 f81a 	bl	800621c <HID_ReadItem>
 80061e8:	4603      	mov	r3, r0
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	4b06      	ldr	r3, [pc, #24]	@ (8006208 <USBH_HID_MouseDecode+0xac>)
 80061ee:	711a      	strb	r2, [r3, #4]

    return USBH_OK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	e000      	b.n	80061f6 <USBH_HID_MouseDecode+0x9a>
  }
  return   USBH_FAIL;
 80061f4:	2302      	movs	r3, #2
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20000110 	.word	0x20000110
 8006204:	08008920 	.word	0x08008920
 8006208:	20000108 	.word	0x20000108
 800620c:	08008940 	.word	0x08008940
 8006210:	080088c0 	.word	0x080088c0
 8006214:	080088e0 	.word	0x080088e0
 8006218:	08008900 	.word	0x08008900

0800621c <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800621c:	b480      	push	{r7}
 800621e:	b089      	sub	sp, #36	@ 0x24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800622c:	2300      	movs	r3, #0
 800622e:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	7a1b      	ldrb	r3, [r3, #8]
 800623a:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, we may need to offset ri->data.*/
  if (ri->count > 0U)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	7a5b      	ldrb	r3, [r3, #9]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01a      	beq.n	800627a <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	7a5b      	ldrb	r3, [r3, #9]
 8006248:	78fa      	ldrb	r2, [r7, #3]
 800624a:	429a      	cmp	r2, r3
 800624c:	d301      	bcc.n	8006252 <HID_ReadItem+0x36>
    {
      return (0U);
 800624e:	2300      	movs	r3, #0
 8006250:	e078      	b.n	8006344 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 8006252:	78fb      	ldrb	r3, [r7, #3]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6852      	ldr	r2, [r2, #4]
 8006258:	fb02 f303 	mul.w	r3, r2, r3
 800625c:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800625e:	7cfb      	ldrb	r3, [r7, #19]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4413      	add	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	08db      	lsrs	r3, r3, #3
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4413      	add	r3, r2
 800626e:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	b2db      	uxtb	r3, r3
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800627a:	2300      	movs	r3, #0
 800627c:	61bb      	str	r3, [r7, #24]
 800627e:	e00a      	b.n	8006296 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	461a      	mov	r2, r3
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	fa02 f303 	lsl.w	r3, r2, r3
 800628e:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	3301      	adds	r3, #1
 8006294:	61bb      	str	r3, [r7, #24]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d004      	beq.n	80062ac <HID_ReadItem+0x90>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	08db      	lsrs	r3, r3, #3
 80062a8:	3301      	adds	r3, #1
 80062aa:	e002      	b.n	80062b2 <HID_ReadItem+0x96>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	08db      	lsrs	r3, r3, #3
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d8e3      	bhi.n	8006280 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 80062b8:	7cfb      	ldrb	r3, [r7, #19]
 80062ba:	69fa      	ldr	r2, [r7, #28]
 80062bc:	40da      	lsrs	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f04f 31ff 	mov.w	r1, #4294967295
 80062c6:	fa01 f303 	lsl.w	r3, r1, r3
 80062ca:	43db      	mvns	r3, r3
 80062cc:	4013      	ands	r3, r2
 80062ce:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	69fa      	ldr	r2, [r7, #28]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d304      	bcc.n	80062e4 <HID_ReadItem+0xc8>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	69fa      	ldr	r2, [r7, #28]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d901      	bls.n	80062e8 <HID_ReadItem+0xcc>
  {
    return (0U);
 80062e4:	2300      	movs	r3, #0
 80062e6:	e02d      	b.n	8006344 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	7a9b      	ldrb	r3, [r3, #10]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d01e      	beq.n	800632e <HID_ReadItem+0x112>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	69fa      	ldr	r2, [r7, #28]
 80062f8:	fa22 f303 	lsr.w	r3, r2, r3
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	d014      	beq.n	800632e <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	fa02 f303 	lsl.w	r3, r2, r3
 800630e:	425b      	negs	r3, r3
 8006310:	69fa      	ldr	r2, [r7, #28]
 8006312:	4313      	orrs	r3, r2
 8006314:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d101      	bne.n	8006322 <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	e010      	b.n	8006344 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	fb02 f303 	mul.w	r3, r2, r3
 800632c:	e00a      	b.n	8006344 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d101      	bne.n	800633a <HID_ReadItem+0x11e>
    {
      return (val);
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	e004      	b.n	8006344 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	69fa      	ldr	r2, [r7, #28]
 8006340:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 8006344:	4618      	mov	r0, r3
 8006346:	3724      	adds	r7, #36	@ 0x24
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	4613      	mov	r3, r2
 800635c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006364:	2302      	movs	r3, #2
 8006366:	e029      	b.n	80063bc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	79fa      	ldrb	r2, [r7, #7]
 800636c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 f81f 	bl	80063c4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f001 fd9f 	bl	8007ef8 <USBH_LL_Init>

  return USBH_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	e009      	b.n	80063ea <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	33e0      	adds	r3, #224	@ 0xe0
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	2200      	movs	r2, #0
 80063e2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3301      	adds	r3, #1
 80063e8:	60fb      	str	r3, [r7, #12]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b0f      	cmp	r3, #15
 80063ee:	d9f2      	bls.n	80063d6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80063f0:	2300      	movs	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	e009      	b.n	800640a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006400:	2200      	movs	r2, #0
 8006402:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3301      	adds	r3, #1
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006410:	d3f1      	bcc.n	80063f6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2240      	movs	r2, #64	@ 0x40
 8006436:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	331c      	adds	r3, #28
 8006462:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006466:	2100      	movs	r1, #0
 8006468:	4618      	mov	r0, r3
 800646a:	f001 fff9 	bl	8008460 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006478:	2100      	movs	r1, #0
 800647a:	4618      	mov	r0, r3
 800647c:	f001 fff0 	bl	8008460 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006486:	2212      	movs	r2, #18
 8006488:	2100      	movs	r1, #0
 800648a:	4618      	mov	r0, r3
 800648c:	f001 ffe8 	bl	8008460 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006496:	223e      	movs	r2, #62	@ 0x3e
 8006498:	2100      	movs	r1, #0
 800649a:	4618      	mov	r0, r3
 800649c:	f001 ffe0 	bl	8008460 <memset>

  return USBH_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b085      	sub	sp, #20
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80064b4:	2300      	movs	r3, #0
 80064b6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d016      	beq.n	80064ec <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10e      	bne.n	80064e6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80064ce:	1c59      	adds	r1, r3, #1
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	33de      	adds	r3, #222	@ 0xde
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	73fb      	strb	r3, [r7, #15]
 80064e4:	e004      	b.n	80064f0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80064e6:	2302      	movs	r3, #2
 80064e8:	73fb      	strb	r3, [r7, #15]
 80064ea:	e001      	b.n	80064f0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80064ec:	2302      	movs	r3, #2
 80064ee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80064fe:	b480      	push	{r7}
 8006500:	b085      	sub	sp, #20
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	460b      	mov	r3, r1
 8006508:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006514:	78fa      	ldrb	r2, [r7, #3]
 8006516:	429a      	cmp	r2, r3
 8006518:	d204      	bcs.n	8006524 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	78fa      	ldrb	r2, [r7, #3]
 800651e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006522:	e001      	b.n	8006528 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006524:	2302      	movs	r3, #2
 8006526:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006528:	7bfb      	ldrb	r3, [r7, #15]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006536:	b480      	push	{r7}
 8006538:	b087      	sub	sp, #28
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	4608      	mov	r0, r1
 8006540:	4611      	mov	r1, r2
 8006542:	461a      	mov	r2, r3
 8006544:	4603      	mov	r3, r0
 8006546:	70fb      	strb	r3, [r7, #3]
 8006548:	460b      	mov	r3, r1
 800654a:	70bb      	strb	r3, [r7, #2]
 800654c:	4613      	mov	r3, r2
 800654e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006554:	2300      	movs	r3, #0
 8006556:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800655e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006560:	e025      	b.n	80065ae <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006562:	7dfb      	ldrb	r3, [r7, #23]
 8006564:	221a      	movs	r2, #26
 8006566:	fb02 f303 	mul.w	r3, r2, r3
 800656a:	3308      	adds	r3, #8
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4413      	add	r3, r2
 8006570:	3302      	adds	r3, #2
 8006572:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	795b      	ldrb	r3, [r3, #5]
 8006578:	78fa      	ldrb	r2, [r7, #3]
 800657a:	429a      	cmp	r2, r3
 800657c:	d002      	beq.n	8006584 <USBH_FindInterface+0x4e>
 800657e:	78fb      	ldrb	r3, [r7, #3]
 8006580:	2bff      	cmp	r3, #255	@ 0xff
 8006582:	d111      	bne.n	80065a8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006588:	78ba      	ldrb	r2, [r7, #2]
 800658a:	429a      	cmp	r2, r3
 800658c:	d002      	beq.n	8006594 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800658e:	78bb      	ldrb	r3, [r7, #2]
 8006590:	2bff      	cmp	r3, #255	@ 0xff
 8006592:	d109      	bne.n	80065a8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006598:	787a      	ldrb	r2, [r7, #1]
 800659a:	429a      	cmp	r2, r3
 800659c:	d002      	beq.n	80065a4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800659e:	787b      	ldrb	r3, [r7, #1]
 80065a0:	2bff      	cmp	r3, #255	@ 0xff
 80065a2:	d101      	bne.n	80065a8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80065a4:	7dfb      	ldrb	r3, [r7, #23]
 80065a6:	e006      	b.n	80065b6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	3301      	adds	r3, #1
 80065ac:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80065ae:	7dfb      	ldrb	r3, [r7, #23]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d9d6      	bls.n	8006562 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80065b4:	23ff      	movs	r3, #255	@ 0xff
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	371c      	adds	r7, #28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b082      	sub	sp, #8
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f001 fcd0 	bl	8007f70 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80065d0:	2101      	movs	r1, #1
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f001 fde9 	bl	80081aa <USBH_LL_DriverVBUS>

  return USBH_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
	...

080065e4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b088      	sub	sp, #32
 80065e8:	af04      	add	r7, sp, #16
 80065ea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80065ec:	2302      	movs	r3, #2
 80065ee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d102      	bne.n	8006606 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2203      	movs	r2, #3
 8006604:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b0b      	cmp	r3, #11
 800660e:	f200 81bb 	bhi.w	8006988 <USBH_Process+0x3a4>
 8006612:	a201      	add	r2, pc, #4	@ (adr r2, 8006618 <USBH_Process+0x34>)
 8006614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006618:	08006649 	.word	0x08006649
 800661c:	0800667b 	.word	0x0800667b
 8006620:	080066e3 	.word	0x080066e3
 8006624:	08006923 	.word	0x08006923
 8006628:	08006989 	.word	0x08006989
 800662c:	08006783 	.word	0x08006783
 8006630:	080068c9 	.word	0x080068c9
 8006634:	080067b9 	.word	0x080067b9
 8006638:	080067d9 	.word	0x080067d9
 800663c:	080067f7 	.word	0x080067f7
 8006640:	0800683b 	.word	0x0800683b
 8006644:	0800690b 	.word	0x0800690b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 819b 	beq.w	800698c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800665c:	20c8      	movs	r0, #200	@ 0xc8
 800665e:	f001 fdee 	bl	800823e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f001 fce1 	bl	800802a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006678:	e188      	b.n	800698c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006680:	2b01      	cmp	r3, #1
 8006682:	d107      	bne.n	8006694 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006692:	e18a      	b.n	80069aa <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800669a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800669e:	d914      	bls.n	80066ca <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80066a6:	3301      	adds	r3, #1
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	d903      	bls.n	80066c2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	220d      	movs	r2, #13
 80066be:	701a      	strb	r2, [r3, #0]
      break;
 80066c0:	e173      	b.n	80069aa <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	701a      	strb	r2, [r3, #0]
      break;
 80066c8:	e16f      	b.n	80069aa <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80066d0:	f103 020a 	add.w	r2, r3, #10
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80066da:	200a      	movs	r0, #10
 80066dc:	f001 fdaf 	bl	800823e <USBH_Delay>
      break;
 80066e0:	e163      	b.n	80069aa <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80066f2:	2104      	movs	r1, #4
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80066f8:	2064      	movs	r0, #100	@ 0x64
 80066fa:	f001 fda0 	bl	800823e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f001 fc6c 	bl	8007fdc <USBH_LL_GetSpeed>
 8006704:	4603      	mov	r3, r0
 8006706:	461a      	mov	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2205      	movs	r2, #5
 8006712:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006714:	2100      	movs	r1, #0
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f001 fa77 	bl	8007c0a <USBH_AllocPipe>
 800671c:	4603      	mov	r3, r0
 800671e:	461a      	mov	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006724:	2180      	movs	r1, #128	@ 0x80
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f001 fa6f 	bl	8007c0a <USBH_AllocPipe>
 800672c:	4603      	mov	r3, r0
 800672e:	461a      	mov	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	7919      	ldrb	r1, [r3, #4]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006748:	9202      	str	r2, [sp, #8]
 800674a:	2200      	movs	r2, #0
 800674c:	9201      	str	r2, [sp, #4]
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	4603      	mov	r3, r0
 8006752:	2280      	movs	r2, #128	@ 0x80
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 fa29 	bl	8007bac <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	7959      	ldrb	r1, [r3, #5]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800676e:	9202      	str	r2, [sp, #8]
 8006770:	2200      	movs	r2, #0
 8006772:	9201      	str	r2, [sp, #4]
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	4603      	mov	r3, r0
 8006778:	2200      	movs	r2, #0
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f001 fa16 	bl	8007bac <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006780:	e113      	b.n	80069aa <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f916 	bl	80069b4 <USBH_HandleEnum>
 8006788:	4603      	mov	r3, r0
 800678a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800678c:	7bbb      	ldrb	r3, [r7, #14]
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	f040 80fd 	bne.w	8006990 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d103      	bne.n	80067b0 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2208      	movs	r2, #8
 80067ac:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80067ae:	e0ef      	b.n	8006990 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2207      	movs	r2, #7
 80067b4:	701a      	strb	r2, [r3, #0]
      break;
 80067b6:	e0eb      	b.n	8006990 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 80e8 	beq.w	8006994 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80067ca:	2101      	movs	r1, #1
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2208      	movs	r2, #8
 80067d4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80067d6:	e0dd      	b.n	8006994 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fc3a 	bl	800705a <USBH_SetCfg>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f040 80d5 	bne.w	8006998 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2209      	movs	r2, #9
 80067f2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80067f4:	e0d0      	b.n	8006998 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80067fc:	f003 0320 	and.w	r3, r3, #32
 8006800:	2b00      	cmp	r3, #0
 8006802:	d016      	beq.n	8006832 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006804:	2101      	movs	r1, #1
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fc4a 	bl	80070a0 <USBH_SetFeature>
 800680c:	4603      	mov	r3, r0
 800680e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006810:	7bbb      	ldrb	r3, [r7, #14]
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b00      	cmp	r3, #0
 8006816:	d103      	bne.n	8006820 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	220a      	movs	r2, #10
 800681c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800681e:	e0bd      	b.n	800699c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8006820:	7bbb      	ldrb	r3, [r7, #14]
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b03      	cmp	r3, #3
 8006826:	f040 80b9 	bne.w	800699c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	220a      	movs	r2, #10
 800682e:	701a      	strb	r2, [r3, #0]
      break;
 8006830:	e0b4      	b.n	800699c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	220a      	movs	r2, #10
 8006836:	701a      	strb	r2, [r3, #0]
      break;
 8006838:	e0b0      	b.n	800699c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 80ad 	beq.w	80069a0 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800684e:	2300      	movs	r3, #0
 8006850:	73fb      	strb	r3, [r7, #15]
 8006852:	e016      	b.n	8006882 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006854:	7bfa      	ldrb	r2, [r7, #15]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	32de      	adds	r2, #222	@ 0xde
 800685a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685e:	791a      	ldrb	r2, [r3, #4]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006866:	429a      	cmp	r2, r3
 8006868:	d108      	bne.n	800687c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800686a:	7bfa      	ldrb	r2, [r7, #15]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	32de      	adds	r2, #222	@ 0xde
 8006870:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800687a:	e005      	b.n	8006888 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	3301      	adds	r3, #1
 8006880:	73fb      	strb	r3, [r7, #15]
 8006882:	7bfb      	ldrb	r3, [r7, #15]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0e5      	beq.n	8006854 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800688e:	2b00      	cmp	r3, #0
 8006890:	d016      	beq.n	80068c0 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d109      	bne.n	80068b8 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2206      	movs	r2, #6
 80068a8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80068b0:	2103      	movs	r1, #3
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068b6:	e073      	b.n	80069a0 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	220d      	movs	r2, #13
 80068bc:	701a      	strb	r2, [r3, #0]
      break;
 80068be:	e06f      	b.n	80069a0 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	220d      	movs	r2, #13
 80068c4:	701a      	strb	r2, [r3, #0]
      break;
 80068c6:	e06b      	b.n	80069a0 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d017      	beq.n	8006902 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	4798      	blx	r3
 80068de:	4603      	mov	r3, r0
 80068e0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80068e2:	7bbb      	ldrb	r3, [r7, #14]
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d103      	bne.n	80068f2 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	220b      	movs	r2, #11
 80068ee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068f0:	e058      	b.n	80069a4 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80068f2:	7bbb      	ldrb	r3, [r7, #14]
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d154      	bne.n	80069a4 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	220d      	movs	r2, #13
 80068fe:	701a      	strb	r2, [r3, #0]
      break;
 8006900:	e050      	b.n	80069a4 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	220d      	movs	r2, #13
 8006906:	701a      	strb	r2, [r3, #0]
      break;
 8006908:	e04c      	b.n	80069a4 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006910:	2b00      	cmp	r3, #0
 8006912:	d049      	beq.n	80069a8 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	4798      	blx	r3
      }
      break;
 8006920:	e042      	b.n	80069a8 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7ff fd4a 	bl	80063c4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006936:	2b00      	cmp	r3, #0
 8006938:	d009      	beq.n	800694e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006954:	2b00      	cmp	r3, #0
 8006956:	d005      	beq.n	8006964 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800695e:	2105      	movs	r1, #5
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b01      	cmp	r3, #1
 800696e:	d107      	bne.n	8006980 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff fe22 	bl	80065c2 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800697e:	e014      	b.n	80069aa <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f001 faf5 	bl	8007f70 <USBH_LL_Start>
      break;
 8006986:	e010      	b.n	80069aa <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006988:	bf00      	nop
 800698a:	e00e      	b.n	80069aa <USBH_Process+0x3c6>
      break;
 800698c:	bf00      	nop
 800698e:	e00c      	b.n	80069aa <USBH_Process+0x3c6>
      break;
 8006990:	bf00      	nop
 8006992:	e00a      	b.n	80069aa <USBH_Process+0x3c6>
    break;
 8006994:	bf00      	nop
 8006996:	e008      	b.n	80069aa <USBH_Process+0x3c6>
      break;
 8006998:	bf00      	nop
 800699a:	e006      	b.n	80069aa <USBH_Process+0x3c6>
      break;
 800699c:	bf00      	nop
 800699e:	e004      	b.n	80069aa <USBH_Process+0x3c6>
      break;
 80069a0:	bf00      	nop
 80069a2:	e002      	b.n	80069aa <USBH_Process+0x3c6>
      break;
 80069a4:	bf00      	nop
 80069a6:	e000      	b.n	80069aa <USBH_Process+0x3c6>
      break;
 80069a8:	bf00      	nop
  }
  return USBH_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b088      	sub	sp, #32
 80069b8:	af04      	add	r7, sp, #16
 80069ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80069bc:	2301      	movs	r3, #1
 80069be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80069c0:	2301      	movs	r3, #1
 80069c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	785b      	ldrb	r3, [r3, #1]
 80069c8:	2b07      	cmp	r3, #7
 80069ca:	f200 81bd 	bhi.w	8006d48 <USBH_HandleEnum+0x394>
 80069ce:	a201      	add	r2, pc, #4	@ (adr r2, 80069d4 <USBH_HandleEnum+0x20>)
 80069d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d4:	080069f5 	.word	0x080069f5
 80069d8:	08006aaf 	.word	0x08006aaf
 80069dc:	08006b19 	.word	0x08006b19
 80069e0:	08006ba3 	.word	0x08006ba3
 80069e4:	08006c0d 	.word	0x08006c0d
 80069e8:	08006c7d 	.word	0x08006c7d
 80069ec:	08006cc3 	.word	0x08006cc3
 80069f0:	08006d09 	.word	0x08006d09
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80069f4:	2108      	movs	r1, #8
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fa4c 	bl	8006e94 <USBH_Get_DevDesc>
 80069fc:	4603      	mov	r3, r0
 80069fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006a00:	7bbb      	ldrb	r3, [r7, #14]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d12e      	bne.n	8006a64 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	7919      	ldrb	r1, [r3, #4]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006a2a:	9202      	str	r2, [sp, #8]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	9201      	str	r2, [sp, #4]
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	4603      	mov	r3, r0
 8006a34:	2280      	movs	r2, #128	@ 0x80
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f001 f8b8 	bl	8007bac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	7959      	ldrb	r1, [r3, #5]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006a50:	9202      	str	r2, [sp, #8]
 8006a52:	2200      	movs	r2, #0
 8006a54:	9201      	str	r2, [sp, #4]
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 f8a5 	bl	8007bac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006a62:	e173      	b.n	8006d4c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a64:	7bbb      	ldrb	r3, [r7, #14]
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	f040 8170 	bne.w	8006d4c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006a72:	3301      	adds	r3, #1
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d903      	bls.n	8006a8e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	220d      	movs	r2, #13
 8006a8a:	701a      	strb	r2, [r3, #0]
      break;
 8006a8c:	e15e      	b.n	8006d4c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	795b      	ldrb	r3, [r3, #5]
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f001 f8d9 	bl	8007c4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	791b      	ldrb	r3, [r3, #4]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f001 f8d3 	bl	8007c4c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	701a      	strb	r2, [r3, #0]
      break;
 8006aac:	e14e      	b.n	8006d4c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006aae:	2112      	movs	r1, #18
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f9ef 	bl	8006e94 <USBH_Get_DevDesc>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006aba:	7bbb      	ldrb	r3, [r7, #14]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d103      	bne.n	8006ac8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ac6:	e143      	b.n	8006d50 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	f040 8140 	bne.w	8006d50 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d903      	bls.n	8006af2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	220d      	movs	r2, #13
 8006aee:	701a      	strb	r2, [r3, #0]
      break;
 8006af0:	e12e      	b.n	8006d50 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	795b      	ldrb	r3, [r3, #5]
 8006af6:	4619      	mov	r1, r3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f001 f8a7 	bl	8007c4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	791b      	ldrb	r3, [r3, #4]
 8006b02:	4619      	mov	r1, r3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f001 f8a1 	bl	8007c4c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	701a      	strb	r2, [r3, #0]
      break;
 8006b16:	e11b      	b.n	8006d50 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006b18:	2101      	movs	r1, #1
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fa79 	bl	8007012 <USBH_SetAddress>
 8006b20:	4603      	mov	r3, r0
 8006b22:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b24:	7bbb      	ldrb	r3, [r7, #14]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d130      	bne.n	8006b8c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8006b2a:	2002      	movs	r0, #2
 8006b2c:	f001 fb87 	bl	800823e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2203      	movs	r2, #3
 8006b3c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	7919      	ldrb	r1, [r3, #4]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006b52:	9202      	str	r2, [sp, #8]
 8006b54:	2200      	movs	r2, #0
 8006b56:	9201      	str	r2, [sp, #4]
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2280      	movs	r2, #128	@ 0x80
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f001 f824 	bl	8007bac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	7959      	ldrb	r1, [r3, #5]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b78:	9202      	str	r2, [sp, #8]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	9201      	str	r2, [sp, #4]
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	4603      	mov	r3, r0
 8006b82:	2200      	movs	r2, #0
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f001 f811 	bl	8007bac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006b8a:	e0e3      	b.n	8006d54 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b8c:	7bbb      	ldrb	r3, [r7, #14]
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	f040 80e0 	bne.w	8006d54 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	220d      	movs	r2, #13
 8006b98:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	705a      	strb	r2, [r3, #1]
      break;
 8006ba0:	e0d8      	b.n	8006d54 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006ba2:	2109      	movs	r1, #9
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f9a1 	bl	8006eec <USBH_Get_CfgDesc>
 8006baa:	4603      	mov	r3, r0
 8006bac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d103      	bne.n	8006bbc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2204      	movs	r2, #4
 8006bb8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006bba:	e0cd      	b.n	8006d58 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006bbc:	7bbb      	ldrb	r3, [r7, #14]
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	f040 80ca 	bne.w	8006d58 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006bca:	3301      	adds	r3, #1
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d903      	bls.n	8006be6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	220d      	movs	r2, #13
 8006be2:	701a      	strb	r2, [r3, #0]
      break;
 8006be4:	e0b8      	b.n	8006d58 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	795b      	ldrb	r3, [r3, #5]
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f001 f82d 	bl	8007c4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	791b      	ldrb	r3, [r3, #4]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 f827 	bl	8007c4c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	701a      	strb	r2, [r3, #0]
      break;
 8006c0a:	e0a5      	b.n	8006d58 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f969 	bl	8006eec <USBH_Get_CfgDesc>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c1e:	7bbb      	ldrb	r3, [r7, #14]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d103      	bne.n	8006c2c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2205      	movs	r2, #5
 8006c28:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c2a:	e097      	b.n	8006d5c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c2c:	7bbb      	ldrb	r3, [r7, #14]
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	f040 8094 	bne.w	8006d5c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006c4a:	2b03      	cmp	r3, #3
 8006c4c:	d903      	bls.n	8006c56 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	220d      	movs	r2, #13
 8006c52:	701a      	strb	r2, [r3, #0]
      break;
 8006c54:	e082      	b.n	8006d5c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	795b      	ldrb	r3, [r3, #5]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fff5 	bl	8007c4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	791b      	ldrb	r3, [r3, #4]
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 ffef 	bl	8007c4c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	701a      	strb	r2, [r3, #0]
      break;
 8006c7a:	e06f      	b.n	8006d5c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d019      	beq.n	8006cba <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006c92:	23ff      	movs	r3, #255	@ 0xff
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f953 	bl	8006f40 <USBH_Get_StringDesc>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006c9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d103      	bne.n	8006cac <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2206      	movs	r2, #6
 8006ca8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006caa:	e059      	b.n	8006d60 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cac:	7bbb      	ldrb	r3, [r7, #14]
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d156      	bne.n	8006d60 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2206      	movs	r2, #6
 8006cb6:	705a      	strb	r2, [r3, #1]
      break;
 8006cb8:	e052      	b.n	8006d60 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2206      	movs	r2, #6
 8006cbe:	705a      	strb	r2, [r3, #1]
      break;
 8006cc0:	e04e      	b.n	8006d60 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d019      	beq.n	8006d00 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006cd8:	23ff      	movs	r3, #255	@ 0xff
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f930 	bl	8006f40 <USBH_Get_StringDesc>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d103      	bne.n	8006cf2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2207      	movs	r2, #7
 8006cee:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006cf0:	e038      	b.n	8006d64 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cf2:	7bbb      	ldrb	r3, [r7, #14]
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	d135      	bne.n	8006d64 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2207      	movs	r2, #7
 8006cfc:	705a      	strb	r2, [r3, #1]
      break;
 8006cfe:	e031      	b.n	8006d64 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2207      	movs	r2, #7
 8006d04:	705a      	strb	r2, [r3, #1]
      break;
 8006d06:	e02d      	b.n	8006d64 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d017      	beq.n	8006d42 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006d1e:	23ff      	movs	r3, #255	@ 0xff
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f90d 	bl	8006f40 <USBH_Get_StringDesc>
 8006d26:	4603      	mov	r3, r0
 8006d28:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d102      	bne.n	8006d36 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006d34:	e018      	b.n	8006d68 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d115      	bne.n	8006d68 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d40:	e012      	b.n	8006d68 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	73fb      	strb	r3, [r7, #15]
      break;
 8006d46:	e00f      	b.n	8006d68 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8006d48:	bf00      	nop
 8006d4a:	e00e      	b.n	8006d6a <USBH_HandleEnum+0x3b6>
      break;
 8006d4c:	bf00      	nop
 8006d4e:	e00c      	b.n	8006d6a <USBH_HandleEnum+0x3b6>
      break;
 8006d50:	bf00      	nop
 8006d52:	e00a      	b.n	8006d6a <USBH_HandleEnum+0x3b6>
      break;
 8006d54:	bf00      	nop
 8006d56:	e008      	b.n	8006d6a <USBH_HandleEnum+0x3b6>
      break;
 8006d58:	bf00      	nop
 8006d5a:	e006      	b.n	8006d6a <USBH_HandleEnum+0x3b6>
      break;
 8006d5c:	bf00      	nop
 8006d5e:	e004      	b.n	8006d6a <USBH_HandleEnum+0x3b6>
      break;
 8006d60:	bf00      	nop
 8006d62:	e002      	b.n	8006d6a <USBH_HandleEnum+0x3b6>
      break;
 8006d64:	bf00      	nop
 8006d66:	e000      	b.n	8006d6a <USBH_HandleEnum+0x3b6>
      break;
 8006d68:	bf00      	nop
  }
  return Status;
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b082      	sub	sp, #8
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f804 	bl	8006db6 <USBH_HandleSof>
}
 8006dae:	bf00      	nop
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b0b      	cmp	r3, #11
 8006dc6:	d10a      	bne.n	8006dde <USBH_HandleSof+0x28>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d005      	beq.n	8006dde <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	4798      	blx	r3
  }
}
 8006dde:	bf00      	nop
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006df6:	bf00      	nop
}
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b083      	sub	sp, #12
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8006e12:	bf00      	nop
}
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f001 f89a 	bl	8007fa6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	791b      	ldrb	r3, [r3, #4]
 8006e76:	4619      	mov	r1, r3
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 fee7 	bl	8007c4c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	795b      	ldrb	r3, [r3, #5]
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fee1 	bl	8007c4c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af02      	add	r7, sp, #8
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8006ea0:	887b      	ldrh	r3, [r7, #2]
 8006ea2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ea6:	d901      	bls.n	8006eac <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e01b      	b.n	8006ee4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8006eb2:	887b      	ldrh	r3, [r7, #2]
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f872 	bl	8006fa8 <USBH_GetDescriptor>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d109      	bne.n	8006ee2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006ed4:	887a      	ldrh	r2, [r7, #2]
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f929 	bl	8007130 <USBH_ParseDevDesc>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af02      	add	r7, sp, #8
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	331c      	adds	r3, #28
 8006efc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8006efe:	887b      	ldrh	r3, [r7, #2]
 8006f00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f04:	d901      	bls.n	8006f0a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e016      	b.n	8006f38 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006f0a:	887b      	ldrh	r3, [r7, #2]
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f14:	2100      	movs	r1, #0
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f846 	bl	8006fa8 <USBH_GetDescriptor>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d107      	bne.n	8006f36 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006f26:	887b      	ldrh	r3, [r7, #2]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	68b9      	ldr	r1, [r7, #8]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f9af 	bl	8007290 <USBH_ParseCfgDesc>
 8006f32:	4603      	mov	r3, r0
 8006f34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b088      	sub	sp, #32
 8006f44:	af02      	add	r7, sp, #8
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	607a      	str	r2, [r7, #4]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	72fb      	strb	r3, [r7, #11]
 8006f50:	4613      	mov	r3, r2
 8006f52:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8006f54:	893b      	ldrh	r3, [r7, #8]
 8006f56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f5a:	d802      	bhi.n	8006f62 <USBH_Get_StringDesc+0x22>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e01c      	b.n	8006fa0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8006f66:	7afb      	ldrb	r3, [r7, #11]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006f6e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8006f76:	893b      	ldrh	r3, [r7, #8]
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f000 f812 	bl	8006fa8 <USBH_GetDescriptor>
 8006f84:	4603      	mov	r3, r0
 8006f86:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d107      	bne.n	8006f9e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006f94:	893a      	ldrh	r2, [r7, #8]
 8006f96:	6879      	ldr	r1, [r7, #4]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 fb8d 	bl	80076b8 <USBH_ParseStringDesc>
  }

  return status;
 8006f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3718      	adds	r7, #24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	607b      	str	r3, [r7, #4]
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	72fb      	strb	r3, [r7, #11]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	789b      	ldrb	r3, [r3, #2]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d11c      	bne.n	8006ffc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006fc2:	7afb      	ldrb	r3, [r7, #11]
 8006fc4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2206      	movs	r2, #6
 8006fd2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	893a      	ldrh	r2, [r7, #8]
 8006fd8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006fda:	893b      	ldrh	r3, [r7, #8]
 8006fdc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006fe0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fe4:	d104      	bne.n	8006ff0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f240 4209 	movw	r2, #1033	@ 0x409
 8006fec:	829a      	strh	r2, [r3, #20]
 8006fee:	e002      	b.n	8006ff6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8b3a      	ldrh	r2, [r7, #24]
 8006ffa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006ffc:	8b3b      	ldrh	r3, [r7, #24]
 8006ffe:	461a      	mov	r2, r3
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f000 fba5 	bl	8007752 <USBH_CtlReq>
 8007008:	4603      	mov	r3, r0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b082      	sub	sp, #8
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	460b      	mov	r3, r1
 800701c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	789b      	ldrb	r3, [r3, #2]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d10f      	bne.n	8007046 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2205      	movs	r2, #5
 8007030:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007032:	78fb      	ldrb	r3, [r7, #3]
 8007034:	b29a      	uxth	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007046:	2200      	movs	r2, #0
 8007048:	2100      	movs	r1, #0
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fb81 	bl	8007752 <USBH_CtlReq>
 8007050:	4603      	mov	r3, r0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b082      	sub	sp, #8
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	460b      	mov	r3, r1
 8007064:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	789b      	ldrb	r3, [r3, #2]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d10e      	bne.n	800708c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2209      	movs	r2, #9
 8007078:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	887a      	ldrh	r2, [r7, #2]
 800707e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800708c:	2200      	movs	r2, #0
 800708e:	2100      	movs	r1, #0
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fb5e 	bl	8007752 <USBH_CtlReq>
 8007096:	4603      	mov	r3, r0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	789b      	ldrb	r3, [r3, #2]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d10f      	bne.n	80070d4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2203      	movs	r2, #3
 80070be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80070c0:	78fb      	ldrb	r3, [r7, #3]
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80070d4:	2200      	movs	r2, #0
 80070d6:	2100      	movs	r1, #0
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fb3a 	bl	8007752 <USBH_CtlReq>
 80070de:	4603      	mov	r3, r0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	460b      	mov	r3, r1
 80070f2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	789b      	ldrb	r3, [r3, #2]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d10f      	bne.n	800711c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2202      	movs	r2, #2
 8007100:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800710e:	78fb      	ldrb	r3, [r7, #3]
 8007110:	b29a      	uxth	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800711c:	2200      	movs	r2, #0
 800711e:	2100      	movs	r1, #0
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fb16 	bl	8007752 <USBH_CtlReq>
 8007126:	4603      	mov	r3, r0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	4613      	mov	r3, r2
 800713c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007144:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007150:	2302      	movs	r3, #2
 8007152:	e094      	b.n	800727e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	781a      	ldrb	r2, [r3, #0]
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	785a      	ldrb	r2, [r3, #1]
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	3302      	adds	r3, #2
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	3303      	adds	r3, #3
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	021b      	lsls	r3, r3, #8
 8007174:	b29b      	uxth	r3, r3
 8007176:	4313      	orrs	r3, r2
 8007178:	b29a      	uxth	r2, r3
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	791a      	ldrb	r2, [r3, #4]
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	795a      	ldrb	r2, [r3, #5]
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	799a      	ldrb	r2, [r3, #6]
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	79da      	ldrb	r2, [r3, #7]
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d004      	beq.n	80071b2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d11b      	bne.n	80071ea <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	79db      	ldrb	r3, [r3, #7]
 80071b6:	2b20      	cmp	r3, #32
 80071b8:	dc0f      	bgt.n	80071da <USBH_ParseDevDesc+0xaa>
 80071ba:	2b08      	cmp	r3, #8
 80071bc:	db0f      	blt.n	80071de <USBH_ParseDevDesc+0xae>
 80071be:	3b08      	subs	r3, #8
 80071c0:	4a32      	ldr	r2, [pc, #200]	@ (800728c <USBH_ParseDevDesc+0x15c>)
 80071c2:	fa22 f303 	lsr.w	r3, r2, r3
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	bf14      	ite	ne
 80071ce:	2301      	movne	r3, #1
 80071d0:	2300      	moveq	r3, #0
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d106      	bne.n	80071e6 <USBH_ParseDevDesc+0xb6>
 80071d8:	e001      	b.n	80071de <USBH_ParseDevDesc+0xae>
 80071da:	2b40      	cmp	r3, #64	@ 0x40
 80071dc:	d003      	beq.n	80071e6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	2208      	movs	r2, #8
 80071e2:	71da      	strb	r2, [r3, #7]
        break;
 80071e4:	e000      	b.n	80071e8 <USBH_ParseDevDesc+0xb8>
        break;
 80071e6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80071e8:	e00e      	b.n	8007208 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d107      	bne.n	8007204 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	79db      	ldrb	r3, [r3, #7]
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	d005      	beq.n	8007208 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	2208      	movs	r2, #8
 8007200:	71da      	strb	r2, [r3, #7]
 8007202:	e001      	b.n	8007208 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007204:	2303      	movs	r3, #3
 8007206:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007208:	88fb      	ldrh	r3, [r7, #6]
 800720a:	2b08      	cmp	r3, #8
 800720c:	d936      	bls.n	800727c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	3308      	adds	r3, #8
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	461a      	mov	r2, r3
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	3309      	adds	r3, #9
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	021b      	lsls	r3, r3, #8
 800721e:	b29b      	uxth	r3, r3
 8007220:	4313      	orrs	r3, r2
 8007222:	b29a      	uxth	r2, r3
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	330a      	adds	r3, #10
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	461a      	mov	r2, r3
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	330b      	adds	r3, #11
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	021b      	lsls	r3, r3, #8
 8007238:	b29b      	uxth	r3, r3
 800723a:	4313      	orrs	r3, r2
 800723c:	b29a      	uxth	r2, r3
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	330c      	adds	r3, #12
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	461a      	mov	r2, r3
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	330d      	adds	r3, #13
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	021b      	lsls	r3, r3, #8
 8007252:	b29b      	uxth	r3, r3
 8007254:	4313      	orrs	r3, r2
 8007256:	b29a      	uxth	r2, r3
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	7b9a      	ldrb	r2, [r3, #14]
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	7bda      	ldrb	r2, [r3, #15]
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	7c1a      	ldrb	r2, [r3, #16]
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	7c5a      	ldrb	r2, [r3, #17]
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800727c:	7dfb      	ldrb	r3, [r7, #23]
}
 800727e:	4618      	mov	r0, r3
 8007280:	371c      	adds	r7, #28
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	01000101 	.word	0x01000101

08007290 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b08c      	sub	sp, #48	@ 0x30
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	4613      	mov	r3, r2
 800729c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80072a4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80072b2:	2300      	movs	r3, #0
 80072b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80072be:	2302      	movs	r3, #2
 80072c0:	e0da      	b.n	8007478 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80072c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	2b09      	cmp	r3, #9
 80072cc:	d002      	beq.n	80072d4 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80072ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d0:	2209      	movs	r2, #9
 80072d2:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	781a      	ldrb	r2, [r3, #0]
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	785a      	ldrb	r2, [r3, #1]
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	3302      	adds	r3, #2
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	461a      	mov	r2, r3
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	3303      	adds	r3, #3
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	021b      	lsls	r3, r3, #8
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	4313      	orrs	r3, r2
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072fe:	bf28      	it	cs
 8007300:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007304:	b29a      	uxth	r2, r3
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	791a      	ldrb	r2, [r3, #4]
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	795a      	ldrb	r2, [r3, #5]
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	799a      	ldrb	r2, [r3, #6]
 800731e:	6a3b      	ldr	r3, [r7, #32]
 8007320:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	79da      	ldrb	r2, [r3, #7]
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	7a1a      	ldrb	r2, [r3, #8]
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007332:	88fb      	ldrh	r3, [r7, #6]
 8007334:	2b09      	cmp	r3, #9
 8007336:	f240 809d 	bls.w	8007474 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800733a:	2309      	movs	r3, #9
 800733c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800733e:	2300      	movs	r3, #0
 8007340:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007342:	e081      	b.n	8007448 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007344:	f107 0316 	add.w	r3, r7, #22
 8007348:	4619      	mov	r1, r3
 800734a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800734c:	f000 f9e7 	bl	800771e <USBH_GetNextDesc>
 8007350:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007354:	785b      	ldrb	r3, [r3, #1]
 8007356:	2b04      	cmp	r3, #4
 8007358:	d176      	bne.n	8007448 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800735a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	2b09      	cmp	r3, #9
 8007360:	d002      	beq.n	8007368 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007364:	2209      	movs	r2, #9
 8007366:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007368:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800736c:	221a      	movs	r2, #26
 800736e:	fb02 f303 	mul.w	r3, r2, r3
 8007372:	3308      	adds	r3, #8
 8007374:	6a3a      	ldr	r2, [r7, #32]
 8007376:	4413      	add	r3, r2
 8007378:	3302      	adds	r3, #2
 800737a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800737c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800737e:	69f8      	ldr	r0, [r7, #28]
 8007380:	f000 f87e 	bl	8007480 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007384:	2300      	movs	r3, #0
 8007386:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800738a:	2300      	movs	r3, #0
 800738c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800738e:	e043      	b.n	8007418 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007390:	f107 0316 	add.w	r3, r7, #22
 8007394:	4619      	mov	r1, r3
 8007396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007398:	f000 f9c1 	bl	800771e <USBH_GetNextDesc>
 800739c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800739e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a0:	785b      	ldrb	r3, [r3, #1]
 80073a2:	2b05      	cmp	r3, #5
 80073a4:	d138      	bne.n	8007418 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	795b      	ldrb	r3, [r3, #5]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d113      	bne.n	80073d6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d003      	beq.n	80073be <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	799b      	ldrb	r3, [r3, #6]
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d10b      	bne.n	80073d6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	79db      	ldrb	r3, [r3, #7]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10b      	bne.n	80073de <USBH_ParseCfgDesc+0x14e>
 80073c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	2b09      	cmp	r3, #9
 80073cc:	d007      	beq.n	80073de <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80073ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d0:	2209      	movs	r2, #9
 80073d2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80073d4:	e003      	b.n	80073de <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80073d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d8:	2207      	movs	r2, #7
 80073da:	701a      	strb	r2, [r3, #0]
 80073dc:	e000      	b.n	80073e0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80073de:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80073e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073e4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80073e8:	3201      	adds	r2, #1
 80073ea:	00d2      	lsls	r2, r2, #3
 80073ec:	211a      	movs	r1, #26
 80073ee:	fb01 f303 	mul.w	r3, r1, r3
 80073f2:	4413      	add	r3, r2
 80073f4:	3308      	adds	r3, #8
 80073f6:	6a3a      	ldr	r2, [r7, #32]
 80073f8:	4413      	add	r3, r2
 80073fa:	3304      	adds	r3, #4
 80073fc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80073fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007400:	69b9      	ldr	r1, [r7, #24]
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 f870 	bl	80074e8 <USBH_ParseEPDesc>
 8007408:	4603      	mov	r3, r0
 800740a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800740e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007412:	3301      	adds	r3, #1
 8007414:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	791b      	ldrb	r3, [r3, #4]
 800741c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007420:	429a      	cmp	r2, r3
 8007422:	d204      	bcs.n	800742e <USBH_ParseCfgDesc+0x19e>
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	885a      	ldrh	r2, [r3, #2]
 8007428:	8afb      	ldrh	r3, [r7, #22]
 800742a:	429a      	cmp	r2, r3
 800742c:	d8b0      	bhi.n	8007390 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	791b      	ldrb	r3, [r3, #4]
 8007432:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007436:	429a      	cmp	r2, r3
 8007438:	d201      	bcs.n	800743e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800743a:	2303      	movs	r3, #3
 800743c:	e01c      	b.n	8007478 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800743e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007442:	3301      	adds	r3, #1
 8007444:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007448:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800744c:	2b01      	cmp	r3, #1
 800744e:	d805      	bhi.n	800745c <USBH_ParseCfgDesc+0x1cc>
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	885a      	ldrh	r2, [r3, #2]
 8007454:	8afb      	ldrh	r3, [r7, #22]
 8007456:	429a      	cmp	r2, r3
 8007458:	f63f af74 	bhi.w	8007344 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	791b      	ldrb	r3, [r3, #4]
 8007460:	2b02      	cmp	r3, #2
 8007462:	bf28      	it	cs
 8007464:	2302      	movcs	r3, #2
 8007466:	b2db      	uxtb	r3, r3
 8007468:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800746c:	429a      	cmp	r2, r3
 800746e:	d201      	bcs.n	8007474 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8007470:	2303      	movs	r3, #3
 8007472:	e001      	b.n	8007478 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8007474:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007478:	4618      	mov	r0, r3
 800747a:	3730      	adds	r7, #48	@ 0x30
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	781a      	ldrb	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	785a      	ldrb	r2, [r3, #1]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	789a      	ldrb	r2, [r3, #2]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	78da      	ldrb	r2, [r3, #3]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	3304      	adds	r3, #4
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	bf28      	it	cs
 80074b4:	2302      	movcs	r3, #2
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	795a      	ldrb	r2, [r3, #5]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	799a      	ldrb	r2, [r3, #6]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	79da      	ldrb	r2, [r3, #7]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	7a1a      	ldrb	r2, [r3, #8]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	721a      	strb	r2, [r3, #8]
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b087      	sub	sp, #28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	781a      	ldrb	r2, [r3, #0]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	785a      	ldrb	r2, [r3, #1]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	789a      	ldrb	r2, [r3, #2]
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	78da      	ldrb	r2, [r3, #3]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	3304      	adds	r3, #4
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3305      	adds	r3, #5
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	021b      	lsls	r3, r3, #8
 8007528:	b29b      	uxth	r3, r3
 800752a:	4313      	orrs	r3, r2
 800752c:	b29a      	uxth	r2, r3
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	799a      	ldrb	r2, [r3, #6]
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	889b      	ldrh	r3, [r3, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d009      	beq.n	8007556 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800754a:	d804      	bhi.n	8007556 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007554:	d901      	bls.n	800755a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007556:	2303      	movs	r3, #3
 8007558:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007560:	2b00      	cmp	r3, #0
 8007562:	d136      	bne.n	80075d2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	78db      	ldrb	r3, [r3, #3]
 8007568:	f003 0303 	and.w	r3, r3, #3
 800756c:	2b02      	cmp	r3, #2
 800756e:	d108      	bne.n	8007582 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	889b      	ldrh	r3, [r3, #4]
 8007574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007578:	f240 8097 	bls.w	80076aa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800757c:	2303      	movs	r3, #3
 800757e:	75fb      	strb	r3, [r7, #23]
 8007580:	e093      	b.n	80076aa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	78db      	ldrb	r3, [r3, #3]
 8007586:	f003 0303 	and.w	r3, r3, #3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d107      	bne.n	800759e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	889b      	ldrh	r3, [r3, #4]
 8007592:	2b40      	cmp	r3, #64	@ 0x40
 8007594:	f240 8089 	bls.w	80076aa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007598:	2303      	movs	r3, #3
 800759a:	75fb      	strb	r3, [r7, #23]
 800759c:	e085      	b.n	80076aa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	78db      	ldrb	r3, [r3, #3]
 80075a2:	f003 0303 	and.w	r3, r3, #3
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d005      	beq.n	80075b6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	78db      	ldrb	r3, [r3, #3]
 80075ae:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d10a      	bne.n	80075cc <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	799b      	ldrb	r3, [r3, #6]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <USBH_ParseEPDesc+0xde>
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	799b      	ldrb	r3, [r3, #6]
 80075c2:	2b10      	cmp	r3, #16
 80075c4:	d970      	bls.n	80076a8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80075c6:	2303      	movs	r3, #3
 80075c8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80075ca:	e06d      	b.n	80076a8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80075cc:	2303      	movs	r3, #3
 80075ce:	75fb      	strb	r3, [r7, #23]
 80075d0:	e06b      	b.n	80076aa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d13c      	bne.n	8007656 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	78db      	ldrb	r3, [r3, #3]
 80075e0:	f003 0303 	and.w	r3, r3, #3
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d005      	beq.n	80075f4 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	78db      	ldrb	r3, [r3, #3]
 80075ec:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d106      	bne.n	8007602 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	889b      	ldrh	r3, [r3, #4]
 80075f8:	2b40      	cmp	r3, #64	@ 0x40
 80075fa:	d956      	bls.n	80076aa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80075fc:	2303      	movs	r3, #3
 80075fe:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007600:	e053      	b.n	80076aa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	78db      	ldrb	r3, [r3, #3]
 8007606:	f003 0303 	and.w	r3, r3, #3
 800760a:	2b01      	cmp	r3, #1
 800760c:	d10e      	bne.n	800762c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	799b      	ldrb	r3, [r3, #6]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d007      	beq.n	8007626 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800761a:	2b10      	cmp	r3, #16
 800761c:	d803      	bhi.n	8007626 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007622:	2b40      	cmp	r3, #64	@ 0x40
 8007624:	d941      	bls.n	80076aa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007626:	2303      	movs	r3, #3
 8007628:	75fb      	strb	r3, [r7, #23]
 800762a:	e03e      	b.n	80076aa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	78db      	ldrb	r3, [r3, #3]
 8007630:	f003 0303 	and.w	r3, r3, #3
 8007634:	2b03      	cmp	r3, #3
 8007636:	d10b      	bne.n	8007650 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	799b      	ldrb	r3, [r3, #6]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d004      	beq.n	800764a <USBH_ParseEPDesc+0x162>
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	889b      	ldrh	r3, [r3, #4]
 8007644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007648:	d32f      	bcc.n	80076aa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800764a:	2303      	movs	r3, #3
 800764c:	75fb      	strb	r3, [r7, #23]
 800764e:	e02c      	b.n	80076aa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007650:	2303      	movs	r3, #3
 8007652:	75fb      	strb	r3, [r7, #23]
 8007654:	e029      	b.n	80076aa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800765c:	2b02      	cmp	r3, #2
 800765e:	d120      	bne.n	80076a2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	78db      	ldrb	r3, [r3, #3]
 8007664:	f003 0303 	and.w	r3, r3, #3
 8007668:	2b00      	cmp	r3, #0
 800766a:	d106      	bne.n	800767a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	889b      	ldrh	r3, [r3, #4]
 8007670:	2b08      	cmp	r3, #8
 8007672:	d01a      	beq.n	80076aa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007674:	2303      	movs	r3, #3
 8007676:	75fb      	strb	r3, [r7, #23]
 8007678:	e017      	b.n	80076aa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	78db      	ldrb	r3, [r3, #3]
 800767e:	f003 0303 	and.w	r3, r3, #3
 8007682:	2b03      	cmp	r3, #3
 8007684:	d10a      	bne.n	800769c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	799b      	ldrb	r3, [r3, #6]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <USBH_ParseEPDesc+0x1ae>
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	889b      	ldrh	r3, [r3, #4]
 8007692:	2b08      	cmp	r3, #8
 8007694:	d909      	bls.n	80076aa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007696:	2303      	movs	r3, #3
 8007698:	75fb      	strb	r3, [r7, #23]
 800769a:	e006      	b.n	80076aa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800769c:	2303      	movs	r3, #3
 800769e:	75fb      	strb	r3, [r7, #23]
 80076a0:	e003      	b.n	80076aa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80076a2:	2303      	movs	r3, #3
 80076a4:	75fb      	strb	r3, [r7, #23]
 80076a6:	e000      	b.n	80076aa <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80076a8:	bf00      	nop
  }

  return status;
 80076aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	371c      	adds	r7, #28
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	4613      	mov	r3, r2
 80076c4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3301      	adds	r3, #1
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b03      	cmp	r3, #3
 80076ce:	d120      	bne.n	8007712 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	1e9a      	subs	r2, r3, #2
 80076d6:	88fb      	ldrh	r3, [r7, #6]
 80076d8:	4293      	cmp	r3, r2
 80076da:	bf28      	it	cs
 80076dc:	4613      	movcs	r3, r2
 80076de:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	3302      	adds	r3, #2
 80076e4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80076e6:	2300      	movs	r3, #0
 80076e8:	82fb      	strh	r3, [r7, #22]
 80076ea:	e00b      	b.n	8007704 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80076ec:	8afb      	ldrh	r3, [r7, #22]
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	4413      	add	r3, r2
 80076f2:	781a      	ldrb	r2, [r3, #0]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	3301      	adds	r3, #1
 80076fc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80076fe:	8afb      	ldrh	r3, [r7, #22]
 8007700:	3302      	adds	r3, #2
 8007702:	82fb      	strh	r3, [r7, #22]
 8007704:	8afa      	ldrh	r2, [r7, #22]
 8007706:	8abb      	ldrh	r3, [r7, #20]
 8007708:	429a      	cmp	r2, r3
 800770a:	d3ef      	bcc.n	80076ec <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2200      	movs	r2, #0
 8007710:	701a      	strb	r2, [r3, #0]
  }
}
 8007712:	bf00      	nop
 8007714:	371c      	adds	r7, #28
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800771e:	b480      	push	{r7}
 8007720:	b085      	sub	sp, #20
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	881b      	ldrh	r3, [r3, #0]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	7812      	ldrb	r2, [r2, #0]
 8007730:	4413      	add	r3, r2
 8007732:	b29a      	uxth	r2, r3
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4413      	add	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007744:	68fb      	ldr	r3, [r7, #12]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b086      	sub	sp, #24
 8007756:	af00      	add	r7, sp, #0
 8007758:	60f8      	str	r0, [r7, #12]
 800775a:	60b9      	str	r1, [r7, #8]
 800775c:	4613      	mov	r3, r2
 800775e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007760:	2301      	movs	r3, #1
 8007762:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	789b      	ldrb	r3, [r3, #2]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d002      	beq.n	8007772 <USBH_CtlReq+0x20>
 800776c:	2b02      	cmp	r3, #2
 800776e:	d00f      	beq.n	8007790 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007770:	e027      	b.n	80077c2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	88fa      	ldrh	r2, [r7, #6]
 800777c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2201      	movs	r2, #1
 8007782:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2202      	movs	r2, #2
 8007788:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800778a:	2301      	movs	r3, #1
 800778c:	75fb      	strb	r3, [r7, #23]
      break;
 800778e:	e018      	b.n	80077c2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 f81b 	bl	80077cc <USBH_HandleControl>
 8007796:	4603      	mov	r3, r0
 8007798:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800779a:	7dfb      	ldrb	r3, [r7, #23]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <USBH_CtlReq+0x54>
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
 80077a2:	2b03      	cmp	r3, #3
 80077a4:	d106      	bne.n	80077b4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2201      	movs	r2, #1
 80077aa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	761a      	strb	r2, [r3, #24]
      break;
 80077b2:	e005      	b.n	80077c0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80077b4:	7dfb      	ldrb	r3, [r7, #23]
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d102      	bne.n	80077c0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2201      	movs	r2, #1
 80077be:	709a      	strb	r2, [r3, #2]
      break;
 80077c0:	bf00      	nop
  }
  return status;
 80077c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3718      	adds	r7, #24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af02      	add	r7, sp, #8
 80077d2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80077d4:	2301      	movs	r3, #1
 80077d6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077d8:	2300      	movs	r3, #0
 80077da:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	7e1b      	ldrb	r3, [r3, #24]
 80077e0:	3b01      	subs	r3, #1
 80077e2:	2b0a      	cmp	r3, #10
 80077e4:	f200 8156 	bhi.w	8007a94 <USBH_HandleControl+0x2c8>
 80077e8:	a201      	add	r2, pc, #4	@ (adr r2, 80077f0 <USBH_HandleControl+0x24>)
 80077ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ee:	bf00      	nop
 80077f0:	0800781d 	.word	0x0800781d
 80077f4:	08007837 	.word	0x08007837
 80077f8:	080078a1 	.word	0x080078a1
 80077fc:	080078c7 	.word	0x080078c7
 8007800:	080078ff 	.word	0x080078ff
 8007804:	08007929 	.word	0x08007929
 8007808:	0800797b 	.word	0x0800797b
 800780c:	0800799d 	.word	0x0800799d
 8007810:	080079d9 	.word	0x080079d9
 8007814:	080079ff 	.word	0x080079ff
 8007818:	08007a3d 	.word	0x08007a3d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f103 0110 	add.w	r1, r3, #16
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	795b      	ldrb	r3, [r3, #5]
 8007826:	461a      	mov	r2, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f943 	bl	8007ab4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2202      	movs	r2, #2
 8007832:	761a      	strb	r2, [r3, #24]
      break;
 8007834:	e139      	b.n	8007aaa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	795b      	ldrb	r3, [r3, #5]
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fca1 	bl	8008184 <USBH_LL_GetURBState>
 8007842:	4603      	mov	r3, r0
 8007844:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d11e      	bne.n	800788a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	7c1b      	ldrb	r3, [r3, #16]
 8007850:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007854:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	8adb      	ldrh	r3, [r3, #22]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800785e:	7b7b      	ldrb	r3, [r7, #13]
 8007860:	2b80      	cmp	r3, #128	@ 0x80
 8007862:	d103      	bne.n	800786c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2203      	movs	r2, #3
 8007868:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800786a:	e115      	b.n	8007a98 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2205      	movs	r2, #5
 8007870:	761a      	strb	r2, [r3, #24]
      break;
 8007872:	e111      	b.n	8007a98 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007874:	7b7b      	ldrb	r3, [r7, #13]
 8007876:	2b80      	cmp	r3, #128	@ 0x80
 8007878:	d103      	bne.n	8007882 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2209      	movs	r2, #9
 800787e:	761a      	strb	r2, [r3, #24]
      break;
 8007880:	e10a      	b.n	8007a98 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2207      	movs	r2, #7
 8007886:	761a      	strb	r2, [r3, #24]
      break;
 8007888:	e106      	b.n	8007a98 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800788a:	7bbb      	ldrb	r3, [r7, #14]
 800788c:	2b04      	cmp	r3, #4
 800788e:	d003      	beq.n	8007898 <USBH_HandleControl+0xcc>
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	2b02      	cmp	r3, #2
 8007894:	f040 8100 	bne.w	8007a98 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	220b      	movs	r2, #11
 800789c:	761a      	strb	r2, [r3, #24]
      break;
 800789e:	e0fb      	b.n	8007a98 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6899      	ldr	r1, [r3, #8]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	899a      	ldrh	r2, [r3, #12]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	791b      	ldrb	r3, [r3, #4]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f93a 	bl	8007b32 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2204      	movs	r2, #4
 80078c2:	761a      	strb	r2, [r3, #24]
      break;
 80078c4:	e0f1      	b.n	8007aaa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	791b      	ldrb	r3, [r3, #4]
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fc59 	bl	8008184 <USBH_LL_GetURBState>
 80078d2:	4603      	mov	r3, r0
 80078d4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d102      	bne.n	80078e2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2209      	movs	r2, #9
 80078e0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
 80078e4:	2b05      	cmp	r3, #5
 80078e6:	d102      	bne.n	80078ee <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80078e8:	2303      	movs	r3, #3
 80078ea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80078ec:	e0d6      	b.n	8007a9c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	f040 80d3 	bne.w	8007a9c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	220b      	movs	r2, #11
 80078fa:	761a      	strb	r2, [r3, #24]
      break;
 80078fc:	e0ce      	b.n	8007a9c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6899      	ldr	r1, [r3, #8]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	899a      	ldrh	r2, [r3, #12]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	795b      	ldrb	r3, [r3, #5]
 800790a:	2001      	movs	r0, #1
 800790c:	9000      	str	r0, [sp, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f8ea 	bl	8007ae8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800791a:	b29a      	uxth	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2206      	movs	r2, #6
 8007924:	761a      	strb	r2, [r3, #24]
      break;
 8007926:	e0c0      	b.n	8007aaa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	795b      	ldrb	r3, [r3, #5]
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fc28 	bl	8008184 <USBH_LL_GetURBState>
 8007934:	4603      	mov	r3, r0
 8007936:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d103      	bne.n	8007946 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2207      	movs	r2, #7
 8007942:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007944:	e0ac      	b.n	8007aa0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	2b05      	cmp	r3, #5
 800794a:	d105      	bne.n	8007958 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	220c      	movs	r2, #12
 8007950:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007952:	2303      	movs	r3, #3
 8007954:	73fb      	strb	r3, [r7, #15]
      break;
 8007956:	e0a3      	b.n	8007aa0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	2b02      	cmp	r3, #2
 800795c:	d103      	bne.n	8007966 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2205      	movs	r2, #5
 8007962:	761a      	strb	r2, [r3, #24]
      break;
 8007964:	e09c      	b.n	8007aa0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007966:	7bbb      	ldrb	r3, [r7, #14]
 8007968:	2b04      	cmp	r3, #4
 800796a:	f040 8099 	bne.w	8007aa0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	220b      	movs	r2, #11
 8007972:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007974:	2302      	movs	r3, #2
 8007976:	73fb      	strb	r3, [r7, #15]
      break;
 8007978:	e092      	b.n	8007aa0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	791b      	ldrb	r3, [r3, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	2100      	movs	r1, #0
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f8d5 	bl	8007b32 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800798e:	b29a      	uxth	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2208      	movs	r2, #8
 8007998:	761a      	strb	r2, [r3, #24]

      break;
 800799a:	e086      	b.n	8007aaa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	791b      	ldrb	r3, [r3, #4]
 80079a0:	4619      	mov	r1, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fbee 	bl	8008184 <USBH_LL_GetURBState>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d105      	bne.n	80079be <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	220d      	movs	r2, #13
 80079b6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079bc:	e072      	b.n	8007aa4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80079be:	7bbb      	ldrb	r3, [r7, #14]
 80079c0:	2b04      	cmp	r3, #4
 80079c2:	d103      	bne.n	80079cc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	220b      	movs	r2, #11
 80079c8:	761a      	strb	r2, [r3, #24]
      break;
 80079ca:	e06b      	b.n	8007aa4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
 80079ce:	2b05      	cmp	r3, #5
 80079d0:	d168      	bne.n	8007aa4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80079d2:	2303      	movs	r3, #3
 80079d4:	73fb      	strb	r3, [r7, #15]
      break;
 80079d6:	e065      	b.n	8007aa4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	795b      	ldrb	r3, [r3, #5]
 80079dc:	2201      	movs	r2, #1
 80079de:	9200      	str	r2, [sp, #0]
 80079e0:	2200      	movs	r2, #0
 80079e2:	2100      	movs	r1, #0
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f87f 	bl	8007ae8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	220a      	movs	r2, #10
 80079fa:	761a      	strb	r2, [r3, #24]
      break;
 80079fc:	e055      	b.n	8007aaa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	795b      	ldrb	r3, [r3, #5]
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fbbd 	bl	8008184 <USBH_LL_GetURBState>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d105      	bne.n	8007a20 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	220d      	movs	r2, #13
 8007a1c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a1e:	e043      	b.n	8007aa8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d103      	bne.n	8007a2e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2209      	movs	r2, #9
 8007a2a:	761a      	strb	r2, [r3, #24]
      break;
 8007a2c:	e03c      	b.n	8007aa8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	2b04      	cmp	r3, #4
 8007a32:	d139      	bne.n	8007aa8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	220b      	movs	r2, #11
 8007a38:	761a      	strb	r2, [r3, #24]
      break;
 8007a3a:	e035      	b.n	8007aa8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	7e5b      	ldrb	r3, [r3, #25]
 8007a40:	3301      	adds	r3, #1
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	765a      	strb	r2, [r3, #25]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	7e5b      	ldrb	r3, [r3, #25]
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d806      	bhi.n	8007a5e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007a5c:	e025      	b.n	8007aaa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007a64:	2106      	movs	r1, #6
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	795b      	ldrb	r3, [r3, #5]
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f8e8 	bl	8007c4c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	791b      	ldrb	r3, [r3, #4]
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f8e2 	bl	8007c4c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007a8e:	2302      	movs	r3, #2
 8007a90:	73fb      	strb	r3, [r7, #15]
      break;
 8007a92:	e00a      	b.n	8007aaa <USBH_HandleControl+0x2de>

    default:
      break;
 8007a94:	bf00      	nop
 8007a96:	e008      	b.n	8007aaa <USBH_HandleControl+0x2de>
      break;
 8007a98:	bf00      	nop
 8007a9a:	e006      	b.n	8007aaa <USBH_HandleControl+0x2de>
      break;
 8007a9c:	bf00      	nop
 8007a9e:	e004      	b.n	8007aaa <USBH_HandleControl+0x2de>
      break;
 8007aa0:	bf00      	nop
 8007aa2:	e002      	b.n	8007aaa <USBH_HandleControl+0x2de>
      break;
 8007aa4:	bf00      	nop
 8007aa6:	e000      	b.n	8007aaa <USBH_HandleControl+0x2de>
      break;
 8007aa8:	bf00      	nop
  }

  return status;
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b088      	sub	sp, #32
 8007ab8:	af04      	add	r7, sp, #16
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ac2:	79f9      	ldrb	r1, [r7, #7]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	9303      	str	r3, [sp, #12]
 8007ac8:	2308      	movs	r3, #8
 8007aca:	9302      	str	r3, [sp, #8]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	9301      	str	r3, [sp, #4]
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 fb22 	bl	8008122 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b088      	sub	sp, #32
 8007aec:	af04      	add	r7, sp, #16
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	4611      	mov	r1, r2
 8007af4:	461a      	mov	r2, r3
 8007af6:	460b      	mov	r3, r1
 8007af8:	80fb      	strh	r3, [r7, #6]
 8007afa:	4613      	mov	r3, r2
 8007afc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b0c:	7979      	ldrb	r1, [r7, #5]
 8007b0e:	7e3b      	ldrb	r3, [r7, #24]
 8007b10:	9303      	str	r3, [sp, #12]
 8007b12:	88fb      	ldrh	r3, [r7, #6]
 8007b14:	9302      	str	r3, [sp, #8]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	9301      	str	r3, [sp, #4]
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	2200      	movs	r2, #0
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f000 fafd 	bl	8008122 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b088      	sub	sp, #32
 8007b36:	af04      	add	r7, sp, #16
 8007b38:	60f8      	str	r0, [r7, #12]
 8007b3a:	60b9      	str	r1, [r7, #8]
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	461a      	mov	r2, r3
 8007b40:	460b      	mov	r3, r1
 8007b42:	80fb      	strh	r3, [r7, #6]
 8007b44:	4613      	mov	r3, r2
 8007b46:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b48:	7979      	ldrb	r1, [r7, #5]
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	9303      	str	r3, [sp, #12]
 8007b4e:	88fb      	ldrh	r3, [r7, #6]
 8007b50:	9302      	str	r3, [sp, #8]
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	9301      	str	r3, [sp, #4]
 8007b56:	2301      	movs	r3, #1
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 fadf 	bl	8008122 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007b64:	2300      	movs	r3, #0

}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b088      	sub	sp, #32
 8007b72:	af04      	add	r7, sp, #16
 8007b74:	60f8      	str	r0, [r7, #12]
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	4611      	mov	r1, r2
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	71fb      	strb	r3, [r7, #7]
 8007b80:	4613      	mov	r3, r2
 8007b82:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b84:	79fb      	ldrb	r3, [r7, #7]
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	79b9      	ldrb	r1, [r7, #6]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	9203      	str	r2, [sp, #12]
 8007b8e:	9302      	str	r3, [sp, #8]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	9301      	str	r3, [sp, #4]
 8007b94:	2301      	movs	r3, #1
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	2303      	movs	r3, #3
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f000 fac0 	bl	8008122 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af04      	add	r7, sp, #16
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	4608      	mov	r0, r1
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	461a      	mov	r2, r3
 8007bba:	4603      	mov	r3, r0
 8007bbc:	70fb      	strb	r3, [r7, #3]
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	70bb      	strb	r3, [r7, #2]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007bc6:	7878      	ldrb	r0, [r7, #1]
 8007bc8:	78ba      	ldrb	r2, [r7, #2]
 8007bca:	78f9      	ldrb	r1, [r7, #3]
 8007bcc:	8b3b      	ldrh	r3, [r7, #24]
 8007bce:	9302      	str	r3, [sp, #8]
 8007bd0:	7d3b      	ldrb	r3, [r7, #20]
 8007bd2:	9301      	str	r3, [sp, #4]
 8007bd4:	7c3b      	ldrb	r3, [r7, #16]
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	4603      	mov	r3, r0
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fa53 	bl	8008086 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b082      	sub	sp, #8
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007bf6:	78fb      	ldrb	r3, [r7, #3]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fa72 	bl	80080e4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	460b      	mov	r3, r1
 8007c14:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f836 	bl	8007c88 <USBH_GetFreePipe>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007c20:	89fb      	ldrh	r3, [r7, #14]
 8007c22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d00a      	beq.n	8007c40 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007c2a:	78fa      	ldrb	r2, [r7, #3]
 8007c2c:	89fb      	ldrh	r3, [r7, #14]
 8007c2e:	f003 030f 	and.w	r3, r3, #15
 8007c32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	33e0      	adds	r3, #224	@ 0xe0
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	440b      	add	r3, r1
 8007c3e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007c40:	89fb      	ldrh	r3, [r7, #14]
 8007c42:	b2db      	uxtb	r3, r3
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	460b      	mov	r3, r1
 8007c56:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007c58:	78fb      	ldrb	r3, [r7, #3]
 8007c5a:	2b0f      	cmp	r3, #15
 8007c5c:	d80d      	bhi.n	8007c7a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007c5e:	78fb      	ldrb	r3, [r7, #3]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	33e0      	adds	r3, #224	@ 0xe0
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	685a      	ldr	r2, [r3, #4]
 8007c6a:	78fb      	ldrb	r3, [r7, #3]
 8007c6c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	33e0      	adds	r3, #224	@ 0xe0
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	440b      	add	r3, r1
 8007c78:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8007c94:	2300      	movs	r3, #0
 8007c96:	73fb      	strb	r3, [r7, #15]
 8007c98:	e00f      	b.n	8007cba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	33e0      	adds	r3, #224	@ 0xe0
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4413      	add	r3, r2
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d102      	bne.n	8007cb4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	e007      	b.n	8007cc4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	73fb      	strb	r3, [r7, #15]
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
 8007cbc:	2b0f      	cmp	r3, #15
 8007cbe:	d9ec      	bls.n	8007c9a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007cc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	490e      	ldr	r1, [pc, #56]	@ (8007d10 <MX_USB_HOST_Init+0x40>)
 8007cd8:	480e      	ldr	r0, [pc, #56]	@ (8007d14 <MX_USB_HOST_Init+0x44>)
 8007cda:	f7fe fb39 	bl	8006350 <USBH_Init>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007ce4:	f7f8 fd64 	bl	80007b0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 8007ce8:	490b      	ldr	r1, [pc, #44]	@ (8007d18 <MX_USB_HOST_Init+0x48>)
 8007cea:	480a      	ldr	r0, [pc, #40]	@ (8007d14 <MX_USB_HOST_Init+0x44>)
 8007cec:	f7fe fbdd 	bl	80064aa <USBH_RegisterClass>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007cf6:	f7f8 fd5b 	bl	80007b0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007cfa:	4806      	ldr	r0, [pc, #24]	@ (8007d14 <MX_USB_HOST_Init+0x44>)
 8007cfc:	f7fe fc61 	bl	80065c2 <USBH_Start>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007d06:	f7f8 fd53 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007d0a:	bf00      	nop
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	08007d31 	.word	0x08007d31
 8007d14:	20000120 	.word	0x20000120
 8007d18:	2000000c 	.word	0x2000000c

08007d1c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007d20:	4802      	ldr	r0, [pc, #8]	@ (8007d2c <MX_USB_HOST_Process+0x10>)
 8007d22:	f7fe fc5f 	bl	80065e4 <USBH_Process>
}
 8007d26:	bf00      	nop
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20000120 	.word	0x20000120

08007d30 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007d3c:	78fb      	ldrb	r3, [r7, #3]
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	2b04      	cmp	r3, #4
 8007d42:	d819      	bhi.n	8007d78 <USBH_UserProcess+0x48>
 8007d44:	a201      	add	r2, pc, #4	@ (adr r2, 8007d4c <USBH_UserProcess+0x1c>)
 8007d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4a:	bf00      	nop
 8007d4c:	08007d79 	.word	0x08007d79
 8007d50:	08007d69 	.word	0x08007d69
 8007d54:	08007d79 	.word	0x08007d79
 8007d58:	08007d71 	.word	0x08007d71
 8007d5c:	08007d61 	.word	0x08007d61
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007d60:	4b09      	ldr	r3, [pc, #36]	@ (8007d88 <USBH_UserProcess+0x58>)
 8007d62:	2203      	movs	r2, #3
 8007d64:	701a      	strb	r2, [r3, #0]
  break;
 8007d66:	e008      	b.n	8007d7a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007d68:	4b07      	ldr	r3, [pc, #28]	@ (8007d88 <USBH_UserProcess+0x58>)
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	701a      	strb	r2, [r3, #0]
  break;
 8007d6e:	e004      	b.n	8007d7a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007d70:	4b05      	ldr	r3, [pc, #20]	@ (8007d88 <USBH_UserProcess+0x58>)
 8007d72:	2201      	movs	r2, #1
 8007d74:	701a      	strb	r2, [r3, #0]
  break;
 8007d76:	e000      	b.n	8007d7a <USBH_UserProcess+0x4a>

  default:
  break;
 8007d78:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	200004f8 	.word	0x200004f8

08007d8c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b08a      	sub	sp, #40	@ 0x28
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d94:	f107 0314 	add.w	r3, r7, #20
 8007d98:	2200      	movs	r2, #0
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	605a      	str	r2, [r3, #4]
 8007d9e:	609a      	str	r2, [r3, #8]
 8007da0:	60da      	str	r2, [r3, #12]
 8007da2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007dac:	d147      	bne.n	8007e3e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dae:	2300      	movs	r3, #0
 8007db0:	613b      	str	r3, [r7, #16]
 8007db2:	4b25      	ldr	r3, [pc, #148]	@ (8007e48 <HAL_HCD_MspInit+0xbc>)
 8007db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007db6:	4a24      	ldr	r2, [pc, #144]	@ (8007e48 <HAL_HCD_MspInit+0xbc>)
 8007db8:	f043 0301 	orr.w	r3, r3, #1
 8007dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8007dbe:	4b22      	ldr	r3, [pc, #136]	@ (8007e48 <HAL_HCD_MspInit+0xbc>)
 8007dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	613b      	str	r3, [r7, #16]
 8007dc8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007dca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dd8:	f107 0314 	add.w	r3, r7, #20
 8007ddc:	4619      	mov	r1, r3
 8007dde:	481b      	ldr	r0, [pc, #108]	@ (8007e4c <HAL_HCD_MspInit+0xc0>)
 8007de0:	f7f8 ffb0 	bl	8000d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007de4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dea:	2302      	movs	r3, #2
 8007dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dee:	2300      	movs	r3, #0
 8007df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007df2:	2303      	movs	r3, #3
 8007df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007df6:	230a      	movs	r3, #10
 8007df8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dfa:	f107 0314 	add.w	r3, r7, #20
 8007dfe:	4619      	mov	r1, r3
 8007e00:	4812      	ldr	r0, [pc, #72]	@ (8007e4c <HAL_HCD_MspInit+0xc0>)
 8007e02:	f7f8 ff9f 	bl	8000d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e06:	4b10      	ldr	r3, [pc, #64]	@ (8007e48 <HAL_HCD_MspInit+0xbc>)
 8007e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e0a:	4a0f      	ldr	r2, [pc, #60]	@ (8007e48 <HAL_HCD_MspInit+0xbc>)
 8007e0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e10:	6353      	str	r3, [r2, #52]	@ 0x34
 8007e12:	2300      	movs	r3, #0
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	4b0c      	ldr	r3, [pc, #48]	@ (8007e48 <HAL_HCD_MspInit+0xbc>)
 8007e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e1a:	4a0b      	ldr	r2, [pc, #44]	@ (8007e48 <HAL_HCD_MspInit+0xbc>)
 8007e1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8007e22:	4b09      	ldr	r3, [pc, #36]	@ (8007e48 <HAL_HCD_MspInit+0xbc>)
 8007e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e2e:	2200      	movs	r2, #0
 8007e30:	2100      	movs	r1, #0
 8007e32:	2043      	movs	r0, #67	@ 0x43
 8007e34:	f7f8 ff4f 	bl	8000cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e38:	2043      	movs	r0, #67	@ 0x43
 8007e3a:	f7f8 ff68 	bl	8000d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e3e:	bf00      	nop
 8007e40:	3728      	adds	r7, #40	@ 0x28
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	40023800 	.word	0x40023800
 8007e4c:	40020000 	.word	0x40020000

08007e50 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fe ff97 	bl	8006d92 <USBH_LL_IncTimer>
}
 8007e64:	bf00      	nop
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fe ffcf 	bl	8006e1e <USBH_LL_Connect>
}
 8007e80:	bf00      	nop
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fe ffd8 	bl	8006e4c <USBH_LL_Disconnect>
}
 8007e9c:	bf00      	nop
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	460b      	mov	r3, r1
 8007eae:	70fb      	strb	r3, [r7, #3]
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fe ff89 	bl	8006de6 <USBH_LL_PortEnabled>
}
 8007ed4:	bf00      	nop
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fe ff89 	bl	8006e02 <USBH_LL_PortDisabled>
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d12a      	bne.n	8007f60 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007f0a:	4a18      	ldr	r2, [pc, #96]	@ (8007f6c <USBH_LL_Init+0x74>)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a15      	ldr	r2, [pc, #84]	@ (8007f6c <USBH_LL_Init+0x74>)
 8007f16:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f1a:	4b14      	ldr	r3, [pc, #80]	@ (8007f6c <USBH_LL_Init+0x74>)
 8007f1c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007f20:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007f22:	4b12      	ldr	r3, [pc, #72]	@ (8007f6c <USBH_LL_Init+0x74>)
 8007f24:	2208      	movs	r2, #8
 8007f26:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007f28:	4b10      	ldr	r3, [pc, #64]	@ (8007f6c <USBH_LL_Init+0x74>)
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8007f6c <USBH_LL_Init+0x74>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007f34:	4b0d      	ldr	r3, [pc, #52]	@ (8007f6c <USBH_LL_Init+0x74>)
 8007f36:	2202      	movs	r2, #2
 8007f38:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007f6c <USBH_LL_Init+0x74>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007f40:	480a      	ldr	r0, [pc, #40]	@ (8007f6c <USBH_LL_Init+0x74>)
 8007f42:	f7f9 f8b4 	bl	80010ae <HAL_HCD_Init>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007f4c:	f7f8 fc30 	bl	80007b0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007f50:	4806      	ldr	r0, [pc, #24]	@ (8007f6c <USBH_LL_Init+0x74>)
 8007f52:	f7f9 fd15 	bl	8001980 <HAL_HCD_GetCurrentFrame>
 8007f56:	4603      	mov	r3, r0
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7fe ff0a 	bl	8006d74 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	200004fc 	.word	0x200004fc

08007f70 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7f9 fc82 	bl	8001890 <HAL_HCD_Start>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 f95e 	bl	8008254 <USBH_Get_USB_Status>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b084      	sub	sp, #16
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7f9 fc8a 	bl	80018d6 <HAL_HCD_Stop>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 f943 	bl	8008254 <USBH_Get_USB_Status>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7f9 fcd4 	bl	800199c <HAL_HCD_GetCurrentSpeed>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d00c      	beq.n	8008014 <USBH_LL_GetSpeed+0x38>
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d80d      	bhi.n	800801a <USBH_LL_GetSpeed+0x3e>
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <USBH_LL_GetSpeed+0x2c>
 8008002:	2b01      	cmp	r3, #1
 8008004:	d003      	beq.n	800800e <USBH_LL_GetSpeed+0x32>
 8008006:	e008      	b.n	800801a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008008:	2300      	movs	r3, #0
 800800a:	73fb      	strb	r3, [r7, #15]
    break;
 800800c:	e008      	b.n	8008020 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800800e:	2301      	movs	r3, #1
 8008010:	73fb      	strb	r3, [r7, #15]
    break;
 8008012:	e005      	b.n	8008020 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008014:	2302      	movs	r3, #2
 8008016:	73fb      	strb	r3, [r7, #15]
    break;
 8008018:	e002      	b.n	8008020 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800801a:	2301      	movs	r3, #1
 800801c:	73fb      	strb	r3, [r7, #15]
    break;
 800801e:	bf00      	nop
  }
  return  speed;
 8008020:	7bfb      	ldrb	r3, [r7, #15]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b084      	sub	sp, #16
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008040:	4618      	mov	r0, r3
 8008042:	f7f9 fc65 	bl	8001910 <HAL_HCD_ResetPort>
 8008046:	4603      	mov	r3, r0
 8008048:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800804a:	7bfb      	ldrb	r3, [r7, #15]
 800804c:	4618      	mov	r0, r3
 800804e:	f000 f901 	bl	8008254 <USBH_Get_USB_Status>
 8008052:	4603      	mov	r3, r0
 8008054:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008056:	7bbb      	ldrb	r3, [r7, #14]
}
 8008058:	4618      	mov	r0, r3
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	460b      	mov	r3, r1
 800806a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008072:	78fa      	ldrb	r2, [r7, #3]
 8008074:	4611      	mov	r1, r2
 8008076:	4618      	mov	r0, r3
 8008078:	f7f9 fc6d 	bl	8001956 <HAL_HCD_HC_GetXferCount>
 800807c:	4603      	mov	r3, r0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008086:	b590      	push	{r4, r7, lr}
 8008088:	b089      	sub	sp, #36	@ 0x24
 800808a:	af04      	add	r7, sp, #16
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	4608      	mov	r0, r1
 8008090:	4611      	mov	r1, r2
 8008092:	461a      	mov	r2, r3
 8008094:	4603      	mov	r3, r0
 8008096:	70fb      	strb	r3, [r7, #3]
 8008098:	460b      	mov	r3, r1
 800809a:	70bb      	strb	r3, [r7, #2]
 800809c:	4613      	mov	r3, r2
 800809e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80080ae:	787c      	ldrb	r4, [r7, #1]
 80080b0:	78ba      	ldrb	r2, [r7, #2]
 80080b2:	78f9      	ldrb	r1, [r7, #3]
 80080b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80080b6:	9302      	str	r3, [sp, #8]
 80080b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80080bc:	9301      	str	r3, [sp, #4]
 80080be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	4623      	mov	r3, r4
 80080c6:	f7f9 f859 	bl	800117c <HAL_HCD_HC_Init>
 80080ca:	4603      	mov	r3, r0
 80080cc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80080ce:	7bfb      	ldrb	r3, [r7, #15]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 f8bf 	bl	8008254 <USBH_Get_USB_Status>
 80080d6:	4603      	mov	r3, r0
 80080d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080da:	7bbb      	ldrb	r3, [r7, #14]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd90      	pop	{r4, r7, pc}

080080e4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	460b      	mov	r3, r1
 80080ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80080fe:	78fa      	ldrb	r2, [r7, #3]
 8008100:	4611      	mov	r1, r2
 8008102:	4618      	mov	r0, r3
 8008104:	f7f9 f8f2 	bl	80012ec <HAL_HCD_HC_Halt>
 8008108:	4603      	mov	r3, r0
 800810a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	4618      	mov	r0, r3
 8008110:	f000 f8a0 	bl	8008254 <USBH_Get_USB_Status>
 8008114:	4603      	mov	r3, r0
 8008116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008118:	7bbb      	ldrb	r3, [r7, #14]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008122:	b590      	push	{r4, r7, lr}
 8008124:	b089      	sub	sp, #36	@ 0x24
 8008126:	af04      	add	r7, sp, #16
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	4608      	mov	r0, r1
 800812c:	4611      	mov	r1, r2
 800812e:	461a      	mov	r2, r3
 8008130:	4603      	mov	r3, r0
 8008132:	70fb      	strb	r3, [r7, #3]
 8008134:	460b      	mov	r3, r1
 8008136:	70bb      	strb	r3, [r7, #2]
 8008138:	4613      	mov	r3, r2
 800813a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800814a:	787c      	ldrb	r4, [r7, #1]
 800814c:	78ba      	ldrb	r2, [r7, #2]
 800814e:	78f9      	ldrb	r1, [r7, #3]
 8008150:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008154:	9303      	str	r3, [sp, #12]
 8008156:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008158:	9302      	str	r3, [sp, #8]
 800815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	4623      	mov	r3, r4
 8008166:	f7f9 f8e5 	bl	8001334 <HAL_HCD_HC_SubmitRequest>
 800816a:	4603      	mov	r3, r0
 800816c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800816e:	7bfb      	ldrb	r3, [r7, #15]
 8008170:	4618      	mov	r0, r3
 8008172:	f000 f86f 	bl	8008254 <USBH_Get_USB_Status>
 8008176:	4603      	mov	r3, r0
 8008178:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800817a:	7bbb      	ldrb	r3, [r7, #14]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3714      	adds	r7, #20
 8008180:	46bd      	mov	sp, r7
 8008182:	bd90      	pop	{r4, r7, pc}

08008184 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	460b      	mov	r3, r1
 800818e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008196:	78fa      	ldrb	r2, [r7, #3]
 8008198:	4611      	mov	r1, r2
 800819a:	4618      	mov	r0, r3
 800819c:	f7f9 fbc6 	bl	800192c <HAL_HCD_HC_GetURBState>
 80081a0:	4603      	mov	r3, r0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b082      	sub	sp, #8
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	460b      	mov	r3, r1
 80081b4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d103      	bne.n	80081c8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80081c0:	78fb      	ldrb	r3, [r7, #3]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 f872 	bl	80082ac <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80081c8:	20c8      	movs	r0, #200	@ 0xc8
 80081ca:	f7f8 fc85 	bl	8000ad8 <HAL_Delay>
  return USBH_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	70fb      	strb	r3, [r7, #3]
 80081e4:	4613      	mov	r3, r2
 80081e6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80081ee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80081f0:	78fa      	ldrb	r2, [r7, #3]
 80081f2:	68f9      	ldr	r1, [r7, #12]
 80081f4:	4613      	mov	r3, r2
 80081f6:	011b      	lsls	r3, r3, #4
 80081f8:	1a9b      	subs	r3, r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	440b      	add	r3, r1
 80081fe:	3317      	adds	r3, #23
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00a      	beq.n	800821c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008206:	78fa      	ldrb	r2, [r7, #3]
 8008208:	68f9      	ldr	r1, [r7, #12]
 800820a:	4613      	mov	r3, r2
 800820c:	011b      	lsls	r3, r3, #4
 800820e:	1a9b      	subs	r3, r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	440b      	add	r3, r1
 8008214:	333c      	adds	r3, #60	@ 0x3c
 8008216:	78ba      	ldrb	r2, [r7, #2]
 8008218:	701a      	strb	r2, [r3, #0]
 800821a:	e009      	b.n	8008230 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800821c:	78fa      	ldrb	r2, [r7, #3]
 800821e:	68f9      	ldr	r1, [r7, #12]
 8008220:	4613      	mov	r3, r2
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	1a9b      	subs	r3, r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	440b      	add	r3, r1
 800822a:	333d      	adds	r3, #61	@ 0x3d
 800822c:	78ba      	ldrb	r2, [r7, #2]
 800822e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b082      	sub	sp, #8
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7f8 fc46 	bl	8000ad8 <HAL_Delay>
}
 800824c:	bf00      	nop
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	4603      	mov	r3, r0
 800825c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008262:	79fb      	ldrb	r3, [r7, #7]
 8008264:	2b03      	cmp	r3, #3
 8008266:	d817      	bhi.n	8008298 <USBH_Get_USB_Status+0x44>
 8008268:	a201      	add	r2, pc, #4	@ (adr r2, 8008270 <USBH_Get_USB_Status+0x1c>)
 800826a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826e:	bf00      	nop
 8008270:	08008281 	.word	0x08008281
 8008274:	08008287 	.word	0x08008287
 8008278:	0800828d 	.word	0x0800828d
 800827c:	08008293 	.word	0x08008293
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008280:	2300      	movs	r3, #0
 8008282:	73fb      	strb	r3, [r7, #15]
    break;
 8008284:	e00b      	b.n	800829e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008286:	2302      	movs	r3, #2
 8008288:	73fb      	strb	r3, [r7, #15]
    break;
 800828a:	e008      	b.n	800829e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800828c:	2301      	movs	r3, #1
 800828e:	73fb      	strb	r3, [r7, #15]
    break;
 8008290:	e005      	b.n	800829e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008292:	2302      	movs	r3, #2
 8008294:	73fb      	strb	r3, [r7, #15]
    break;
 8008296:	e002      	b.n	800829e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008298:	2302      	movs	r3, #2
 800829a:	73fb      	strb	r3, [r7, #15]
    break;
 800829c:	bf00      	nop
  }
  return usb_status;
 800829e:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3714      	adds	r7, #20
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	4603      	mov	r3, r0
 80082b4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80082b6:	79fb      	ldrb	r3, [r7, #7]
 80082b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80082ba:	79fb      	ldrb	r3, [r7, #7]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d102      	bne.n	80082c6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80082c0:	2300      	movs	r3, #0
 80082c2:	73fb      	strb	r3, [r7, #15]
 80082c4:	e001      	b.n	80082ca <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80082c6:	2301      	movs	r3, #1
 80082c8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80082ca:	7bfb      	ldrb	r3, [r7, #15]
 80082cc:	461a      	mov	r2, r3
 80082ce:	2101      	movs	r1, #1
 80082d0:	4803      	ldr	r0, [pc, #12]	@ (80082e0 <MX_DriverVbusFS+0x34>)
 80082d2:	f7f8 fed3 	bl	800107c <HAL_GPIO_WritePin>
}
 80082d6:	bf00      	nop
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	40020800 	.word	0x40020800

080082e4 <malloc>:
 80082e4:	4b02      	ldr	r3, [pc, #8]	@ (80082f0 <malloc+0xc>)
 80082e6:	4601      	mov	r1, r0
 80082e8:	6818      	ldr	r0, [r3, #0]
 80082ea:	f000 b82d 	b.w	8008348 <_malloc_r>
 80082ee:	bf00      	nop
 80082f0:	2000002c 	.word	0x2000002c

080082f4 <free>:
 80082f4:	4b02      	ldr	r3, [pc, #8]	@ (8008300 <free+0xc>)
 80082f6:	4601      	mov	r1, r0
 80082f8:	6818      	ldr	r0, [r3, #0]
 80082fa:	f000 b8f5 	b.w	80084e8 <_free_r>
 80082fe:	bf00      	nop
 8008300:	2000002c 	.word	0x2000002c

08008304 <sbrk_aligned>:
 8008304:	b570      	push	{r4, r5, r6, lr}
 8008306:	4e0f      	ldr	r6, [pc, #60]	@ (8008344 <sbrk_aligned+0x40>)
 8008308:	460c      	mov	r4, r1
 800830a:	6831      	ldr	r1, [r6, #0]
 800830c:	4605      	mov	r5, r0
 800830e:	b911      	cbnz	r1, 8008316 <sbrk_aligned+0x12>
 8008310:	f000 f8ae 	bl	8008470 <_sbrk_r>
 8008314:	6030      	str	r0, [r6, #0]
 8008316:	4621      	mov	r1, r4
 8008318:	4628      	mov	r0, r5
 800831a:	f000 f8a9 	bl	8008470 <_sbrk_r>
 800831e:	1c43      	adds	r3, r0, #1
 8008320:	d103      	bne.n	800832a <sbrk_aligned+0x26>
 8008322:	f04f 34ff 	mov.w	r4, #4294967295
 8008326:	4620      	mov	r0, r4
 8008328:	bd70      	pop	{r4, r5, r6, pc}
 800832a:	1cc4      	adds	r4, r0, #3
 800832c:	f024 0403 	bic.w	r4, r4, #3
 8008330:	42a0      	cmp	r0, r4
 8008332:	d0f8      	beq.n	8008326 <sbrk_aligned+0x22>
 8008334:	1a21      	subs	r1, r4, r0
 8008336:	4628      	mov	r0, r5
 8008338:	f000 f89a 	bl	8008470 <_sbrk_r>
 800833c:	3001      	adds	r0, #1
 800833e:	d1f2      	bne.n	8008326 <sbrk_aligned+0x22>
 8008340:	e7ef      	b.n	8008322 <sbrk_aligned+0x1e>
 8008342:	bf00      	nop
 8008344:	200008dc 	.word	0x200008dc

08008348 <_malloc_r>:
 8008348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800834c:	1ccd      	adds	r5, r1, #3
 800834e:	f025 0503 	bic.w	r5, r5, #3
 8008352:	3508      	adds	r5, #8
 8008354:	2d0c      	cmp	r5, #12
 8008356:	bf38      	it	cc
 8008358:	250c      	movcc	r5, #12
 800835a:	2d00      	cmp	r5, #0
 800835c:	4606      	mov	r6, r0
 800835e:	db01      	blt.n	8008364 <_malloc_r+0x1c>
 8008360:	42a9      	cmp	r1, r5
 8008362:	d904      	bls.n	800836e <_malloc_r+0x26>
 8008364:	230c      	movs	r3, #12
 8008366:	6033      	str	r3, [r6, #0]
 8008368:	2000      	movs	r0, #0
 800836a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800836e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008444 <_malloc_r+0xfc>
 8008372:	f000 f869 	bl	8008448 <__malloc_lock>
 8008376:	f8d8 3000 	ldr.w	r3, [r8]
 800837a:	461c      	mov	r4, r3
 800837c:	bb44      	cbnz	r4, 80083d0 <_malloc_r+0x88>
 800837e:	4629      	mov	r1, r5
 8008380:	4630      	mov	r0, r6
 8008382:	f7ff ffbf 	bl	8008304 <sbrk_aligned>
 8008386:	1c43      	adds	r3, r0, #1
 8008388:	4604      	mov	r4, r0
 800838a:	d158      	bne.n	800843e <_malloc_r+0xf6>
 800838c:	f8d8 4000 	ldr.w	r4, [r8]
 8008390:	4627      	mov	r7, r4
 8008392:	2f00      	cmp	r7, #0
 8008394:	d143      	bne.n	800841e <_malloc_r+0xd6>
 8008396:	2c00      	cmp	r4, #0
 8008398:	d04b      	beq.n	8008432 <_malloc_r+0xea>
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	4639      	mov	r1, r7
 800839e:	4630      	mov	r0, r6
 80083a0:	eb04 0903 	add.w	r9, r4, r3
 80083a4:	f000 f864 	bl	8008470 <_sbrk_r>
 80083a8:	4581      	cmp	r9, r0
 80083aa:	d142      	bne.n	8008432 <_malloc_r+0xea>
 80083ac:	6821      	ldr	r1, [r4, #0]
 80083ae:	1a6d      	subs	r5, r5, r1
 80083b0:	4629      	mov	r1, r5
 80083b2:	4630      	mov	r0, r6
 80083b4:	f7ff ffa6 	bl	8008304 <sbrk_aligned>
 80083b8:	3001      	adds	r0, #1
 80083ba:	d03a      	beq.n	8008432 <_malloc_r+0xea>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	442b      	add	r3, r5
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	f8d8 3000 	ldr.w	r3, [r8]
 80083c6:	685a      	ldr	r2, [r3, #4]
 80083c8:	bb62      	cbnz	r2, 8008424 <_malloc_r+0xdc>
 80083ca:	f8c8 7000 	str.w	r7, [r8]
 80083ce:	e00f      	b.n	80083f0 <_malloc_r+0xa8>
 80083d0:	6822      	ldr	r2, [r4, #0]
 80083d2:	1b52      	subs	r2, r2, r5
 80083d4:	d420      	bmi.n	8008418 <_malloc_r+0xd0>
 80083d6:	2a0b      	cmp	r2, #11
 80083d8:	d917      	bls.n	800840a <_malloc_r+0xc2>
 80083da:	1961      	adds	r1, r4, r5
 80083dc:	42a3      	cmp	r3, r4
 80083de:	6025      	str	r5, [r4, #0]
 80083e0:	bf18      	it	ne
 80083e2:	6059      	strne	r1, [r3, #4]
 80083e4:	6863      	ldr	r3, [r4, #4]
 80083e6:	bf08      	it	eq
 80083e8:	f8c8 1000 	streq.w	r1, [r8]
 80083ec:	5162      	str	r2, [r4, r5]
 80083ee:	604b      	str	r3, [r1, #4]
 80083f0:	4630      	mov	r0, r6
 80083f2:	f000 f82f 	bl	8008454 <__malloc_unlock>
 80083f6:	f104 000b 	add.w	r0, r4, #11
 80083fa:	1d23      	adds	r3, r4, #4
 80083fc:	f020 0007 	bic.w	r0, r0, #7
 8008400:	1ac2      	subs	r2, r0, r3
 8008402:	bf1c      	itt	ne
 8008404:	1a1b      	subne	r3, r3, r0
 8008406:	50a3      	strne	r3, [r4, r2]
 8008408:	e7af      	b.n	800836a <_malloc_r+0x22>
 800840a:	6862      	ldr	r2, [r4, #4]
 800840c:	42a3      	cmp	r3, r4
 800840e:	bf0c      	ite	eq
 8008410:	f8c8 2000 	streq.w	r2, [r8]
 8008414:	605a      	strne	r2, [r3, #4]
 8008416:	e7eb      	b.n	80083f0 <_malloc_r+0xa8>
 8008418:	4623      	mov	r3, r4
 800841a:	6864      	ldr	r4, [r4, #4]
 800841c:	e7ae      	b.n	800837c <_malloc_r+0x34>
 800841e:	463c      	mov	r4, r7
 8008420:	687f      	ldr	r7, [r7, #4]
 8008422:	e7b6      	b.n	8008392 <_malloc_r+0x4a>
 8008424:	461a      	mov	r2, r3
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	42a3      	cmp	r3, r4
 800842a:	d1fb      	bne.n	8008424 <_malloc_r+0xdc>
 800842c:	2300      	movs	r3, #0
 800842e:	6053      	str	r3, [r2, #4]
 8008430:	e7de      	b.n	80083f0 <_malloc_r+0xa8>
 8008432:	230c      	movs	r3, #12
 8008434:	6033      	str	r3, [r6, #0]
 8008436:	4630      	mov	r0, r6
 8008438:	f000 f80c 	bl	8008454 <__malloc_unlock>
 800843c:	e794      	b.n	8008368 <_malloc_r+0x20>
 800843e:	6005      	str	r5, [r0, #0]
 8008440:	e7d6      	b.n	80083f0 <_malloc_r+0xa8>
 8008442:	bf00      	nop
 8008444:	200008e0 	.word	0x200008e0

08008448 <__malloc_lock>:
 8008448:	4801      	ldr	r0, [pc, #4]	@ (8008450 <__malloc_lock+0x8>)
 800844a:	f000 b84b 	b.w	80084e4 <__retarget_lock_acquire_recursive>
 800844e:	bf00      	nop
 8008450:	20000a20 	.word	0x20000a20

08008454 <__malloc_unlock>:
 8008454:	4801      	ldr	r0, [pc, #4]	@ (800845c <__malloc_unlock+0x8>)
 8008456:	f000 b846 	b.w	80084e6 <__retarget_lock_release_recursive>
 800845a:	bf00      	nop
 800845c:	20000a20 	.word	0x20000a20

08008460 <memset>:
 8008460:	4402      	add	r2, r0
 8008462:	4603      	mov	r3, r0
 8008464:	4293      	cmp	r3, r2
 8008466:	d100      	bne.n	800846a <memset+0xa>
 8008468:	4770      	bx	lr
 800846a:	f803 1b01 	strb.w	r1, [r3], #1
 800846e:	e7f9      	b.n	8008464 <memset+0x4>

08008470 <_sbrk_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	4d06      	ldr	r5, [pc, #24]	@ (800848c <_sbrk_r+0x1c>)
 8008474:	2300      	movs	r3, #0
 8008476:	4604      	mov	r4, r0
 8008478:	4608      	mov	r0, r1
 800847a:	602b      	str	r3, [r5, #0]
 800847c:	f7f8 fa48 	bl	8000910 <_sbrk>
 8008480:	1c43      	adds	r3, r0, #1
 8008482:	d102      	bne.n	800848a <_sbrk_r+0x1a>
 8008484:	682b      	ldr	r3, [r5, #0]
 8008486:	b103      	cbz	r3, 800848a <_sbrk_r+0x1a>
 8008488:	6023      	str	r3, [r4, #0]
 800848a:	bd38      	pop	{r3, r4, r5, pc}
 800848c:	20000a1c 	.word	0x20000a1c

08008490 <__errno>:
 8008490:	4b01      	ldr	r3, [pc, #4]	@ (8008498 <__errno+0x8>)
 8008492:	6818      	ldr	r0, [r3, #0]
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	2000002c 	.word	0x2000002c

0800849c <__libc_init_array>:
 800849c:	b570      	push	{r4, r5, r6, lr}
 800849e:	4d0d      	ldr	r5, [pc, #52]	@ (80084d4 <__libc_init_array+0x38>)
 80084a0:	4c0d      	ldr	r4, [pc, #52]	@ (80084d8 <__libc_init_array+0x3c>)
 80084a2:	1b64      	subs	r4, r4, r5
 80084a4:	10a4      	asrs	r4, r4, #2
 80084a6:	2600      	movs	r6, #0
 80084a8:	42a6      	cmp	r6, r4
 80084aa:	d109      	bne.n	80084c0 <__libc_init_array+0x24>
 80084ac:	4d0b      	ldr	r5, [pc, #44]	@ (80084dc <__libc_init_array+0x40>)
 80084ae:	4c0c      	ldr	r4, [pc, #48]	@ (80084e0 <__libc_init_array+0x44>)
 80084b0:	f000 f864 	bl	800857c <_init>
 80084b4:	1b64      	subs	r4, r4, r5
 80084b6:	10a4      	asrs	r4, r4, #2
 80084b8:	2600      	movs	r6, #0
 80084ba:	42a6      	cmp	r6, r4
 80084bc:	d105      	bne.n	80084ca <__libc_init_array+0x2e>
 80084be:	bd70      	pop	{r4, r5, r6, pc}
 80084c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c4:	4798      	blx	r3
 80084c6:	3601      	adds	r6, #1
 80084c8:	e7ee      	b.n	80084a8 <__libc_init_array+0xc>
 80084ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ce:	4798      	blx	r3
 80084d0:	3601      	adds	r6, #1
 80084d2:	e7f2      	b.n	80084ba <__libc_init_array+0x1e>
 80084d4:	08008968 	.word	0x08008968
 80084d8:	08008968 	.word	0x08008968
 80084dc:	08008968 	.word	0x08008968
 80084e0:	0800896c 	.word	0x0800896c

080084e4 <__retarget_lock_acquire_recursive>:
 80084e4:	4770      	bx	lr

080084e6 <__retarget_lock_release_recursive>:
 80084e6:	4770      	bx	lr

080084e8 <_free_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	4605      	mov	r5, r0
 80084ec:	2900      	cmp	r1, #0
 80084ee:	d041      	beq.n	8008574 <_free_r+0x8c>
 80084f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084f4:	1f0c      	subs	r4, r1, #4
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	bfb8      	it	lt
 80084fa:	18e4      	addlt	r4, r4, r3
 80084fc:	f7ff ffa4 	bl	8008448 <__malloc_lock>
 8008500:	4a1d      	ldr	r2, [pc, #116]	@ (8008578 <_free_r+0x90>)
 8008502:	6813      	ldr	r3, [r2, #0]
 8008504:	b933      	cbnz	r3, 8008514 <_free_r+0x2c>
 8008506:	6063      	str	r3, [r4, #4]
 8008508:	6014      	str	r4, [r2, #0]
 800850a:	4628      	mov	r0, r5
 800850c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008510:	f7ff bfa0 	b.w	8008454 <__malloc_unlock>
 8008514:	42a3      	cmp	r3, r4
 8008516:	d908      	bls.n	800852a <_free_r+0x42>
 8008518:	6820      	ldr	r0, [r4, #0]
 800851a:	1821      	adds	r1, r4, r0
 800851c:	428b      	cmp	r3, r1
 800851e:	bf01      	itttt	eq
 8008520:	6819      	ldreq	r1, [r3, #0]
 8008522:	685b      	ldreq	r3, [r3, #4]
 8008524:	1809      	addeq	r1, r1, r0
 8008526:	6021      	streq	r1, [r4, #0]
 8008528:	e7ed      	b.n	8008506 <_free_r+0x1e>
 800852a:	461a      	mov	r2, r3
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	b10b      	cbz	r3, 8008534 <_free_r+0x4c>
 8008530:	42a3      	cmp	r3, r4
 8008532:	d9fa      	bls.n	800852a <_free_r+0x42>
 8008534:	6811      	ldr	r1, [r2, #0]
 8008536:	1850      	adds	r0, r2, r1
 8008538:	42a0      	cmp	r0, r4
 800853a:	d10b      	bne.n	8008554 <_free_r+0x6c>
 800853c:	6820      	ldr	r0, [r4, #0]
 800853e:	4401      	add	r1, r0
 8008540:	1850      	adds	r0, r2, r1
 8008542:	4283      	cmp	r3, r0
 8008544:	6011      	str	r1, [r2, #0]
 8008546:	d1e0      	bne.n	800850a <_free_r+0x22>
 8008548:	6818      	ldr	r0, [r3, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	6053      	str	r3, [r2, #4]
 800854e:	4408      	add	r0, r1
 8008550:	6010      	str	r0, [r2, #0]
 8008552:	e7da      	b.n	800850a <_free_r+0x22>
 8008554:	d902      	bls.n	800855c <_free_r+0x74>
 8008556:	230c      	movs	r3, #12
 8008558:	602b      	str	r3, [r5, #0]
 800855a:	e7d6      	b.n	800850a <_free_r+0x22>
 800855c:	6820      	ldr	r0, [r4, #0]
 800855e:	1821      	adds	r1, r4, r0
 8008560:	428b      	cmp	r3, r1
 8008562:	bf04      	itt	eq
 8008564:	6819      	ldreq	r1, [r3, #0]
 8008566:	685b      	ldreq	r3, [r3, #4]
 8008568:	6063      	str	r3, [r4, #4]
 800856a:	bf04      	itt	eq
 800856c:	1809      	addeq	r1, r1, r0
 800856e:	6021      	streq	r1, [r4, #0]
 8008570:	6054      	str	r4, [r2, #4]
 8008572:	e7ca      	b.n	800850a <_free_r+0x22>
 8008574:	bd38      	pop	{r3, r4, r5, pc}
 8008576:	bf00      	nop
 8008578:	200008e0 	.word	0x200008e0

0800857c <_init>:
 800857c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857e:	bf00      	nop
 8008580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008582:	bc08      	pop	{r3}
 8008584:	469e      	mov	lr, r3
 8008586:	4770      	bx	lr

08008588 <_fini>:
 8008588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858a:	bf00      	nop
 800858c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800858e:	bc08      	pop	{r3}
 8008590:	469e      	mov	lr, r3
 8008592:	4770      	bx	lr
